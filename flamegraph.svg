<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="45756"><g><title>`0x1 (13 samples, 0.03%)</title><rect x="0.0044%" y="661" width="0.0284%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="13"/><text x="0.2544%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (13 samples, 0.03%)</title><rect x="0.0044%" y="645" width="0.0284%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="13"/><text x="0.2544%" y="655.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (42 samples, 0.09%)</title><rect x="0.0328%" y="645" width="0.0918%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="42"/><text x="0.2828%" y="655.50"></text></g><g><title>`0x1E (44 samples, 0.10%)</title><rect x="0.0328%" y="661" width="0.0962%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="44"/><text x="0.2828%" y="671.50"></text></g><g><title>`0x29985EAEEC0 (8 samples, 0.02%)</title><rect x="0.1595%" y="661" width="0.0175%" height="15" fill="rgb(208,68,35)" fg:x="73" fg:w="8"/><text x="0.4095%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (8 samples, 0.02%)</title><rect x="0.1595%" y="645" width="0.0175%" height="15" fill="rgb(232,128,0)" fg:x="73" fg:w="8"/><text x="0.4095%" y="655.50"></text></g><g><title>`0x29985EB22E0 (5 samples, 0.01%)</title><rect x="0.1836%" y="661" width="0.0109%" height="15" fill="rgb(207,160,47)" fg:x="84" fg:w="5"/><text x="0.4336%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (5 samples, 0.01%)</title><rect x="0.1836%" y="645" width="0.0109%" height="15" fill="rgb(228,23,34)" fg:x="84" fg:w="5"/><text x="0.4336%" y="655.50"></text></g><g><title>`0x29985EB3CE0 (7 samples, 0.02%)</title><rect x="0.1945%" y="661" width="0.0153%" height="15" fill="rgb(218,30,26)" fg:x="89" fg:w="7"/><text x="0.4445%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (7 samples, 0.02%)</title><rect x="0.1945%" y="645" width="0.0153%" height="15" fill="rgb(220,122,19)" fg:x="89" fg:w="7"/><text x="0.4445%" y="655.50"></text></g><g><title>`0x310 (7 samples, 0.02%)</title><rect x="0.2841%" y="661" width="0.0153%" height="15" fill="rgb(250,228,42)" fg:x="130" fg:w="7"/><text x="0.5341%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (7 samples, 0.02%)</title><rect x="0.2841%" y="645" width="0.0153%" height="15" fill="rgb(240,193,28)" fg:x="130" fg:w="7"/><text x="0.5341%" y="655.50"></text></g><g><title>`0x3C0 (18 samples, 0.04%)</title><rect x="0.2994%" y="661" width="0.0393%" height="15" fill="rgb(216,20,37)" fg:x="137" fg:w="18"/><text x="0.5494%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (18 samples, 0.04%)</title><rect x="0.2994%" y="645" width="0.0393%" height="15" fill="rgb(206,188,39)" fg:x="137" fg:w="18"/><text x="0.5494%" y="655.50"></text></g><g><title>`0x40 (6 samples, 0.01%)</title><rect x="0.3388%" y="661" width="0.0131%" height="15" fill="rgb(217,207,13)" fg:x="155" fg:w="6"/><text x="0.5888%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (6 samples, 0.01%)</title><rect x="0.3388%" y="645" width="0.0131%" height="15" fill="rgb(231,73,38)" fg:x="155" fg:w="6"/><text x="0.5888%" y="655.50"></text></g><g><title>`0xA5E1AFE7A0 (36 samples, 0.08%)</title><rect x="0.3562%" y="661" width="0.0787%" height="15" fill="rgb(225,20,46)" fg:x="163" fg:w="36"/><text x="0.6062%" y="671.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (36 samples, 0.08%)</title><rect x="0.3562%" y="645" width="0.0787%" height="15" fill="rgb(210,31,41)" fg:x="163" fg:w="36"/><text x="0.6062%" y="655.50"></text></g><g><title>ntdll.dll`LdrpFindOrPrepareLoadingModule (5 samples, 0.01%)</title><rect x="0.4437%" y="549" width="0.0109%" height="15" fill="rgb(221,200,47)" fg:x="203" fg:w="5"/><text x="0.6937%" y="559.50"></text></g><g><title>ntdll.dll`LdrpLoadKnownDll (5 samples, 0.01%)</title><rect x="0.4437%" y="533" width="0.0109%" height="15" fill="rgb(226,26,5)" fg:x="203" fg:w="5"/><text x="0.6937%" y="543.50"></text></g><g><title>ntdll.dll`LdrpMapDllWithSectionHandle (5 samples, 0.01%)</title><rect x="0.4437%" y="517" width="0.0109%" height="15" fill="rgb(249,33,26)" fg:x="203" fg:w="5"/><text x="0.6937%" y="527.50"></text></g><g><title>ntdll.dll`LdrpMapAndSnapDependency (5 samples, 0.01%)</title><rect x="0.4437%" y="501" width="0.0109%" height="15" fill="rgb(235,183,28)" fg:x="203" fg:w="5"/><text x="0.6937%" y="511.50"></text></g><g><title>ntdll.dll`LdrLoadDll (10 samples, 0.02%)</title><rect x="0.4415%" y="597" width="0.0219%" height="15" fill="rgb(221,5,38)" fg:x="202" fg:w="10"/><text x="0.6915%" y="607.50"></text></g><g><title>ntdll.dll`LdrpLoadDll (10 samples, 0.02%)</title><rect x="0.4415%" y="581" width="0.0219%" height="15" fill="rgb(247,18,42)" fg:x="202" fg:w="10"/><text x="0.6915%" y="591.50"></text></g><g><title>ntdll.dll`LdrpLoadDllInternal (10 samples, 0.02%)</title><rect x="0.4415%" y="565" width="0.0219%" height="15" fill="rgb(241,131,45)" fg:x="202" fg:w="10"/><text x="0.6915%" y="575.50"></text></g><g><title>ntdll.dll`LdrpInitializeGraphRecurse (6 samples, 0.01%)</title><rect x="0.4677%" y="597" width="0.0131%" height="15" fill="rgb(249,31,29)" fg:x="214" fg:w="6"/><text x="0.7177%" y="607.50"></text></g><g><title>ntdll.dll`LdrpInitializeGraphRecurse (6 samples, 0.01%)</title><rect x="0.4677%" y="581" width="0.0131%" height="15" fill="rgb(225,111,53)" fg:x="214" fg:w="6"/><text x="0.7177%" y="591.50"></text></g><g><title>ntdll.dll`LdrpLoadDependentModuleA (6 samples, 0.01%)</title><rect x="0.4852%" y="581" width="0.0131%" height="15" fill="rgb(238,160,17)" fg:x="222" fg:w="6"/><text x="0.7352%" y="591.50"></text></g><g><title>ntdll.dll`LdrpLoadDependentModuleInternal (6 samples, 0.01%)</title><rect x="0.4852%" y="565" width="0.0131%" height="15" fill="rgb(214,148,48)" fg:x="222" fg:w="6"/><text x="0.7352%" y="575.50"></text></g><g><title>ntdll.dll`LdrpLoadKnownDll (6 samples, 0.01%)</title><rect x="0.4852%" y="549" width="0.0131%" height="15" fill="rgb(232,36,49)" fg:x="222" fg:w="6"/><text x="0.7352%" y="559.50"></text></g><g><title>ntdll.dll`LdrpMapDllWithSectionHandle (5 samples, 0.01%)</title><rect x="0.4874%" y="533" width="0.0109%" height="15" fill="rgb(209,103,24)" fg:x="223" fg:w="5"/><text x="0.7374%" y="543.50"></text></g><g><title>ntdll.dll`LdrpMapAndSnapDependency (5 samples, 0.01%)</title><rect x="0.4874%" y="517" width="0.0109%" height="15" fill="rgb(229,88,8)" fg:x="223" fg:w="5"/><text x="0.7374%" y="527.50"></text></g><g><title>ntdll.dll`LdrpMapAndSnapDependency (7 samples, 0.02%)</title><rect x="0.4852%" y="597" width="0.0153%" height="15" fill="rgb(213,181,19)" fg:x="222" fg:w="7"/><text x="0.7352%" y="607.50"></text></g><g><title>ntdll.dll`LdrInitializeThunk (33 samples, 0.07%)</title><rect x="0.4393%" y="661" width="0.0721%" height="15" fill="rgb(254,191,54)" fg:x="201" fg:w="33"/><text x="0.6893%" y="671.50"></text></g><g><title>ntdll.dll`LdrpInitializeInternal (32 samples, 0.07%)</title><rect x="0.4415%" y="645" width="0.0699%" height="15" fill="rgb(241,83,37)" fg:x="202" fg:w="32"/><text x="0.6915%" y="655.50"></text></g><g><title>ntdll.dll`_LdrpInitialize (32 samples, 0.07%)</title><rect x="0.4415%" y="629" width="0.0699%" height="15" fill="rgb(233,36,39)" fg:x="202" fg:w="32"/><text x="0.6915%" y="639.50"></text></g><g><title>ntdll.dll`LdrpInitializeProcess (32 samples, 0.07%)</title><rect x="0.4415%" y="613" width="0.0699%" height="15" fill="rgb(226,3,54)" fg:x="202" fg:w="32"/><text x="0.6915%" y="623.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (90 samples, 0.20%)</title><rect x="0.5202%" y="341" width="0.1967%" height="15" fill="rgb(245,192,40)" fg:x="238" fg:w="90"/><text x="0.7702%" y="351.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (90 samples, 0.20%)</title><rect x="0.5202%" y="325" width="0.1967%" height="15" fill="rgb(238,167,29)" fg:x="238" fg:w="90"/><text x="0.7702%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (90 samples, 0.20%)</title><rect x="0.5202%" y="309" width="0.1967%" height="15" fill="rgb(232,182,51)" fg:x="238" fg:w="90"/><text x="0.7702%" y="319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (90 samples, 0.20%)</title><rect x="0.5202%" y="293" width="0.1967%" height="15" fill="rgb(231,60,39)" fg:x="238" fg:w="90"/><text x="0.7702%" y="303.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (90 samples, 0.20%)</title><rect x="0.5202%" y="277" width="0.1967%" height="15" fill="rgb(208,69,12)" fg:x="238" fg:w="90"/><text x="0.7702%" y="287.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (90 samples, 0.20%)</title><rect x="0.5202%" y="261" width="0.1967%" height="15" fill="rgb(235,93,37)" fg:x="238" fg:w="90"/><text x="0.7702%" y="271.50"></text></g><g><title>ntdll.dll`RtlpSubSegmentInitialize (80 samples, 0.17%)</title><rect x="0.5420%" y="245" width="0.1748%" height="15" fill="rgb(213,116,39)" fg:x="248" fg:w="80"/><text x="0.7920%" y="255.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt; &gt; &gt;*, tuple$ (60 samples, 0.13%)</title><rect x="0.7256%" y="245" width="0.1311%" height="15" fill="rgb(222,207,29)" fg:x="332" fg:w="60"/><text x="0.9756%" y="255.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$19::extend_trusted::closure$0(alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (60 samples, 0.13%)</title><rect x="0.7256%" y="229" width="0.1311%" height="15" fill="rgb(206,96,30)" fg:x="332" fg:w="60"/><text x="0.9756%" y="239.50"></text></g><g><title>neural_network.exe`core::ptr::write (60 samples, 0.13%)</title><rect x="0.7256%" y="213" width="0.1311%" height="15" fill="rgb(218,138,4)" fg:x="332" fg:w="60"/><text x="0.9756%" y="223.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (175 samples, 0.38%)</title><rect x="0.5202%" y="405" width="0.3825%" height="15" fill="rgb(250,191,14)" fg:x="238" fg:w="175"/><text x="0.7702%" y="415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$14::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (175 samples, 0.38%)</title><rect x="0.5202%" y="389" width="0.3825%" height="15" fill="rgb(239,60,40)" fg:x="238" fg:w="175"/><text x="0.7702%" y="399.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (175 samples, 0.38%)</title><rect x="0.5202%" y="373" width="0.3825%" height="15" fill="rgb(206,27,48)" fg:x="238" fg:w="175"/><text x="0.7702%" y="383.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (175 samples, 0.38%)</title><rect x="0.5202%" y="357" width="0.3825%" height="15" fill="rgb(225,35,8)" fg:x="238" fg:w="175"/><text x="0.7702%" y="367.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter (85 samples, 0.19%)</title><rect x="0.7168%" y="341" width="0.1858%" height="15" fill="rgb(250,213,24)" fg:x="328" fg:w="85"/><text x="0.9668%" y="351.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (85 samples, 0.19%)</title><rect x="0.7168%" y="325" width="0.1858%" height="15" fill="rgb(247,123,22)" fg:x="328" fg:w="85"/><text x="0.9668%" y="335.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt;, alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (85 samples, 0.19%)</title><rect x="0.7168%" y="309" width="0.1858%" height="15" fill="rgb(231,138,38)" fg:x="328" fg:w="85"/><text x="0.9668%" y="319.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (85 samples, 0.19%)</title><rect x="0.7168%" y="293" width="0.1858%" height="15" fill="rgb(231,145,46)" fg:x="328" fg:w="85"/><text x="0.9668%" y="303.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u8&gt;,f64,tuple$&lt;&gt;,neural_network::mnist::load_mnist_file::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (85 samples, 0.19%)</title><rect x="0.7168%" y="277" width="0.1858%" height="15" fill="rgb(251,118,11)" fg:x="328" fg:w="85"/><text x="0.9668%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u8&gt;,f64,tuple$&lt;&gt;,neural_network::mnist::load_mnist_file::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (81 samples, 0.18%)</title><rect x="0.7256%" y="261" width="0.1770%" height="15" fill="rgb(217,147,25)" fg:x="332" fg:w="81"/><text x="0.9756%" y="271.50"></text></g><g><title>neural_network.exe`neural_network::mnist::load_mnist_file::closure$0 (21 samples, 0.05%)</title><rect x="0.8567%" y="245" width="0.0459%" height="15" fill="rgb(247,81,37)" fg:x="392" fg:w="21"/><text x="1.1067%" y="255.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::spare_capacity_mut (17 samples, 0.04%)</title><rect x="0.9092%" y="341" width="0.0372%" height="15" fill="rgb(209,12,38)" fg:x="416" fg:w="17"/><text x="1.1592%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::capacity (17 samples, 0.04%)</title><rect x="0.9092%" y="325" width="0.0372%" height="15" fill="rgb(227,1,9)" fg:x="416" fg:w="17"/><text x="1.1592%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (17 samples, 0.04%)</title><rect x="0.9092%" y="309" width="0.0372%" height="15" fill="rgb(248,47,43)" fg:x="416" fg:w="17"/><text x="1.1592%" y="319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (17 samples, 0.04%)</title><rect x="0.9092%" y="293" width="0.0372%" height="15" fill="rgb(221,10,30)" fg:x="416" fg:w="17"/><text x="1.1592%" y="303.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (17 samples, 0.04%)</title><rect x="0.9092%" y="277" width="0.0372%" height="15" fill="rgb(210,229,1)" fg:x="416" fg:w="17"/><text x="1.1592%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (17 samples, 0.04%)</title><rect x="0.9092%" y="261" width="0.0372%" height="15" fill="rgb(222,148,37)" fg:x="416" fg:w="17"/><text x="1.1592%" y="271.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (17 samples, 0.04%)</title><rect x="0.9092%" y="245" width="0.0372%" height="15" fill="rgb(234,67,33)" fg:x="416" fg:w="17"/><text x="1.1592%" y="255.50"></text></g><g><title>ntdll.dll`RtlReAllocateHeap (17 samples, 0.04%)</title><rect x="0.9092%" y="229" width="0.0372%" height="15" fill="rgb(247,98,35)" fg:x="416" fg:w="17"/><text x="1.1592%" y="239.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeapInternal (17 samples, 0.04%)</title><rect x="0.9092%" y="213" width="0.0372%" height="15" fill="rgb(247,138,52)" fg:x="416" fg:w="17"/><text x="1.1592%" y="223.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeap (17 samples, 0.04%)</title><rect x="0.9092%" y="197" width="0.0372%" height="15" fill="rgb(213,79,30)" fg:x="416" fg:w="17"/><text x="1.1592%" y="207.50"></text></g><g><title>ntdll.dll`memcpy (13 samples, 0.03%)</title><rect x="0.9179%" y="181" width="0.0284%" height="15" fill="rgb(246,177,23)" fg:x="420" fg:w="13"/><text x="1.1679%" y="191.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decode_huffman_code(miniz_oxide::inflate::core::DecompressorOxide*, miniz_oxide::inflate::core::LocalVars*, unsigned long long, unsigned int, core::slice::iter::Iter (6 samples, 0.01%)</title><rect x="0.9616%" y="149" width="0.0131%" height="15" fill="rgb(230,62,27)" fg:x="440" fg:w="6"/><text x="1.2116%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::HuffmanTable::lookup (26 samples, 0.06%)</title><rect x="1.1081%" y="133" width="0.0568%" height="15" fill="rgb(216,154,8)" fg:x="507" fg:w="26"/><text x="1.3581%" y="143.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::HuffmanTable::fast_lookup (20 samples, 0.04%)</title><rect x="1.1212%" y="117" width="0.0437%" height="15" fill="rgb(244,35,45)" fg:x="513" fg:w="20"/><text x="1.3712%" y="127.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::apply_match(ref_mut$&lt;slice2$ (18 samples, 0.04%)</title><rect x="1.1649%" y="133" width="0.0393%" height="15" fill="rgb(251,115,12)" fg:x="533" fg:w="18"/><text x="1.4149%" y="143.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeTo (6 samples, 0.01%)</title><rect x="1.1911%" y="117" width="0.0131%" height="15" fill="rgb(240,54,50)" fg:x="545" fg:w="6"/><text x="1.4411%" y="127.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (6 samples, 0.01%)</title><rect x="1.1911%" y="101" width="0.0131%" height="15" fill="rgb(233,84,52)" fg:x="545" fg:w="6"/><text x="1.4411%" y="111.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (6 samples, 0.01%)</title><rect x="1.1911%" y="85" width="0.0131%" height="15" fill="rgb(207,117,47)" fg:x="545" fg:w="6"/><text x="1.4411%" y="95.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (6 samples, 0.01%)</title><rect x="1.1911%" y="69" width="0.0131%" height="15" fill="rgb(249,43,39)" fg:x="545" fg:w="6"/><text x="1.4411%" y="79.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::fill_bit_buffer(miniz_oxide::inflate::core::LocalVars*, core::slice::iter::Iter (13 samples, 0.03%)</title><rect x="1.2042%" y="133" width="0.0284%" height="15" fill="rgb(209,38,44)" fg:x="551" fg:w="13"/><text x="1.4542%" y="143.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::read_u32_le(core::slice::iter::Iter (5 samples, 0.01%)</title><rect x="1.2217%" y="117" width="0.0109%" height="15" fill="rgb(236,212,23)" fg:x="559" fg:w="5"/><text x="1.4717%" y="127.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::transfer(ref_mut$&lt;slice2$ (10 samples, 0.02%)</title><rect x="1.2326%" y="133" width="0.0219%" height="15" fill="rgb(242,79,21)" fg:x="564" fg:w="10"/><text x="1.4826%" y="143.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (6 samples, 0.01%)</title><rect x="1.2545%" y="133" width="0.0131%" height="15" fill="rgb(211,96,35)" fg:x="574" fg:w="6"/><text x="1.5045%" y="143.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decompress_fast(miniz_oxide::inflate::core::DecompressorOxide*, core::slice::iter::Iter (148 samples, 0.32%)</title><rect x="0.9747%" y="149" width="0.3235%" height="15" fill="rgb(253,215,40)" fg:x="446" fg:w="148"/><text x="1.2247%" y="159.50"></text></g><g><title>vcruntime140.dll`memcpy() (14 samples, 0.03%)</title><rect x="1.2676%" y="133" width="0.0306%" height="15" fill="rgb(211,81,21)" fg:x="580" fg:w="14"/><text x="1.5176%" y="143.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::init_tree (11 samples, 0.02%)</title><rect x="1.2982%" y="149" width="0.0240%" height="15" fill="rgb(208,190,38)" fg:x="594" fg:w="11"/><text x="1.5482%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decompress(miniz_oxide::inflate::core::DecompressorOxide*, ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (166 samples, 0.36%)</title><rect x="0.9616%" y="165" width="0.3628%" height="15" fill="rgb(235,213,38)" fg:x="440" fg:w="166"/><text x="1.2116%" y="175.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (176 samples, 0.38%)</title><rect x="0.9463%" y="309" width="0.3846%" height="15" fill="rgb(237,122,38)" fg:x="433" fg:w="176"/><text x="1.1963%" y="319.50"></text></g><g><title>neural_network.exe`flate2::gz::bufread::impl$6::read&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;(flate2::gz::bufread::GzDecoder&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;*, ref_mut$&lt;slice2$ (176 samples, 0.38%)</title><rect x="0.9463%" y="293" width="0.3846%" height="15" fill="rgb(244,218,35)" fg:x="433" fg:w="176"/><text x="1.1963%" y="303.50"></text></g><g><title>neural_network.exe`flate2::crc::impl$4::read(flate2::crc::CrcReader&lt;flate2::deflate::bufread::DeflateDecoder&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt; &gt;*, ref_mut$&lt;slice2$ (173 samples, 0.38%)</title><rect x="0.9529%" y="277" width="0.3781%" height="15" fill="rgb(240,68,47)" fg:x="436" fg:w="173"/><text x="1.2029%" y="287.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (173 samples, 0.38%)</title><rect x="0.9529%" y="261" width="0.3781%" height="15" fill="rgb(210,16,53)" fg:x="436" fg:w="173"/><text x="1.2029%" y="271.50"></text></g><g><title>neural_network.exe`flate2::deflate::bufread::impl$6::read&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;(flate2::deflate::bufread::DeflateDecoder&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;*, ref_mut$&lt;slice2$ (173 samples, 0.38%)</title><rect x="0.9529%" y="245" width="0.3781%" height="15" fill="rgb(235,124,12)" fg:x="436" fg:w="173"/><text x="1.2029%" y="255.50"></text></g><g><title>neural_network.exe`flate2::zio::read(flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt;*, flate2::mem::Decompress*, ref_mut$&lt;slice2$ (173 samples, 0.38%)</title><rect x="0.9529%" y="229" width="0.3781%" height="15" fill="rgb(224,169,11)" fg:x="436" fg:w="173"/><text x="1.2029%" y="239.50"></text></g><g><title>neural_network.exe`flate2::ffi::rust::impl$2::decompress(flate2::ffi::rust::Inflate*, ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (169 samples, 0.37%)</title><rect x="0.9616%" y="213" width="0.3694%" height="15" fill="rgb(250,166,2)" fg:x="440" fg:w="169"/><text x="1.2116%" y="223.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::stream::inflate(miniz_oxide::inflate::stream::InflateState*, ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (169 samples, 0.37%)</title><rect x="0.9616%" y="197" width="0.3694%" height="15" fill="rgb(242,216,29)" fg:x="440" fg:w="169"/><text x="1.2116%" y="207.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::stream::inflate_loop(miniz_oxide::inflate::stream::InflateState*, ref$&lt;slice2$&lt;u8&gt; &gt;*, ref_mut$&lt;slice2$ (169 samples, 0.37%)</title><rect x="0.9616%" y="181" width="0.3694%" height="15" fill="rgb(230,116,27)" fg:x="440" fg:w="169"/><text x="1.2116%" y="191.50"></text></g><g><title>neural_network.exe`std::io::Read::read_to_end(flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt;*, alloc::vec::Vec (206 samples, 0.45%)</title><rect x="0.9092%" y="373" width="0.4502%" height="15" fill="rgb(228,99,48)" fg:x="416" fg:w="206"/><text x="1.1592%" y="383.50"></text></g><g><title>neural_network.exe`std::io::default_read_to_end&lt;flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt; &gt;(flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option (206 samples, 0.45%)</title><rect x="0.9092%" y="357" width="0.4502%" height="15" fill="rgb(253,11,6)" fg:x="416" fg:w="206"/><text x="1.1592%" y="367.50"></text></g><g><title>neural_network.exe`std::io::Read::read_buf(flate2::gz::read::GzDecoder&lt;ref$ (189 samples, 0.41%)</title><rect x="0.9463%" y="341" width="0.4131%" height="15" fill="rgb(247,143,39)" fg:x="433" fg:w="189"/><text x="1.1963%" y="351.50"></text></g><g><title>neural_network.exe`std::io::default_read_buf(std::io::Read::read_buf::closure_env$0&lt;flate2::gz::read::GzDecoder&lt;ref$ (189 samples, 0.41%)</title><rect x="0.9463%" y="325" width="0.4131%" height="15" fill="rgb(236,97,10)" fg:x="433" fg:w="189"/><text x="1.1963%" y="335.50"></text></g><g><title>neural_network.exe`std::io::Read::read_buf::closure$0(std::io::Read::read_buf::closure_env$0&lt;flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt; &gt;, ref_mut$&lt;slice2$ (13 samples, 0.03%)</title><rect x="1.3310%" y="309" width="0.0284%" height="15" fill="rgb(233,208,19)" fg:x="609" fg:w="13"/><text x="1.5810%" y="319.50"></text></g><g><title>neural_network.exe`flate2::gz::read::impl$6::read(flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt;*, ref_mut$&lt;slice2$ (13 samples, 0.03%)</title><rect x="1.3310%" y="293" width="0.0284%" height="15" fill="rgb(216,164,2)" fg:x="609" fg:w="13"/><text x="1.5810%" y="303.50"></text></g><g><title>vcruntime140.dll`memset_repstos() (13 samples, 0.03%)</title><rect x="1.3310%" y="277" width="0.0284%" height="15" fill="rgb(220,129,5)" fg:x="609" fg:w="13"/><text x="1.5810%" y="287.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::reserve (18 samples, 0.04%)</title><rect x="1.3594%" y="341" width="0.0393%" height="15" fill="rgb(242,17,10)" fg:x="622" fg:w="18"/><text x="1.6094%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::reserve (18 samples, 0.04%)</title><rect x="1.3594%" y="325" width="0.0393%" height="15" fill="rgb(242,107,0)" fg:x="622" fg:w="18"/><text x="1.6094%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (18 samples, 0.04%)</title><rect x="1.3594%" y="309" width="0.0393%" height="15" fill="rgb(251,28,31)" fg:x="622" fg:w="18"/><text x="1.6094%" y="319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (18 samples, 0.04%)</title><rect x="1.3594%" y="293" width="0.0393%" height="15" fill="rgb(233,223,10)" fg:x="622" fg:w="18"/><text x="1.6094%" y="303.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (18 samples, 0.04%)</title><rect x="1.3594%" y="277" width="0.0393%" height="15" fill="rgb(215,21,27)" fg:x="622" fg:w="18"/><text x="1.6094%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (18 samples, 0.04%)</title><rect x="1.3594%" y="261" width="0.0393%" height="15" fill="rgb(232,23,21)" fg:x="622" fg:w="18"/><text x="1.6094%" y="271.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (18 samples, 0.04%)</title><rect x="1.3594%" y="245" width="0.0393%" height="15" fill="rgb(244,5,23)" fg:x="622" fg:w="18"/><text x="1.6094%" y="255.50"></text></g><g><title>ntdll.dll`RtlReAllocateHeap (18 samples, 0.04%)</title><rect x="1.3594%" y="229" width="0.0393%" height="15" fill="rgb(226,81,46)" fg:x="622" fg:w="18"/><text x="1.6094%" y="239.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeapInternal (18 samples, 0.04%)</title><rect x="1.3594%" y="213" width="0.0393%" height="15" fill="rgb(247,70,30)" fg:x="622" fg:w="18"/><text x="1.6094%" y="223.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeap (18 samples, 0.04%)</title><rect x="1.3594%" y="197" width="0.0393%" height="15" fill="rgb(212,68,19)" fg:x="622" fg:w="18"/><text x="1.6094%" y="207.50"></text></g><g><title>ntdll.dll`memcpy (14 samples, 0.03%)</title><rect x="1.3681%" y="181" width="0.0306%" height="15" fill="rgb(240,187,13)" fg:x="626" fg:w="14"/><text x="1.6181%" y="191.50"></text></g><g><title>vcruntime140.dll`memcpy() (11 samples, 0.02%)</title><rect x="1.3987%" y="245" width="0.0240%" height="15" fill="rgb(223,113,26)" fg:x="640" fg:w="11"/><text x="1.6487%" y="255.50"></text></g><g><title>neural_network.exe`std::io::Read::read_to_end(std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;*, alloc::vec::Vec (32 samples, 0.07%)</title><rect x="1.3594%" y="373" width="0.0699%" height="15" fill="rgb(206,192,2)" fg:x="622" fg:w="32"/><text x="1.6094%" y="383.50"></text></g><g><title>neural_network.exe`std::io::default_read_to_end&lt;std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt; &gt;(std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option (32 samples, 0.07%)</title><rect x="1.3594%" y="357" width="0.0699%" height="15" fill="rgb(241,108,4)" fg:x="622" fg:w="32"/><text x="1.6094%" y="367.50"></text></g><g><title>neural_network.exe`std::io::cursor::impl$4::read_buf(std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec (14 samples, 0.03%)</title><rect x="1.3987%" y="341" width="0.0306%" height="15" fill="rgb(247,173,49)" fg:x="640" fg:w="14"/><text x="1.6487%" y="351.50"></text></g><g><title>neural_network.exe`std::io::impls::impl$8::read_buf(ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="1.3987%" y="325" width="0.0306%" height="15" fill="rgb(224,114,35)" fg:x="640" fg:w="14"/><text x="1.6487%" y="335.50"></text></g><g><title>neural_network.exe`std::io::readbuf::BorrowedCursor::append(ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="1.3987%" y="309" width="0.0306%" height="15" fill="rgb(245,159,27)" fg:x="640" fg:w="14"/><text x="1.6487%" y="319.50"></text></g><g><title>neural_network.exe`core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;::write_slice(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;u8&gt; &gt; &gt;, ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="1.3987%" y="293" width="0.0306%" height="15" fill="rgb(245,172,44)" fg:x="640" fg:w="14"/><text x="1.6487%" y="303.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;u8&gt; &gt; &gt;, ref$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit (14 samples, 0.03%)</title><rect x="1.3987%" y="277" width="0.0306%" height="15" fill="rgb(236,23,11)" fg:x="640" fg:w="14"/><text x="1.6487%" y="287.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;*, core::mem::maybe_uninit::MaybeUninit (14 samples, 0.03%)</title><rect x="1.3987%" y="261" width="0.0306%" height="15" fill="rgb(205,117,38)" fg:x="640" fg:w="14"/><text x="1.6487%" y="271.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (241 samples, 0.53%)</title><rect x="0.9048%" y="405" width="0.5267%" height="15" fill="rgb(237,72,25)" fg:x="414" fg:w="241"/><text x="1.1548%" y="415.50"></text></g><g><title>neural_network.exe`neural_network::mnist::MnistData::new (241 samples, 0.53%)</title><rect x="0.9048%" y="389" width="0.5267%" height="15" fill="rgb(244,70,9)" fg:x="414" fg:w="241"/><text x="1.1548%" y="399.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;alloc::boxed::Box&lt;alloc::vec::Vec&lt;neural_network::mnist::MnistImage,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;,std::io::error::Error&gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;alloc::boxed::Box&lt;alloc::vec::Vec (432 samples, 0.94%)</title><rect x="0.5180%" y="437" width="0.9441%" height="15" fill="rgb(217,125,39)" fg:x="237" fg:w="432"/><text x="0.7680%" y="447.50"></text></g><g><title>neural_network.exe`neural_network::mnist::load_mnist_file(ref$&lt;str$&gt;, ref$ (432 samples, 0.94%)</title><rect x="0.5180%" y="421" width="0.9441%" height="15" fill="rgb(235,36,10)" fg:x="237" fg:w="432"/><text x="0.7680%" y="431.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zeros(tuple$ (14 samples, 0.03%)</title><rect x="1.4315%" y="405" width="0.0306%" height="15" fill="rgb(251,123,47)" fg:x="655" fg:w="14"/><text x="1.6815%" y="415.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_elem(tuple$ (14 samples, 0.03%)</title><rect x="1.4315%" y="389" width="0.0306%" height="15" fill="rgb(221,13,13)" fg:x="655" fg:w="14"/><text x="1.6815%" y="399.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (14 samples, 0.03%)</title><rect x="1.4315%" y="373" width="0.0306%" height="15" fill="rgb(238,131,9)" fg:x="655" fg:w="14"/><text x="1.6815%" y="383.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (14 samples, 0.03%)</title><rect x="1.4315%" y="357" width="0.0306%" height="15" fill="rgb(211,50,8)" fg:x="655" fg:w="14"/><text x="1.6815%" y="367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_zeroed_in (14 samples, 0.03%)</title><rect x="1.4315%" y="341" width="0.0306%" height="15" fill="rgb(245,182,24)" fg:x="655" fg:w="14"/><text x="1.6815%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (14 samples, 0.03%)</title><rect x="1.4315%" y="325" width="0.0306%" height="15" fill="rgb(242,14,37)" fg:x="655" fg:w="14"/><text x="1.6815%" y="335.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (11 samples, 0.02%)</title><rect x="1.4381%" y="309" width="0.0240%" height="15" fill="rgb(246,228,12)" fg:x="658" fg:w="11"/><text x="1.6881%" y="319.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (10 samples, 0.02%)</title><rect x="1.4402%" y="293" width="0.0219%" height="15" fill="rgb(213,55,15)" fg:x="659" fg:w="10"/><text x="1.6902%" y="303.50"></text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::new (6 samples, 0.01%)</title><rect x="1.4621%" y="437" width="0.0131%" height="15" fill="rgb(209,9,3)" fg:x="669" fg:w="6"/><text x="1.7121%" y="447.50"></text></g><g><title>neural_network.exe`ndarray_rand::impl$0::random(tuple$ (5 samples, 0.01%)</title><rect x="1.4643%" y="421" width="0.0109%" height="15" fill="rgb(230,59,30)" fg:x="670" fg:w="5"/><text x="1.7143%" y="431.50"></text></g><g><title>neural_network.exe`ndarray_rand::impl$0::random_using(tuple$ (5 samples, 0.01%)</title><rect x="1.4643%" y="405" width="0.0109%" height="15" fill="rgb(209,121,21)" fg:x="670" fg:w="5"/><text x="1.7143%" y="415.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_simple_fn(tuple$&lt;usize,usize&gt;, ndarray_rand::impl$0::random_using::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,tuple$ (5 samples, 0.01%)</title><rect x="1.4643%" y="389" width="0.0109%" height="15" fill="rgb(220,109,13)" fg:x="670" fg:w="5"/><text x="1.7143%" y="399.50"></text></g><g><title>ntdll.dll`RtlpCollectFreeBlocks (10 samples, 0.02%)</title><rect x="1.5910%" y="85" width="0.0219%" height="15" fill="rgb(232,18,1)" fg:x="728" fg:w="10"/><text x="1.8410%" y="95.50"></text></g><g><title>ntdll.dll`RtlpDecommitBlock (9 samples, 0.02%)</title><rect x="1.5932%" y="69" width="0.0197%" height="15" fill="rgb(215,41,42)" fg:x="729" fg:w="9"/><text x="1.8432%" y="79.50"></text></g><g><title>ntdll.dll`RtlpSecMemFreeVirtualMemory (9 samples, 0.02%)</title><rect x="1.5932%" y="53" width="0.0197%" height="15" fill="rgb(224,123,36)" fg:x="729" fg:w="9"/><text x="1.8432%" y="63.50"></text></g><g><title>ntdll.dll`NtFreeVirtualMemory (9 samples, 0.02%)</title><rect x="1.5932%" y="37" width="0.0197%" height="15" fill="rgb(240,125,3)" fg:x="729" fg:w="9"/><text x="1.8432%" y="47.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (57 samples, 0.12%)</title><rect x="1.4905%" y="293" width="0.1246%" height="15" fill="rgb(205,98,50)" fg:x="682" fg:w="57"/><text x="1.7405%" y="303.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (57 samples, 0.12%)</title><rect x="1.4905%" y="277" width="0.1246%" height="15" fill="rgb(205,185,37)" fg:x="682" fg:w="57"/><text x="1.7405%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (57 samples, 0.12%)</title><rect x="1.4905%" y="261" width="0.1246%" height="15" fill="rgb(238,207,15)" fg:x="682" fg:w="57"/><text x="1.7405%" y="271.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (57 samples, 0.12%)</title><rect x="1.4905%" y="245" width="0.1246%" height="15" fill="rgb(213,199,42)" fg:x="682" fg:w="57"/><text x="1.7405%" y="255.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (57 samples, 0.12%)</title><rect x="1.4905%" y="229" width="0.1246%" height="15" fill="rgb(235,201,11)" fg:x="682" fg:w="57"/><text x="1.7405%" y="239.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (56 samples, 0.12%)</title><rect x="1.4927%" y="213" width="0.1224%" height="15" fill="rgb(207,46,11)" fg:x="683" fg:w="56"/><text x="1.7427%" y="223.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (54 samples, 0.12%)</title><rect x="1.4971%" y="197" width="0.1180%" height="15" fill="rgb(241,35,35)" fg:x="685" fg:w="54"/><text x="1.7471%" y="207.50"></text></g><g><title>ntdll.dll`RtlpFreeUserBlock (11 samples, 0.02%)</title><rect x="1.5910%" y="181" width="0.0240%" height="15" fill="rgb(243,32,47)" fg:x="728" fg:w="11"/><text x="1.8410%" y="191.50"></text></g><g><title>ntdll.dll`RtlpFreeUserBlockToHeap (11 samples, 0.02%)</title><rect x="1.5910%" y="165" width="0.0240%" height="15" fill="rgb(247,202,23)" fg:x="728" fg:w="11"/><text x="1.8410%" y="175.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (11 samples, 0.02%)</title><rect x="1.5910%" y="149" width="0.0240%" height="15" fill="rgb(219,102,11)" fg:x="728" fg:w="11"/><text x="1.8410%" y="159.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (11 samples, 0.02%)</title><rect x="1.5910%" y="133" width="0.0240%" height="15" fill="rgb(243,110,44)" fg:x="728" fg:w="11"/><text x="1.8410%" y="143.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (11 samples, 0.02%)</title><rect x="1.5910%" y="117" width="0.0240%" height="15" fill="rgb(222,74,54)" fg:x="728" fg:w="11"/><text x="1.8410%" y="127.50"></text></g><g><title>ntdll.dll`RtlpDeCommitFreeBlock (11 samples, 0.02%)</title><rect x="1.5910%" y="101" width="0.0240%" height="15" fill="rgb(216,99,12)" fg:x="728" fg:w="11"/><text x="1.8410%" y="111.50"></text></g><g><title>ntdll.dll`RtlpCommitBlock (6 samples, 0.01%)</title><rect x="1.8380%" y="181" width="0.0131%" height="15" fill="rgb(226,22,26)" fg:x="841" fg:w="6"/><text x="2.0880%" y="191.50"></text></g><g><title>ntdll.dll`ZwAllocateVirtualMemory (6 samples, 0.01%)</title><rect x="1.8380%" y="165" width="0.0131%" height="15" fill="rgb(217,163,10)" fg:x="841" fg:w="6"/><text x="2.0880%" y="175.50"></text></g><g><title>ntdll.dll`RtlpCollectFreeBlocks (247 samples, 0.54%)</title><rect x="1.8555%" y="165" width="0.5398%" height="15" fill="rgb(213,25,53)" fg:x="849" fg:w="247"/><text x="2.1055%" y="175.50"></text></g><g><title>ntdll.dll`RtlpDecommitBlock (244 samples, 0.53%)</title><rect x="1.8621%" y="149" width="0.5333%" height="15" fill="rgb(252,105,26)" fg:x="852" fg:w="244"/><text x="2.1121%" y="159.50"></text></g><g><title>ntdll.dll`RtlpSecMemFreeVirtualMemory (244 samples, 0.53%)</title><rect x="1.8621%" y="133" width="0.5333%" height="15" fill="rgb(220,39,43)" fg:x="852" fg:w="244"/><text x="2.1121%" y="143.50"></text></g><g><title>ntdll.dll`NtFreeVirtualMemory (244 samples, 0.53%)</title><rect x="1.8621%" y="117" width="0.5333%" height="15" fill="rgb(229,68,48)" fg:x="852" fg:w="244"/><text x="2.1121%" y="127.50"></text></g><g><title>ntdll.dll`RtlpInsertFreeBlock (20 samples, 0.04%)</title><rect x="2.3997%" y="165" width="0.0437%" height="15" fill="rgb(252,8,32)" fg:x="1098" fg:w="20"/><text x="2.6497%" y="175.50"></text></g><g><title>ntdll.dll`RtlpFindEntry (19 samples, 0.04%)</title><rect x="2.4019%" y="149" width="0.0415%" height="15" fill="rgb(223,20,43)" fg:x="1099" fg:w="19"/><text x="2.6519%" y="159.50"></text></g><g><title>ntdll.dll`RtlpHeapFindListLookupEntry (19 samples, 0.04%)</title><rect x="2.4019%" y="133" width="0.0415%" height="15" fill="rgb(229,81,49)" fg:x="1099" fg:w="19"/><text x="2.6519%" y="143.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (388 samples, 0.85%)</title><rect x="1.8227%" y="229" width="0.8480%" height="15" fill="rgb(236,28,36)" fg:x="834" fg:w="388"/><text x="2.0727%" y="239.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (387 samples, 0.85%)</title><rect x="1.8249%" y="213" width="0.8458%" height="15" fill="rgb(249,185,26)" fg:x="835" fg:w="387"/><text x="2.0749%" y="223.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (387 samples, 0.85%)</title><rect x="1.8249%" y="197" width="0.8458%" height="15" fill="rgb(249,174,33)" fg:x="835" fg:w="387"/><text x="2.0749%" y="207.50"></text></g><g><title>ntdll.dll`RtlpDeCommitFreeBlock (375 samples, 0.82%)</title><rect x="1.8511%" y="181" width="0.8196%" height="15" fill="rgb(233,201,37)" fg:x="847" fg:w="375"/><text x="2.1011%" y="191.50"></text></g><g><title>ntdll.dll`RtlpSecMemFreeVirtualMemory (103 samples, 0.23%)</title><rect x="2.4456%" y="165" width="0.2251%" height="15" fill="rgb(221,78,26)" fg:x="1119" fg:w="103"/><text x="2.6956%" y="175.50"></text></g><g><title>ntdll.dll`NtFreeVirtualMemory (103 samples, 0.23%)</title><rect x="2.4456%" y="149" width="0.2251%" height="15" fill="rgb(250,127,30)" fg:x="1119" fg:w="103"/><text x="2.6956%" y="159.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (553 samples, 1.21%)</title><rect x="1.4796%" y="421" width="1.2086%" height="15" fill="rgb(230,49,44)" fg:x="677" fg:w="553"/><text x="1.7296%" y="431.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (551 samples, 1.20%)</title><rect x="1.4840%" y="405" width="1.2042%" height="15" fill="rgb(229,67,23)" fg:x="679" fg:w="551"/><text x="1.7340%" y="415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$24::drop(alloc::vec::Vec (551 samples, 1.20%)</title><rect x="1.4840%" y="389" width="1.2042%" height="15" fill="rgb(249,83,47)" fg:x="679" fg:w="551"/><text x="1.7340%" y="399.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$ (551 samples, 1.20%)</title><rect x="1.4840%" y="373" width="1.2042%" height="15" fill="rgb(215,43,3)" fg:x="679" fg:w="551"/><text x="1.7340%" y="383.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (551 samples, 1.20%)</title><rect x="1.4840%" y="357" width="1.2042%" height="15" fill="rgb(238,154,13)" fg:x="679" fg:w="551"/><text x="1.7340%" y="367.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (551 samples, 1.20%)</title><rect x="1.4840%" y="341" width="1.2042%" height="15" fill="rgb(219,56,2)" fg:x="679" fg:w="551"/><text x="1.7340%" y="351.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (551 samples, 1.20%)</title><rect x="1.4840%" y="325" width="1.2042%" height="15" fill="rgb(233,0,4)" fg:x="679" fg:w="551"/><text x="1.7340%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (551 samples, 1.20%)</title><rect x="1.4840%" y="309" width="1.2042%" height="15" fill="rgb(235,30,7)" fg:x="679" fg:w="551"/><text x="1.7340%" y="319.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (491 samples, 1.07%)</title><rect x="1.6151%" y="293" width="1.0731%" height="15" fill="rgb(250,79,13)" fg:x="739" fg:w="491"/><text x="1.8651%" y="303.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (490 samples, 1.07%)</title><rect x="1.6173%" y="277" width="1.0709%" height="15" fill="rgb(211,146,34)" fg:x="740" fg:w="490"/><text x="1.8673%" y="287.50"></text></g><g><title>ntdll.dll`RtlpFreeUserBlock (396 samples, 0.87%)</title><rect x="1.8227%" y="261" width="0.8655%" height="15" fill="rgb(228,22,38)" fg:x="834" fg:w="396"/><text x="2.0727%" y="271.50"></text></g><g><title>ntdll.dll`RtlpFreeUserBlockToHeap (396 samples, 0.87%)</title><rect x="1.8227%" y="245" width="0.8655%" height="15" fill="rgb(235,168,5)" fg:x="834" fg:w="396"/><text x="2.0727%" y="255.50"></text></g><g><title>ntdll.dll`ZwProtectVirtualMemory (8 samples, 0.02%)</title><rect x="2.6707%" y="229" width="0.0175%" height="15" fill="rgb(221,155,16)" fg:x="1222" fg:w="8"/><text x="2.9207%" y="239.50"></text></g><g><title>neural_network.exe`core::iter::adapters::enumerate::impl$1::next(core::iter::adapters::enumerate::Enumerate&lt;ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (5 samples, 0.01%)</title><rect x="2.6904%" y="405" width="0.0109%" height="15" fill="rgb(215,215,53)" fg:x="1231" fg:w="5"/><text x="2.9404%" y="415.50"></text></g><g><title>neural_network.exe`ndarray::iterators::impl$13::next(ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (156 samples, 0.34%)</title><rect x="2.9067%" y="309" width="0.3409%" height="15" fill="rgb(223,4,10)" fg:x="1330" fg:w="156"/><text x="3.1567%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (155 samples, 0.34%)</title><rect x="2.9089%" y="293" width="0.3388%" height="15" fill="rgb(234,103,6)" fg:x="1331" fg:w="155"/><text x="3.1589%" y="303.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;f64&gt;::post_inc_start (116 samples, 0.25%)</title><rect x="2.9941%" y="277" width="0.2535%" height="15" fill="rgb(227,97,0)" fg:x="1370" fg:w="116"/><text x="3.2441%" y="287.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f64&gt;::add(core::ptr::non_null::NonNull (81 samples, 0.18%)</title><rect x="3.0706%" y="261" width="0.1770%" height="15" fill="rgb(234,150,53)" fg:x="1405" fg:w="81"/><text x="3.3206%" y="271.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (81 samples, 0.18%)</title><rect x="3.0706%" y="245" width="0.1770%" height="15" fill="rgb(228,201,54)" fg:x="1405" fg:w="81"/><text x="3.3206%" y="255.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (337 samples, 0.74%)</title><rect x="2.8936%" y="341" width="0.7365%" height="15" fill="rgb(222,22,37)" fg:x="1324" fg:w="337"/><text x="3.1436%" y="351.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$3::next(core::iter::adapters::zip::Zip&lt;ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (337 samples, 0.74%)</title><rect x="2.8936%" y="325" width="0.7365%" height="15" fill="rgb(237,53,32)" fg:x="1324" fg:w="337"/><text x="3.1436%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::iterators::impl$18::next(ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (175 samples, 0.38%)</title><rect x="3.2477%" y="309" width="0.3825%" height="15" fill="rgb(233,25,53)" fg:x="1486" fg:w="175"/><text x="3.4977%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::next(core::slice::iter::IterMut (92 samples, 0.20%)</title><rect x="3.4291%" y="293" width="0.2011%" height="15" fill="rgb(210,40,34)" fg:x="1569" fg:w="92"/><text x="3.6791%" y="303.50"></text></g><g><title>neural_network.exe`core::slice::iter::IterMut&lt;f64&gt;::post_inc_start (43 samples, 0.09%)</title><rect x="3.5361%" y="277" width="0.0940%" height="15" fill="rgb(241,220,44)" fg:x="1618" fg:w="43"/><text x="3.7861%" y="287.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f64&gt;::add(core::ptr::non_null::NonNull (35 samples, 0.08%)</title><rect x="3.5536%" y="261" width="0.0765%" height="15" fill="rgb(235,28,35)" fg:x="1626" fg:w="35"/><text x="3.8036%" y="271.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (35 samples, 0.08%)</title><rect x="3.5536%" y="245" width="0.0765%" height="15" fill="rgb(210,56,17)" fg:x="1626" fg:w="35"/><text x="3.8036%" y="255.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (20 samples, 0.04%)</title><rect x="3.6454%" y="309" width="0.0437%" height="15" fill="rgb(224,130,29)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (20 samples, 0.04%)</title><rect x="3.6454%" y="293" width="0.0437%" height="15" fill="rgb(235,212,8)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (20 samples, 0.04%)</title><rect x="3.6454%" y="277" width="0.0437%" height="15" fill="rgb(223,33,50)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (20 samples, 0.04%)</title><rect x="3.6454%" y="261" width="0.0437%" height="15" fill="rgb(219,149,13)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="271.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate (20 samples, 0.04%)</title><rect x="3.6454%" y="245" width="0.0437%" height="15" fill="rgb(250,156,29)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="255.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (20 samples, 0.04%)</title><rect x="3.6454%" y="229" width="0.0437%" height="15" fill="rgb(216,193,19)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="239.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc (20 samples, 0.04%)</title><rect x="3.6454%" y="213" width="0.0437%" height="15" fill="rgb(216,135,14)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="223.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (20 samples, 0.04%)</title><rect x="3.6454%" y="197" width="0.0437%" height="15" fill="rgb(241,47,5)" fg:x="1668" fg:w="20"/><text x="3.8954%" y="207.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (19 samples, 0.04%)</title><rect x="3.6476%" y="181" width="0.0415%" height="15" fill="rgb(233,42,35)" fg:x="1669" fg:w="19"/><text x="3.8976%" y="191.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeap (24 samples, 0.05%)</title><rect x="3.7307%" y="197" width="0.0525%" height="15" fill="rgb(231,13,6)" fg:x="1707" fg:w="24"/><text x="3.9807%" y="207.50"></text></g><g><title>ntdll.dll`RtlpFindEntry (5 samples, 0.01%)</title><rect x="3.7722%" y="181" width="0.0109%" height="15" fill="rgb(207,181,40)" fg:x="1726" fg:w="5"/><text x="4.0222%" y="191.50"></text></g><g><title>ntdll.dll`RtlpHeapFindListLookupEntry (5 samples, 0.01%)</title><rect x="3.7722%" y="165" width="0.0109%" height="15" fill="rgb(254,173,49)" fg:x="1726" fg:w="5"/><text x="4.0222%" y="175.50"></text></g><g><title>neural_network.exe`matrixmultiply::aligned_alloc::Alloc&lt;f64&gt;::new (51 samples, 0.11%)</title><rect x="3.7044%" y="277" width="0.1115%" height="15" fill="rgb(221,1,38)" fg:x="1695" fg:w="51"/><text x="3.9544%" y="287.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (50 samples, 0.11%)</title><rect x="3.7066%" y="261" width="0.1093%" height="15" fill="rgb(206,124,46)" fg:x="1696" fg:w="50"/><text x="3.9566%" y="271.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::impl$0::alloc (50 samples, 0.11%)</title><rect x="3.7066%" y="245" width="0.1093%" height="15" fill="rgb(249,21,11)" fg:x="1696" fg:w="50"/><text x="3.9566%" y="255.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::allocate (50 samples, 0.11%)</title><rect x="3.7066%" y="229" width="0.1093%" height="15" fill="rgb(222,201,40)" fg:x="1696" fg:w="50"/><text x="3.9566%" y="239.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (46 samples, 0.10%)</title><rect x="3.7154%" y="213" width="0.1005%" height="15" fill="rgb(235,61,29)" fg:x="1700" fg:w="46"/><text x="3.9654%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (15 samples, 0.03%)</title><rect x="3.7831%" y="197" width="0.0328%" height="15" fill="rgb(219,207,3)" fg:x="1731" fg:w="15"/><text x="4.0331%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::make_packing_buffer (53 samples, 0.12%)</title><rect x="3.7044%" y="293" width="0.1158%" height="15" fill="rgb(222,56,46)" fg:x="1695" fg:w="53"/><text x="3.9544%" y="303.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U4,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (92 samples, 0.20%)</title><rect x="3.8203%" y="293" width="0.2011%" height="15" fill="rgb(239,76,54)" fg:x="1748" fg:w="92"/><text x="4.0703%" y="303.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (90 samples, 0.20%)</title><rect x="3.8246%" y="277" width="0.1967%" height="15" fill="rgb(231,124,27)" fg:x="1750" fg:w="90"/><text x="4.0746%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (5 samples, 0.01%)</title><rect x="4.0104%" y="261" width="0.0109%" height="15" fill="rgb(249,195,6)" fg:x="1835" fg:w="5"/><text x="4.2604%" y="271.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (5 samples, 0.01%)</title><rect x="4.0104%" y="245" width="0.0109%" height="15" fill="rgb(237,174,47)" fg:x="1835" fg:w="5"/><text x="4.2604%" y="255.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (1,182 samples, 2.58%)</title><rect x="4.3317%" y="213" width="2.5833%" height="15" fill="rgb(206,201,31)" fg:x="1982" fg:w="1182"/><text x="4.5817%" y="223.50">ne..</text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (104 samples, 0.23%)</title><rect x="6.9805%" y="181" width="0.2273%" height="15" fill="rgb(231,57,52)" fg:x="3194" fg:w="104"/><text x="7.2305%" y="191.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (135 samples, 0.30%)</title><rect x="6.9149%" y="213" width="0.2950%" height="15" fill="rgb(248,177,22)" fg:x="3164" fg:w="135"/><text x="7.1649%" y="223.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (135 samples, 0.30%)</title><rect x="6.9149%" y="197" width="0.2950%" height="15" fill="rgb(215,211,37)" fg:x="3164" fg:w="135"/><text x="7.1649%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (1,471 samples, 3.21%)</title><rect x="4.0213%" y="277" width="3.2149%" height="15" fill="rgb(241,128,51)" fg:x="1840" fg:w="1471"/><text x="4.2713%" y="287.50">neu..</text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (1,467 samples, 3.21%)</title><rect x="4.0301%" y="261" width="3.2061%" height="15" fill="rgb(227,165,31)" fg:x="1844" fg:w="1467"/><text x="4.2801%" y="271.50">neu..</text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (1,465 samples, 3.20%)</title><rect x="4.0344%" y="245" width="3.2018%" height="15" fill="rgb(228,167,24)" fg:x="1846" fg:w="1465"/><text x="4.2844%" y="255.50">neu..</text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (1,460 samples, 3.19%)</title><rect x="4.0454%" y="229" width="3.1908%" height="15" fill="rgb(228,143,12)" fg:x="1851" fg:w="1460"/><text x="4.2954%" y="239.50">neu..</text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset (12 samples, 0.03%)</title><rect x="7.2100%" y="213" width="0.0262%" height="15" fill="rgb(249,149,8)" fg:x="3299" fg:w="12"/><text x="7.4600%" y="223.50"></text></g><g><title>neural_network.exe`rawpointer::impl$0::offset (11 samples, 0.02%)</title><rect x="7.2122%" y="197" width="0.0240%" height="15" fill="rgb(243,35,44)" fg:x="3300" fg:w="11"/><text x="7.4622%" y="207.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::offset (11 samples, 0.02%)</title><rect x="7.2122%" y="181" width="0.0240%" height="15" fill="rgb(246,89,9)" fg:x="3300" fg:w="11"/><text x="7.4622%" y="191.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$0(matrixmultiply::gemm::gemm_packed::closure_env$0 (19 samples, 0.04%)</title><rect x="7.2471%" y="245" width="0.0415%" height="15" fill="rgb(233,213,13)" fg:x="3316" fg:w="19"/><text x="7.4971%" y="255.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::with(matrixmultiply::gemm::gemm_packed::closure$0::closure_env$0 (19 samples, 0.04%)</title><rect x="7.2471%" y="229" width="0.0415%" height="15" fill="rgb(233,141,41)" fg:x="3316" fg:w="19"/><text x="7.4971%" y="239.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::try_with(matrixmultiply::gemm::gemm_packed::closure$0::closure_env$0 (19 samples, 0.04%)</title><rect x="7.2471%" y="213" width="0.0415%" height="15" fill="rgb(239,167,4)" fg:x="3316" fg:w="19"/><text x="7.4971%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::MASK_BUF::__getit(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;core::cell::UnsafeCell (19 samples, 0.04%)</title><rect x="7.2471%" y="197" width="0.0415%" height="15" fill="rgb(209,217,16)" fg:x="3316" fg:w="19"/><text x="7.4971%" y="207.50"></text></g><g><title>neural_network.exe`std::sys::common::thread_local::fast_local::Key&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::get (19 samples, 0.04%)</title><rect x="7.2471%" y="181" width="0.0415%" height="15" fill="rgb(219,88,35)" fg:x="3316" fg:w="19"/><text x="7.4971%" y="191.50"></text></g><g><title>neural_network.exe`std::sys::common::thread_local::lazy::LazyKeyInner&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::get (11 samples, 0.02%)</title><rect x="7.2646%" y="165" width="0.0240%" height="15" fill="rgb(220,193,23)" fg:x="3324" fg:w="11"/><text x="7.5146%" y="175.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt; &gt;::as_ref (11 samples, 0.02%)</title><rect x="7.2646%" y="149" width="0.0240%" height="15" fill="rgb(230,90,52)" fg:x="3324" fg:w="11"/><text x="7.5146%" y="159.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::impl$2::kernel (5 samples, 0.01%)</title><rect x="7.3236%" y="197" width="0.0109%" height="15" fill="rgb(252,106,19)" fg:x="3351" fg:w="5"/><text x="7.5736%" y="207.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (5 samples, 0.01%)</title><rect x="7.3499%" y="149" width="0.0109%" height="15" fill="rgb(206,74,20)" fg:x="3363" fg:w="5"/><text x="7.5999%" y="159.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (11 samples, 0.02%)</title><rect x="7.3499%" y="181" width="0.0240%" height="15" fill="rgb(230,138,44)" fg:x="3363" fg:w="11"/><text x="7.5999%" y="191.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (11 samples, 0.02%)</title><rect x="7.3499%" y="165" width="0.0240%" height="15" fill="rgb(235,182,43)" fg:x="3363" fg:w="11"/><text x="7.5999%" y="175.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$37::forward_unchecked (6 samples, 0.01%)</title><rect x="7.3608%" y="149" width="0.0131%" height="15" fill="rgb(242,16,51)" fg:x="3368" fg:w="6"/><text x="7.6108%" y="159.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (6 samples, 0.01%)</title><rect x="7.3608%" y="133" width="0.0131%" height="15" fill="rgb(248,9,4)" fg:x="3368" fg:w="6"/><text x="7.6108%" y="143.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_blend_pd (7 samples, 0.02%)</title><rect x="7.4045%" y="149" width="0.0153%" height="15" fill="rgb(210,31,22)" fg:x="3388" fg:w="7"/><text x="7.6545%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_pd (221 samples, 0.48%)</title><rect x="7.4220%" y="149" width="0.4830%" height="15" fill="rgb(239,54,39)" fg:x="3396" fg:w="221"/><text x="7.6720%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_pd (89 samples, 0.19%)</title><rect x="7.9093%" y="149" width="0.1945%" height="15" fill="rgb(230,99,41)" fg:x="3619" fg:w="89"/><text x="8.1593%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_shuffle_pd (36 samples, 0.08%)</title><rect x="8.1039%" y="149" width="0.0787%" height="15" fill="rgb(253,106,12)" fg:x="3708" fg:w="36"/><text x="8.3539%" y="159.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (18 samples, 0.04%)</title><rect x="8.1891%" y="149" width="0.0393%" height="15" fill="rgb(213,46,41)" fg:x="3747" fg:w="18"/><text x="8.4391%" y="159.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (18 samples, 0.04%)</title><rect x="8.1891%" y="133" width="0.0393%" height="15" fill="rgb(215,133,35)" fg:x="3747" fg:w="18"/><text x="8.4391%" y="143.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (17 samples, 0.04%)</title><rect x="8.1913%" y="117" width="0.0372%" height="15" fill="rgb(213,28,5)" fg:x="3748" fg:w="17"/><text x="8.4413%" y="127.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (868 samples, 1.90%)</title><rect x="7.3739%" y="181" width="1.8970%" height="15" fill="rgb(215,77,49)" fg:x="3374" fg:w="868"/><text x="7.6239%" y="191.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_x86_avx (855 samples, 1.87%)</title><rect x="7.4023%" y="165" width="1.8686%" height="15" fill="rgb(248,100,22)" fg:x="3387" fg:w="855"/><text x="7.6523%" y="175.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$3::multiply_add (477 samples, 1.04%)</title><rect x="8.2284%" y="149" width="1.0425%" height="15" fill="rgb(208,67,9)" fg:x="3765" fg:w="477"/><text x="8.4784%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_pd (477 samples, 1.04%)</title><rect x="8.2284%" y="133" width="1.0425%" height="15" fill="rgb(219,133,21)" fg:x="3765" fg:w="477"/><text x="8.4784%" y="143.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (911 samples, 1.99%)</title><rect x="7.2887%" y="245" width="1.9910%" height="15" fill="rgb(246,46,29)" fg:x="3335" fg:w="911"/><text x="7.5387%" y="255.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (905 samples, 1.98%)</title><rect x="7.3018%" y="229" width="1.9779%" height="15" fill="rgb(246,185,52)" fg:x="3341" fg:w="905"/><text x="7.5518%" y="239.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::masked_kernel&lt;f64,matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;(unsigned long long, double, double*, double*, double, double*, long long, long long, unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (901 samples, 1.97%)</title><rect x="7.3105%" y="213" width="1.9691%" height="15" fill="rgb(252,136,11)" fg:x="3345" fg:w="901"/><text x="7.5605%" y="223.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::c_to_masked_ab_beta_c(double, double*, long long, long long, unsigned long long, unsigned long long, ref$&lt;slice2$ (890 samples, 1.95%)</title><rect x="7.3346%" y="197" width="1.9451%" height="15" fill="rgb(219,138,53)" fg:x="3356" fg:w="890"/><text x="7.5846%" y="207.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (2,409 samples, 5.26%)</title><rect x="4.0213%" y="293" width="5.2649%" height="15" fill="rgb(211,51,23)" fg:x="1840" fg:w="2409"/><text x="4.2713%" y="303.50">neural..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (938 samples, 2.05%)</title><rect x="7.2362%" y="277" width="2.0500%" height="15" fill="rgb(247,221,28)" fg:x="3311" fg:w="938"/><text x="7.4862%" y="287.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f64&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (938 samples, 2.05%)</title><rect x="7.2362%" y="261" width="2.0500%" height="15" fill="rgb(251,222,45)" fg:x="3311" fg:w="938"/><text x="7.4862%" y="271.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; (2,564 samples, 5.60%)</title><rect x="3.6935%" y="309" width="5.6036%" height="15" fill="rgb(217,162,53)" fg:x="1690" fg:w="2564"/><text x="3.9435%" y="319.50">neural_..</text></g><g><title>ntdll.dll`RtlpFindEntry (11 samples, 0.02%)</title><rect x="9.3627%" y="229" width="0.0240%" height="15" fill="rgb(229,93,14)" fg:x="4284" fg:w="11"/><text x="9.6127%" y="239.50"></text></g><g><title>ntdll.dll`RtlpHeapFindListLookupEntry (11 samples, 0.02%)</title><rect x="9.3627%" y="213" width="0.0240%" height="15" fill="rgb(209,67,49)" fg:x="4284" fg:w="11"/><text x="9.6127%" y="223.50"></text></g><g><title>ntdll.dll`RtlpDeCommitFreeBlock (18 samples, 0.04%)</title><rect x="9.3496%" y="261" width="0.0393%" height="15" fill="rgb(213,87,29)" fg:x="4278" fg:w="18"/><text x="9.5996%" y="271.50"></text></g><g><title>ntdll.dll`RtlpInsertFreeBlock (17 samples, 0.04%)</title><rect x="9.3518%" y="245" width="0.0372%" height="15" fill="rgb(205,151,52)" fg:x="4279" fg:w="17"/><text x="9.6018%" y="255.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (28 samples, 0.06%)</title><rect x="9.3321%" y="277" width="0.0612%" height="15" fill="rgb(253,215,39)" fg:x="4270" fg:w="28"/><text x="9.5821%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::dot(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (2,637 samples, 5.76%)</title><rect x="3.6345%" y="341" width="5.7632%" height="15" fill="rgb(221,220,41)" fg:x="1663" fg:w="2637"/><text x="3.8845%" y="351.50">neural_..</text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (2,637 samples, 5.76%)</title><rect x="3.6345%" y="325" width="5.7632%" height="15" fill="rgb(218,133,21)" fg:x="1663" fg:w="2637"/><text x="3.8845%" y="335.50">neural_..</text></g><g><title>ntdll.dll`RtlFreeHeap (44 samples, 0.10%)</title><rect x="9.3015%" y="309" width="0.0962%" height="15" fill="rgb(221,193,43)" fg:x="4256" fg:w="44"/><text x="9.5515%" y="319.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (41 samples, 0.09%)</title><rect x="9.3081%" y="293" width="0.0896%" height="15" fill="rgb(240,128,52)" fg:x="4259" fg:w="41"/><text x="9.5581%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$5::add&lt;f64,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (16 samples, 0.03%)</title><rect x="9.4042%" y="341" width="0.0350%" height="15" fill="rgb(253,114,12)" fg:x="4303" fg:w="16"/><text x="9.6542%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (11 samples, 0.02%)</title><rect x="9.4152%" y="325" width="0.0240%" height="15" fill="rgb(215,223,47)" fg:x="4308" fg:w="11"/><text x="9.6652%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::clone_iopf::closure$0(ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="9.4261%" y="309" width="0.0131%" height="15" fill="rgb(248,225,23)" fg:x="4313" fg:w="6"/><text x="9.6761%" y="319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (24 samples, 0.05%)</title><rect x="9.4458%" y="261" width="0.0525%" height="15" fill="rgb(250,108,0)" fg:x="4322" fg:w="24"/><text x="9.6958%" y="271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (24 samples, 0.05%)</title><rect x="9.4458%" y="245" width="0.0525%" height="15" fill="rgb(228,208,7)" fg:x="4322" fg:w="24"/><text x="9.6958%" y="255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (24 samples, 0.05%)</title><rect x="9.4458%" y="229" width="0.0525%" height="15" fill="rgb(244,45,10)" fg:x="4322" fg:w="24"/><text x="9.6958%" y="239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (24 samples, 0.05%)</title><rect x="9.4458%" y="213" width="0.0525%" height="15" fill="rgb(207,125,25)" fg:x="4322" fg:w="24"/><text x="9.6958%" y="223.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (18 samples, 0.04%)</title><rect x="9.4589%" y="197" width="0.0393%" height="15" fill="rgb(210,195,18)" fg:x="4328" fg:w="18"/><text x="9.7089%" y="207.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (13 samples, 0.03%)</title><rect x="9.4698%" y="181" width="0.0284%" height="15" fill="rgb(249,80,12)" fg:x="4333" fg:w="13"/><text x="9.7198%" y="191.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(ref$&lt;f64&gt;)&gt;(double (*) (29 samples, 0.06%)</title><rect x="9.4414%" y="309" width="0.0634%" height="15" fill="rgb(221,65,9)" fg:x="4320" fg:w="29"/><text x="9.6914%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, double (*) (27 samples, 0.06%)</title><rect x="9.4458%" y="293" width="0.0590%" height="15" fill="rgb(235,49,36)" fg:x="4322" fg:w="27"/><text x="9.6958%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, double (*) (27 samples, 0.06%)</title><rect x="9.4458%" y="277" width="0.0590%" height="15" fill="rgb(225,32,20)" fg:x="4322" fg:w="27"/><text x="9.6958%" y="287.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (22 samples, 0.05%)</title><rect x="9.5135%" y="261" width="0.0481%" height="15" fill="rgb(215,141,46)" fg:x="4353" fg:w="22"/><text x="9.7635%" y="271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (22 samples, 0.05%)</title><rect x="9.5135%" y="245" width="0.0481%" height="15" fill="rgb(250,160,47)" fg:x="4353" fg:w="22"/><text x="9.7635%" y="255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (22 samples, 0.05%)</title><rect x="9.5135%" y="229" width="0.0481%" height="15" fill="rgb(216,222,40)" fg:x="4353" fg:w="22"/><text x="9.7635%" y="239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (22 samples, 0.05%)</title><rect x="9.5135%" y="213" width="0.0481%" height="15" fill="rgb(234,217,39)" fg:x="4353" fg:w="22"/><text x="9.7635%" y="223.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (19 samples, 0.04%)</title><rect x="9.5201%" y="197" width="0.0415%" height="15" fill="rgb(207,178,40)" fg:x="4356" fg:w="19"/><text x="9.7701%" y="207.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (17 samples, 0.04%)</title><rect x="9.5244%" y="181" width="0.0372%" height="15" fill="rgb(221,136,13)" fg:x="4358" fg:w="17"/><text x="9.7744%" y="191.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$1::neg(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (102 samples, 0.22%)</title><rect x="9.4414%" y="325" width="0.2229%" height="15" fill="rgb(249,199,10)" fg:x="4320" fg:w="102"/><text x="9.6914%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(f64)&gt; &gt;(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (73 samples, 0.16%)</title><rect x="9.5048%" y="309" width="0.1595%" height="15" fill="rgb(249,222,13)" fg:x="4349" fg:w="73"/><text x="9.7548%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (72 samples, 0.16%)</title><rect x="9.5069%" y="293" width="0.1574%" height="15" fill="rgb(244,185,38)" fg:x="4350" fg:w="72"/><text x="9.7569%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (69 samples, 0.15%)</title><rect x="9.5135%" y="277" width="0.1508%" height="15" fill="rgb(236,202,9)" fg:x="4353" fg:w="69"/><text x="9.7635%" y="287.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (47 samples, 0.10%)</title><rect x="9.5616%" y="261" width="0.1027%" height="15" fill="rgb(250,229,37)" fg:x="4375" fg:w="47"/><text x="9.8116%" y="271.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped::closure$0(ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(f64)&gt;,f64&gt;*, tuple$ (46 samples, 0.10%)</title><rect x="9.5638%" y="245" width="0.1005%" height="15" fill="rgb(206,174,23)" fg:x="4376" fg:w="46"/><text x="9.8138%" y="255.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::mapv::closure$0(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (43 samples, 0.09%)</title><rect x="9.5703%" y="229" width="0.0940%" height="15" fill="rgb(211,33,43)" fg:x="4379" fg:w="43"/><text x="9.8203%" y="239.50"></text></g><g><title>neural_network.exe`core::ops::function::FnMut::call_mut(double (**) (43 samples, 0.09%)</title><rect x="9.5703%" y="213" width="0.0940%" height="15" fill="rgb(245,58,50)" fg:x="4379" fg:w="43"/><text x="9.8203%" y="223.50"></text></g><g><title>neural_network.exe`std::f64::impl$0::exp (43 samples, 0.09%)</title><rect x="9.5703%" y="197" width="0.0940%" height="15" fill="rgb(244,68,36)" fg:x="4379" fg:w="43"/><text x="9.8203%" y="207.50"></text></g><g><title>ucrtbase.dll`exp (39 samples, 0.09%)</title><rect x="9.5791%" y="181" width="0.0852%" height="15" fill="rgb(232,229,15)" fg:x="4383" fg:w="39"/><text x="9.8291%" y="191.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;f64&gt;, ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="9.6687%" y="293" width="0.0131%" height="15" fill="rgb(254,30,23)" fg:x="4424" fg:w="6"/><text x="9.9187%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (8 samples, 0.02%)</title><rect x="9.6665%" y="309" width="0.0175%" height="15" fill="rgb(235,160,14)" fg:x="4423" fg:w="8"/><text x="9.9165%" y="319.50"></text></g><g><title>neural_network.exe`neural_network::sigmoid(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (115 samples, 0.25%)</title><rect x="9.4392%" y="341" width="0.2513%" height="15" fill="rgb(212,155,44)" fg:x="4319" fg:w="115"/><text x="9.6892%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$326::div(double, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (12 samples, 0.03%)</title><rect x="9.6643%" y="325" width="0.0262%" height="15" fill="rgb(226,2,50)" fg:x="4422" fg:w="12"/><text x="9.9143%" y="335.50"></text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::evaluate(alloc::vec::Vec (3,257 samples, 7.12%)</title><rect x="2.6882%" y="421" width="7.1182%" height="15" fill="rgb(234,177,6)" fg:x="1230" fg:w="3257"/><text x="2.9382%" y="431.50">neural_net..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::column (3,251 samples, 7.11%)</title><rect x="2.7013%" y="405" width="7.1051%" height="15" fill="rgb(217,24,9)" fg:x="1236" fg:w="3251"/><text x="2.9513%" y="415.50">neural_net..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::index_axis (3,250 samples, 7.10%)</title><rect x="2.7035%" y="389" width="7.1029%" height="15" fill="rgb(220,13,46)" fg:x="1237" fg:w="3250"/><text x="2.9535%" y="399.50">neural_net..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view (3,250 samples, 7.10%)</title><rect x="2.7035%" y="373" width="7.1029%" height="15" fill="rgb(239,221,27)" fg:x="1237" fg:w="3250"/><text x="2.9535%" y="383.50">neural_net..</text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::feed_forward(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (3,250 samples, 7.10%)</title><rect x="2.7035%" y="357" width="7.1029%" height="15" fill="rgb(222,198,25)" fg:x="1237" fg:w="3250"/><text x="2.9535%" y="367.50">neural_net..</text></g><g><title>ntdll.dll`RtlFreeHeap (52 samples, 0.11%)</title><rect x="9.6927%" y="341" width="0.1136%" height="15" fill="rgb(211,99,13)" fg:x="4435" fg:w="52"/><text x="9.9427%" y="351.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (44 samples, 0.10%)</title><rect x="9.7102%" y="325" width="0.0962%" height="15" fill="rgb(232,111,31)" fg:x="4443" fg:w="44"/><text x="9.9602%" y="335.50"></text></g><g><title>ntdll.dll`RtlAllocateHeap (6 samples, 0.01%)</title><rect x="9.8326%" y="229" width="0.0131%" height="15" fill="rgb(245,82,37)" fg:x="4499" fg:w="6"/><text x="10.0826%" y="239.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeap (37 samples, 0.08%)</title><rect x="9.8544%" y="213" width="0.0809%" height="15" fill="rgb(227,149,46)" fg:x="4509" fg:w="37"/><text x="10.1044%" y="223.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (72 samples, 0.16%)</title><rect x="9.8282%" y="293" width="0.1574%" height="15" fill="rgb(218,36,50)" fg:x="4497" fg:w="72"/><text x="10.0782%" y="303.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (72 samples, 0.16%)</title><rect x="9.8282%" y="277" width="0.1574%" height="15" fill="rgb(226,80,48)" fg:x="4497" fg:w="72"/><text x="10.0782%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (72 samples, 0.16%)</title><rect x="9.8282%" y="261" width="0.1574%" height="15" fill="rgb(238,224,15)" fg:x="4497" fg:w="72"/><text x="10.0782%" y="271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (72 samples, 0.16%)</title><rect x="9.8282%" y="245" width="0.1574%" height="15" fill="rgb(241,136,10)" fg:x="4497" fg:w="72"/><text x="10.0782%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (64 samples, 0.14%)</title><rect x="9.8457%" y="229" width="0.1399%" height="15" fill="rgb(208,32,45)" fg:x="4505" fg:w="64"/><text x="10.0957%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (23 samples, 0.05%)</title><rect x="9.9353%" y="213" width="0.0503%" height="15" fill="rgb(207,135,9)" fg:x="4546" fg:w="23"/><text x="10.1853%" y="223.50"></text></g><g><title>neural_network.exe`core::ptr::write (193 samples, 0.42%)</title><rect x="10.0249%" y="261" width="0.4218%" height="15" fill="rgb(206,86,44)" fg:x="4587" fg:w="193"/><text x="10.2749%" y="271.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::__iterator_get_unchecked(core::slice::iter::IterMut&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (531 samples, 1.16%)</title><rect x="9.8129%" y="373" width="1.1605%" height="15" fill="rgb(245,177,15)" fg:x="4490" fg:w="531"/><text x="10.0629%" y="383.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::add(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (531 samples, 1.16%)</title><rect x="9.8129%" y="357" width="1.1605%" height="15" fill="rgb(206,64,50)" fg:x="4490" fg:w="531"/><text x="10.0629%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,neural_network::impl$0::train_batch::closure_env$0&gt; &gt;(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (528 samples, 1.15%)</title><rect x="9.8195%" y="341" width="1.1539%" height="15" fill="rgb(234,36,40)" fg:x="4493" fg:w="528"/><text x="10.0695%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (524 samples, 1.15%)</title><rect x="9.8282%" y="325" width="1.1452%" height="15" fill="rgb(213,64,8)" fg:x="4497" fg:w="524"/><text x="10.0782%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (524 samples, 1.15%)</title><rect x="9.8282%" y="309" width="1.1452%" height="15" fill="rgb(210,75,36)" fg:x="4497" fg:w="524"/><text x="10.0782%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (452 samples, 0.99%)</title><rect x="9.9856%" y="293" width="0.9878%" height="15" fill="rgb(229,88,21)" fg:x="4569" fg:w="452"/><text x="10.2356%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped::closure$0(ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,neural_network::impl$0::train_batch::closure_env$0&gt;,f64&gt;*, tuple$ (434 samples, 0.95%)</title><rect x="10.0249%" y="277" width="0.9485%" height="15" fill="rgb(252,204,47)" fg:x="4587" fg:w="434"/><text x="10.2749%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::mapv::closure$0(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (241 samples, 0.53%)</title><rect x="10.4467%" y="261" width="0.5267%" height="15" fill="rgb(208,77,27)" fg:x="4780" fg:w="241"/><text x="10.6967%" y="271.50"></text></g><g><title>neural_network.exe`neural_network::impl$0::train_batch::closure$0 (241 samples, 0.53%)</title><rect x="10.4467%" y="245" width="0.5267%" height="15" fill="rgb(221,76,26)" fg:x="4780" fg:w="241"/><text x="10.6967%" y="255.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (24 samples, 0.05%)</title><rect x="10.9734%" y="373" width="0.0525%" height="15" fill="rgb(225,139,18)" fg:x="5021" fg:w="24"/><text x="11.2234%" y="383.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;usize&gt; &gt;*, ref$&lt;slice2$ (16 samples, 0.03%)</title><rect x="10.9909%" y="357" width="0.0350%" height="15" fill="rgb(230,137,11)" fg:x="5029" fg:w="16"/><text x="11.2409%" y="367.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (16 samples, 0.03%)</title><rect x="10.9909%" y="341" width="0.0350%" height="15" fill="rgb(212,28,1)" fg:x="5029" fg:w="16"/><text x="11.2409%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (16 samples, 0.03%)</title><rect x="10.9909%" y="325" width="0.0350%" height="15" fill="rgb(248,164,17)" fg:x="5029" fg:w="16"/><text x="11.2409%" y="335.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f64&gt;,core::slice::iter::Iter (6 samples, 0.01%)</title><rect x="11.0412%" y="357" width="0.0131%" height="15" fill="rgb(222,171,42)" fg:x="5052" fg:w="6"/><text x="11.2912%" y="367.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$5::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f64&gt;,core::slice::iter::Iter (6 samples, 0.01%)</title><rect x="11.0412%" y="341" width="0.0131%" height="15" fill="rgb(243,84,45)" fg:x="5052" fg:w="6"/><text x="11.2912%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order (6 samples, 0.01%)</title><rect x="11.0543%" y="357" width="0.0131%" height="15" fill="rgb(252,49,23)" fg:x="5058" fg:w="6"/><text x="11.3043%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (6 samples, 0.01%)</title><rect x="11.0543%" y="341" width="0.0131%" height="15" fill="rgb(215,19,7)" fg:x="5058" fg:w="6"/><text x="11.3043%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="11.0543%" y="325" width="0.0131%" height="15" fill="rgb(238,81,41)" fg:x="5058" fg:w="6"/><text x="11.3043%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (6 samples, 0.01%)</title><rect x="11.0674%" y="325" width="0.0131%" height="15" fill="rgb(210,199,37)" fg:x="5064" fg:w="6"/><text x="11.3174%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="11.0674%" y="309" width="0.0131%" height="15" fill="rgb(244,192,49)" fg:x="5064" fg:w="6"/><text x="11.3174%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order_mut (8 samples, 0.02%)</title><rect x="11.0674%" y="357" width="0.0175%" height="15" fill="rgb(226,211,11)" fg:x="5064" fg:w="8"/><text x="11.3174%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (8 samples, 0.02%)</title><rect x="11.0674%" y="341" width="0.0175%" height="15" fill="rgb(236,162,54)" fg:x="5064" fg:w="8"/><text x="11.3174%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$1::next_for(ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (11,584 samples, 25.32%)</title><rect x="11.1242%" y="277" width="25.3169%" height="15" fill="rgb(220,229,9)" fg:x="5090" fg:w="11584"/><text x="11.3742%" y="287.50">neural_network.exe`ndarray::dimension::d..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::inner&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt; &gt;,tuple$&lt;&gt; &gt;(tuple$&lt;&gt;, tuple$&lt;ptr_mut$&lt;f64&gt;,ptr_mut$&lt;f64&gt; &gt;, tuple$&lt;isize,isize&gt;, unsigned long long, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,583 samples, 25.31%)</title><rect x="11.1264%" y="261" width="25.3147%" height="15" fill="rgb(250,87,22)" fg:x="5091" fg:w="11583"/><text x="11.3764%" y="271.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::impl$26::for_each::closure$0(ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="245" width="25.1967%" height="15" fill="rgb(239,43,17)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="255.50">neural_network.exe`ndarray::zip::impl$26..</text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0(ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="229" width="25.1967%" height="15" fill="rgb(231,177,25)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="239.50">neural_network.exe`ndarray::impl_methods..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;, ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="213" width="25.1967%" height="15" fill="rgb(219,179,1)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="223.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="197" width="25.1967%" height="15" fill="rgb(238,219,53)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="207.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core_strided(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="181" width="25.1967%" height="15" fill="rgb(232,167,36)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="191.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core_strided_c(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="165" width="25.1967%" height="15" fill="rgb(244,19,51)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="175.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::inner(tuple$&lt;&gt;, tuple$&lt;ptr_mut$&lt;f64&gt;,ptr_mut$&lt;f64&gt; &gt;, tuple$&lt;isize,isize&gt;, unsigned long long, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,529 samples, 25.20%)</title><rect x="11.2444%" y="149" width="25.1967%" height="15" fill="rgb(224,6,22)" fg:x="5145" fg:w="11529"/><text x="11.4944%" y="159.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::impl$26::for_each::closure$0(ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref_mut$&lt;f64&gt;,ref$ (8,754 samples, 19.13%)</title><rect x="17.3092%" y="133" width="19.1319%" height="15" fill="rgb(224,145,5)" fg:x="7920" fg:w="8754"/><text x="17.5592%" y="143.50">neural_network.exe`ndarray::zi..</text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure$0(ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure$0::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (8,754 samples, 19.13%)</title><rect x="17.3092%" y="117" width="19.1319%" height="15" fill="rgb(234,130,49)" fg:x="7920" fg:w="8754"/><text x="17.5592%" y="127.50">neural_network.exe`ndarray::im..</text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$0::add_assign::closure$0(ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (8,754 samples, 19.13%)</title><rect x="17.3092%" y="101" width="19.1319%" height="15" fill="rgb(254,6,2)" fg:x="7920" fg:w="8754"/><text x="17.5592%" y="111.50">neural_network.exe`ndarray::im..</text></g><g><title>neural_network.exe`core::ops::arith::impl$309::add_assign (8,754 samples, 19.13%)</title><rect x="17.3092%" y="85" width="19.1319%" height="15" fill="rgb(208,96,46)" fg:x="7920" fg:w="8754"/><text x="17.5592%" y="95.50">neural_network.exe`core::ops::..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_by_rows(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,603 samples, 25.36%)</title><rect x="11.0849%" y="357" width="25.3584%" height="15" fill="rgb(239,3,39)" fg:x="5072" fg:w="11603"/><text x="11.3349%" y="367.50">neural_network.exe`ndarray::ArrayBase&lt;nd..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each(ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;, ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,593 samples, 25.34%)</title><rect x="11.1067%" y="341" width="25.3366%" height="15" fill="rgb(233,210,1)" fg:x="5082" fg:w="11593"/><text x="11.3567%" y="351.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,593 samples, 25.34%)</title><rect x="11.1067%" y="325" width="25.3366%" height="15" fill="rgb(244,137,37)" fg:x="5082" fg:w="11593"/><text x="11.3567%" y="335.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core_strided(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,593 samples, 25.34%)</title><rect x="11.1067%" y="309" width="25.3366%" height="15" fill="rgb(240,136,2)" fg:x="5082" fg:w="11593"/><text x="11.3567%" y="319.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core_strided_c(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,593 samples, 25.34%)</title><rect x="11.1067%" y="293" width="25.3366%" height="15" fill="rgb(239,18,37)" fg:x="5082" fg:w="11593"/><text x="11.3567%" y="303.50">neural_network.exe`ndarray::zip::Zip&lt;tup..</text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,core::slice::iter::Iter&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (12,202 samples, 26.67%)</title><rect x="9.8064%" y="405" width="26.6675%" height="15" fill="rgb(218,185,22)" fg:x="4487" fg:w="12202"/><text x="10.0564%" y="415.50">neural_network.exe`core::iter::adapters::zi..</text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$5::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,core::slice::iter::Iter&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (12,202 samples, 26.67%)</title><rect x="9.8064%" y="389" width="26.6675%" height="15" fill="rgb(225,218,4)" fg:x="4487" fg:w="12202"/><text x="10.0564%" y="399.50">neural_network.exe`core::iter::adapters::zi..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11,644 samples, 25.45%)</title><rect x="11.0259%" y="373" width="25.4480%" height="15" fill="rgb(230,182,32)" fg:x="5045" fg:w="11644"/><text x="11.2759%" y="383.50">neural_network.exe`ndarray::ArrayBase&lt;nda..</text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$0::add_assign::closure$0(ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (11 samples, 0.02%)</title><rect x="36.4499%" y="357" width="0.0240%" height="15" fill="rgb(242,56,43)" fg:x="16678" fg:w="11"/><text x="36.6999%" y="367.50"></text></g><g><title>neural_network.exe`core::ops::arith::impl$309::add_assign (11 samples, 0.02%)</title><rect x="36.4499%" y="341" width="0.0240%" height="15" fill="rgb(233,99,24)" fg:x="16678" fg:w="11"/><text x="36.6999%" y="351.50"></text></g><g><title>ntdll.dll`RtlpDeCommitFreeBlock (6 samples, 0.01%)</title><rect x="36.4936%" y="229" width="0.0131%" height="15" fill="rgb(234,209,42)" fg:x="16698" fg:w="6"/><text x="36.7436%" y="239.50"></text></g><g><title>ntdll.dll`RtlpInsertFreeBlock (5 samples, 0.01%)</title><rect x="36.4958%" y="213" width="0.0109%" height="15" fill="rgb(227,7,12)" fg:x="16699" fg:w="5"/><text x="36.7458%" y="223.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (15 samples, 0.03%)</title><rect x="36.4761%" y="357" width="0.0328%" height="15" fill="rgb(245,203,43)" fg:x="16690" fg:w="15"/><text x="36.7261%" y="367.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (15 samples, 0.03%)</title><rect x="36.4761%" y="341" width="0.0328%" height="15" fill="rgb(238,205,33)" fg:x="16690" fg:w="15"/><text x="36.7261%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (15 samples, 0.03%)</title><rect x="36.4761%" y="325" width="0.0328%" height="15" fill="rgb(231,56,7)" fg:x="16690" fg:w="15"/><text x="36.7261%" y="335.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (15 samples, 0.03%)</title><rect x="36.4761%" y="309" width="0.0328%" height="15" fill="rgb(244,186,29)" fg:x="16690" fg:w="15"/><text x="36.7261%" y="319.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (15 samples, 0.03%)</title><rect x="36.4761%" y="293" width="0.0328%" height="15" fill="rgb(234,111,31)" fg:x="16690" fg:w="15"/><text x="36.7261%" y="303.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (13 samples, 0.03%)</title><rect x="36.4805%" y="277" width="0.0284%" height="15" fill="rgb(241,149,10)" fg:x="16692" fg:w="13"/><text x="36.7305%" y="287.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (12 samples, 0.03%)</title><rect x="36.4826%" y="261" width="0.0262%" height="15" fill="rgb(249,206,44)" fg:x="16693" fg:w="12"/><text x="36.7326%" y="271.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (10 samples, 0.02%)</title><rect x="36.4870%" y="245" width="0.0219%" height="15" fill="rgb(251,153,30)" fg:x="16695" fg:w="10"/><text x="36.7370%" y="255.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$2::sub_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$2::sub_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="36.5089%" y="357" width="0.0131%" height="15" fill="rgb(239,152,38)" fg:x="16705" fg:w="6"/><text x="36.7589%" y="367.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;usize&gt; &gt;*, ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="36.5111%" y="341" width="0.0109%" height="15" fill="rgb(249,139,47)" fg:x="16706" fg:w="5"/><text x="36.7611%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="36.5111%" y="325" width="0.0109%" height="15" fill="rgb(244,64,35)" fg:x="16706" fg:w="5"/><text x="36.7611%" y="335.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="36.5111%" y="309" width="0.0109%" height="15" fill="rgb(216,46,15)" fg:x="16706" fg:w="5"/><text x="36.7611%" y="319.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f64&gt;,core::slice::iter::Iter (54 samples, 0.12%)</title><rect x="36.6422%" y="341" width="0.1180%" height="15" fill="rgb(250,74,19)" fg:x="16766" fg:w="54"/><text x="36.8922%" y="351.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$5::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f64&gt;,core::slice::iter::Iter (54 samples, 0.12%)</title><rect x="36.6422%" y="325" width="0.1180%" height="15" fill="rgb(249,42,33)" fg:x="16766" fg:w="54"/><text x="36.8922%" y="335.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (525 samples, 1.15%)</title><rect x="36.4739%" y="405" width="1.1474%" height="15" fill="rgb(242,149,17)" fg:x="16689" fg:w="525"/><text x="36.7239%" y="415.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (525 samples, 1.15%)</title><rect x="36.4739%" y="389" width="1.1474%" height="15" fill="rgb(244,29,21)" fg:x="16689" fg:w="525"/><text x="36.7239%" y="399.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (525 samples, 1.15%)</title><rect x="36.4739%" y="373" width="1.1474%" height="15" fill="rgb(220,130,37)" fg:x="16689" fg:w="525"/><text x="36.7239%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$2::sub_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$2::sub_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (503 samples, 1.10%)</title><rect x="36.5220%" y="357" width="1.0993%" height="15" fill="rgb(211,67,2)" fg:x="16711" fg:w="503"/><text x="36.7720%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$2::sub_assign::closure$0(ndarray::impl_ops::assign_ops::impl$2::sub_assign::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (390 samples, 0.85%)</title><rect x="36.7689%" y="341" width="0.8523%" height="15" fill="rgb(235,68,52)" fg:x="16824" fg:w="390"/><text x="37.0189%" y="351.50"></text></g><g><title>neural_network.exe`core::ops::arith::impl$337::sub_assign (390 samples, 0.85%)</title><rect x="36.7689%" y="325" width="0.8523%" height="15" fill="rgb(246,142,3)" fg:x="16824" fg:w="390"/><text x="37.0189%" y="335.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (11 samples, 0.02%)</title><rect x="37.6213%" y="405" width="0.0240%" height="15" fill="rgb(241,25,7)" fg:x="17214" fg:w="11"/><text x="37.8713%" y="415.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;f64&gt;, ndarray::impl_methods::impl$0::fill::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (296 samples, 0.65%)</title><rect x="37.6541%" y="373" width="0.6469%" height="15" fill="rgb(242,119,39)" fg:x="17229" fg:w="296"/><text x="37.9041%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::fill::closure$0(ndarray::impl_methods::impl$0::fill::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (295 samples, 0.64%)</title><rect x="37.6563%" y="357" width="0.6447%" height="15" fill="rgb(241,98,45)" fg:x="17230" fg:w="295"/><text x="37.9063%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::fill (302 samples, 0.66%)</title><rect x="37.6453%" y="405" width="0.6600%" height="15" fill="rgb(254,28,30)" fg:x="17225" fg:w="302"/><text x="37.8953%" y="415.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_methods::impl$0::fill::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::impl_methods::impl$0::fill::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (302 samples, 0.66%)</title><rect x="37.6453%" y="389" width="0.6600%" height="15" fill="rgb(241,142,54)" fg:x="17225" fg:w="302"/><text x="37.8953%" y="399.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order_mut (5 samples, 0.01%)</title><rect x="38.3972%" y="293" width="0.0109%" height="15" fill="rgb(222,85,15)" fg:x="17569" fg:w="5"/><text x="38.6472%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (5 samples, 0.01%)</title><rect x="38.3972%" y="277" width="0.0109%" height="15" fill="rgb(210,85,47)" fg:x="17569" fg:w="5"/><text x="38.6472%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (5 samples, 0.01%)</title><rect x="38.3972%" y="261" width="0.0109%" height="15" fill="rgb(224,206,25)" fg:x="17569" fg:w="5"/><text x="38.6472%" y="271.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (5 samples, 0.01%)</title><rect x="38.3972%" y="245" width="0.0109%" height="15" fill="rgb(243,201,19)" fg:x="17569" fg:w="5"/><text x="38.6472%" y="255.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$17::mul(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (19 samples, 0.04%)</title><rect x="38.3840%" y="325" width="0.0415%" height="15" fill="rgb(236,59,4)" fg:x="17563" fg:w="19"/><text x="38.6340%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (18 samples, 0.04%)</title><rect x="38.3862%" y="309" width="0.0393%" height="15" fill="rgb(254,179,45)" fg:x="17564" fg:w="18"/><text x="38.6362%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::clone_iopf::closure$0(ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="38.4124%" y="293" width="0.0131%" height="15" fill="rgb(226,14,10)" fg:x="17576" fg:w="6"/><text x="38.6624%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$16::mul&lt;f64,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (50 samples, 0.11%)</title><rect x="38.3797%" y="341" width="0.1093%" height="15" fill="rgb(244,27,41)" fg:x="17561" fg:w="50"/><text x="38.6297%" y="351.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (28 samples, 0.06%)</title><rect x="38.4277%" y="325" width="0.0612%" height="15" fill="rgb(235,35,32)" fg:x="17583" fg:w="28"/><text x="38.6777%" y="335.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (25 samples, 0.05%)</title><rect x="38.4343%" y="309" width="0.0546%" height="15" fill="rgb(218,68,31)" fg:x="17586" fg:w="25"/><text x="38.6843%" y="319.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (6 samples, 0.01%)</title><rect x="38.5086%" y="213" width="0.0131%" height="15" fill="rgb(207,120,37)" fg:x="17620" fg:w="6"/><text x="38.7586%" y="223.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeap (268 samples, 0.59%)</title><rect x="38.5479%" y="197" width="0.5857%" height="15" fill="rgb(227,98,0)" fg:x="17638" fg:w="268"/><text x="38.7979%" y="207.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (348 samples, 0.76%)</title><rect x="38.5064%" y="325" width="0.7606%" height="15" fill="rgb(207,7,3)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="335.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (348 samples, 0.76%)</title><rect x="38.5064%" y="309" width="0.7606%" height="15" fill="rgb(206,98,19)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (348 samples, 0.76%)</title><rect x="38.5064%" y="293" width="0.7606%" height="15" fill="rgb(217,5,26)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (348 samples, 0.76%)</title><rect x="38.5064%" y="277" width="0.7606%" height="15" fill="rgb(235,190,38)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="287.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate (348 samples, 0.76%)</title><rect x="38.5064%" y="261" width="0.7606%" height="15" fill="rgb(247,86,24)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="271.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (348 samples, 0.76%)</title><rect x="38.5064%" y="245" width="0.7606%" height="15" fill="rgb(205,101,16)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="255.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc (348 samples, 0.76%)</title><rect x="38.5064%" y="229" width="0.7606%" height="15" fill="rgb(246,168,33)" fg:x="17619" fg:w="348"/><text x="38.7564%" y="239.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (338 samples, 0.74%)</title><rect x="38.5283%" y="213" width="0.7387%" height="15" fill="rgb(231,114,1)" fg:x="17629" fg:w="338"/><text x="38.7783%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (61 samples, 0.13%)</title><rect x="39.1337%" y="197" width="0.1333%" height="15" fill="rgb(207,184,53)" fg:x="17906" fg:w="61"/><text x="39.3837%" y="207.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (7 samples, 0.02%)</title><rect x="39.2517%" y="181" width="0.0153%" height="15" fill="rgb(224,95,51)" fg:x="17960" fg:w="7"/><text x="39.5017%" y="191.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::dgemm (9 samples, 0.02%)</title><rect x="39.2670%" y="325" width="0.0197%" height="15" fill="rgb(212,188,45)" fg:x="17967" fg:w="9"/><text x="39.5170%" y="335.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(matrixmultiply::aligned_alloc::Alloc (6 samples, 0.01%)</title><rect x="39.2998%" y="309" width="0.0131%" height="15" fill="rgb(223,154,38)" fg:x="17982" fg:w="6"/><text x="39.5498%" y="319.50"></text></g><g><title>neural_network.exe`matrixmultiply::aligned_alloc::impl$1::drop(matrixmultiply::aligned_alloc::Alloc (6 samples, 0.01%)</title><rect x="39.2998%" y="293" width="0.0131%" height="15" fill="rgb(251,22,52)" fg:x="17982" fg:w="6"/><text x="39.5498%" y="303.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (6 samples, 0.01%)</title><rect x="39.2998%" y="277" width="0.0131%" height="15" fill="rgb(229,209,22)" fg:x="17982" fg:w="6"/><text x="39.5498%" y="287.50"></text></g><g><title>ntdll.dll`RtlAllocateHeap (8 samples, 0.02%)</title><rect x="39.3172%" y="229" width="0.0175%" height="15" fill="rgb(234,138,34)" fg:x="17990" fg:w="8"/><text x="39.5672%" y="239.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeap (5 samples, 0.01%)</title><rect x="39.3522%" y="213" width="0.0109%" height="15" fill="rgb(212,95,11)" fg:x="18006" fg:w="5"/><text x="39.6022%" y="223.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (10 samples, 0.02%)</title><rect x="39.4965%" y="197" width="0.0219%" height="15" fill="rgb(240,179,47)" fg:x="18072" fg:w="10"/><text x="39.7465%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::aligned_alloc::Alloc&lt;f64&gt;::new (111 samples, 0.24%)</title><rect x="39.3129%" y="293" width="0.2426%" height="15" fill="rgb(240,163,11)" fg:x="17988" fg:w="111"/><text x="39.5629%" y="303.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (110 samples, 0.24%)</title><rect x="39.3151%" y="277" width="0.2404%" height="15" fill="rgb(236,37,12)" fg:x="17989" fg:w="110"/><text x="39.5651%" y="287.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::impl$0::alloc (109 samples, 0.24%)</title><rect x="39.3172%" y="261" width="0.2382%" height="15" fill="rgb(232,164,16)" fg:x="17990" fg:w="109"/><text x="39.5672%" y="271.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::allocate (109 samples, 0.24%)</title><rect x="39.3172%" y="245" width="0.2382%" height="15" fill="rgb(244,205,15)" fg:x="17990" fg:w="109"/><text x="39.5672%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (101 samples, 0.22%)</title><rect x="39.3347%" y="229" width="0.2207%" height="15" fill="rgb(223,117,47)" fg:x="17998" fg:w="101"/><text x="39.5847%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (88 samples, 0.19%)</title><rect x="39.3631%" y="213" width="0.1923%" height="15" fill="rgb(244,107,35)" fg:x="18011" fg:w="88"/><text x="39.6131%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (17 samples, 0.04%)</title><rect x="39.5183%" y="197" width="0.0372%" height="15" fill="rgb(205,140,8)" fg:x="18082" fg:w="17"/><text x="39.7683%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::make_packing_buffer (112 samples, 0.24%)</title><rect x="39.3129%" y="309" width="0.2448%" height="15" fill="rgb(228,84,46)" fg:x="17988" fg:w="112"/><text x="39.5629%" y="319.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (68 samples, 0.15%)</title><rect x="39.6647%" y="277" width="0.1486%" height="15" fill="rgb(254,188,9)" fg:x="18149" fg:w="68"/><text x="39.9147%" y="287.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (13 samples, 0.03%)</title><rect x="39.9161%" y="245" width="0.0284%" height="15" fill="rgb(206,112,54)" fg:x="18264" fg:w="13"/><text x="40.1661%" y="255.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (67 samples, 0.15%)</title><rect x="39.8134%" y="277" width="0.1464%" height="15" fill="rgb(216,84,49)" fg:x="18217" fg:w="67"/><text x="40.0634%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (67 samples, 0.15%)</title><rect x="39.8134%" y="261" width="0.1464%" height="15" fill="rgb(214,194,35)" fg:x="18217" fg:w="67"/><text x="40.0634%" y="271.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$37::forward_unchecked (7 samples, 0.02%)</title><rect x="39.9445%" y="245" width="0.0153%" height="15" fill="rgb(249,28,3)" fg:x="18277" fg:w="7"/><text x="40.1945%" y="255.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (7 samples, 0.02%)</title><rect x="39.9445%" y="229" width="0.0153%" height="15" fill="rgb(222,56,52)" fg:x="18277" fg:w="7"/><text x="40.1945%" y="239.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U4,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (224 samples, 0.49%)</title><rect x="39.5577%" y="309" width="0.4896%" height="15" fill="rgb(245,217,50)" fg:x="18100" fg:w="224"/><text x="39.8077%" y="319.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (222 samples, 0.49%)</title><rect x="39.5620%" y="293" width="0.4852%" height="15" fill="rgb(213,201,24)" fg:x="18102" fg:w="222"/><text x="39.8120%" y="303.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset (40 samples, 0.09%)</title><rect x="39.9598%" y="277" width="0.0874%" height="15" fill="rgb(248,116,28)" fg:x="18284" fg:w="40"/><text x="40.2098%" y="287.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (19 samples, 0.04%)</title><rect x="40.0472%" y="293" width="0.0415%" height="15" fill="rgb(219,72,43)" fg:x="18324" fg:w="19"/><text x="40.2972%" y="303.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (11 samples, 0.02%)</title><rect x="40.0647%" y="277" width="0.0240%" height="15" fill="rgb(209,138,14)" fg:x="18332" fg:w="11"/><text x="40.3147%" y="287.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (11 samples, 0.02%)</title><rect x="40.0647%" y="261" width="0.0240%" height="15" fill="rgb(222,18,33)" fg:x="18332" fg:w="11"/><text x="40.3147%" y="271.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (8 samples, 0.02%)</title><rect x="40.0712%" y="245" width="0.0175%" height="15" fill="rgb(213,199,7)" fg:x="18335" fg:w="8"/><text x="40.3212%" y="255.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$0(matrixmultiply::gemm::gemm_packed::closure_env$0 (6 samples, 0.01%)</title><rect x="40.1259%" y="261" width="0.0131%" height="15" fill="rgb(250,110,10)" fg:x="18360" fg:w="6"/><text x="40.3759%" y="271.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::with(matrixmultiply::gemm::gemm_packed::closure$0::closure_env$0 (6 samples, 0.01%)</title><rect x="40.1259%" y="245" width="0.0131%" height="15" fill="rgb(248,123,6)" fg:x="18360" fg:w="6"/><text x="40.3759%" y="255.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::try_with(matrixmultiply::gemm::gemm_packed::closure$0::closure_env$0 (6 samples, 0.01%)</title><rect x="40.1259%" y="229" width="0.0131%" height="15" fill="rgb(206,91,31)" fg:x="18360" fg:w="6"/><text x="40.3759%" y="239.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::MASK_BUF::__getit(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;core::cell::UnsafeCell (6 samples, 0.01%)</title><rect x="40.1259%" y="213" width="0.0131%" height="15" fill="rgb(211,154,13)" fg:x="18360" fg:w="6"/><text x="40.3759%" y="223.50"></text></g><g><title>neural_network.exe`std::sys::common::thread_local::fast_local::Key&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::get (6 samples, 0.01%)</title><rect x="40.1259%" y="197" width="0.0131%" height="15" fill="rgb(225,148,7)" fg:x="18360" fg:w="6"/><text x="40.3759%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::impl$2::kernel (282 samples, 0.62%)</title><rect x="40.9433%" y="245" width="0.6163%" height="15" fill="rgb(220,160,43)" fg:x="18734" fg:w="282"/><text x="41.1933%" y="255.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_blend_pd (312 samples, 0.68%)</title><rect x="45.3820%" y="197" width="0.6819%" height="15" fill="rgb(213,52,39)" fg:x="20765" fg:w="312"/><text x="45.6320%" y="207.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_broadcast_sd (148 samples, 0.32%)</title><rect x="46.0639%" y="197" width="0.3235%" height="15" fill="rgb(243,137,7)" fg:x="21077" fg:w="148"/><text x="46.3139%" y="207.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_set1_pd (148 samples, 0.32%)</title><rect x="46.0639%" y="181" width="0.3235%" height="15" fill="rgb(230,79,13)" fg:x="21077" fg:w="148"/><text x="46.3139%" y="191.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_setr_pd (148 samples, 0.32%)</title><rect x="46.0639%" y="165" width="0.3235%" height="15" fill="rgb(247,105,23)" fg:x="21077" fg:w="148"/><text x="46.3139%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_pd (201 samples, 0.44%)</title><rect x="46.3874%" y="197" width="0.4393%" height="15" fill="rgb(223,179,41)" fg:x="21225" fg:w="201"/><text x="46.6374%" y="207.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_loadu_pd (201 samples, 0.44%)</title><rect x="46.8266%" y="197" width="0.4393%" height="15" fill="rgb(218,9,34)" fg:x="21426" fg:w="201"/><text x="47.0766%" y="207.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (201 samples, 0.44%)</title><rect x="46.8266%" y="181" width="0.4393%" height="15" fill="rgb(222,106,8)" fg:x="21426" fg:w="201"/><text x="47.0766%" y="191.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_pd (313 samples, 0.68%)</title><rect x="47.2659%" y="197" width="0.6841%" height="15" fill="rgb(211,220,0)" fg:x="21627" fg:w="313"/><text x="47.5159%" y="207.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_shuffle_pd (25 samples, 0.05%)</title><rect x="47.9500%" y="197" width="0.0546%" height="15" fill="rgb(229,52,16)" fg:x="21940" fg:w="25"/><text x="48.2000%" y="207.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_storeu_pd (647 samples, 1.41%)</title><rect x="48.0046%" y="197" width="1.4140%" height="15" fill="rgb(212,155,18)" fg:x="21965" fg:w="647"/><text x="48.2546%" y="207.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (272 samples, 0.59%)</title><rect x="49.4187%" y="197" width="0.5945%" height="15" fill="rgb(242,21,14)" fg:x="22612" fg:w="272"/><text x="49.6687%" y="207.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (272 samples, 0.59%)</title><rect x="49.4187%" y="181" width="0.5945%" height="15" fill="rgb(222,19,48)" fg:x="22612" fg:w="272"/><text x="49.6687%" y="191.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (248 samples, 0.54%)</title><rect x="49.4711%" y="165" width="0.5420%" height="15" fill="rgb(232,45,27)" fg:x="22636" fg:w="248"/><text x="49.7211%" y="175.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::offset (219 samples, 0.48%)</title><rect x="50.0131%" y="197" width="0.4786%" height="15" fill="rgb(249,103,42)" fg:x="22884" fg:w="219"/><text x="50.2631%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (4,330 samples, 9.46%)</title><rect x="42.2808%" y="229" width="9.4632%" height="15" fill="rgb(246,81,33)" fg:x="19346" fg:w="4330"/><text x="42.5308%" y="239.50">neural_network..</text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_x86_avx (3,283 samples, 7.18%)</title><rect x="44.5690%" y="213" width="7.1750%" height="15" fill="rgb(252,33,42)" fg:x="20393" fg:w="3283"/><text x="44.8190%" y="223.50">neural_net..</text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$3::multiply_add (573 samples, 1.25%)</title><rect x="50.4917%" y="197" width="1.2523%" height="15" fill="rgb(209,212,41)" fg:x="23103" fg:w="573"/><text x="50.7417%" y="207.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_pd (573 samples, 1.25%)</title><rect x="50.4917%" y="181" width="1.2523%" height="15" fill="rgb(207,154,6)" fg:x="23103" fg:w="573"/><text x="50.7417%" y="191.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::impl$2::kernel (152 samples, 0.33%)</title><rect x="52.3756%" y="213" width="0.3322%" height="15" fill="rgb(223,64,47)" fg:x="23965" fg:w="152"/><text x="52.6256%" y="223.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (77 samples, 0.17%)</title><rect x="55.4463%" y="165" width="0.1683%" height="15" fill="rgb(211,161,38)" fg:x="25370" fg:w="77"/><text x="55.6963%" y="175.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (188 samples, 0.41%)</title><rect x="55.4463%" y="197" width="0.4109%" height="15" fill="rgb(219,138,40)" fg:x="25370" fg:w="188"/><text x="55.6963%" y="207.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (188 samples, 0.41%)</title><rect x="55.4463%" y="181" width="0.4109%" height="15" fill="rgb(241,228,46)" fg:x="25370" fg:w="188"/><text x="55.6963%" y="191.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$37::forward_unchecked (111 samples, 0.24%)</title><rect x="55.6146%" y="165" width="0.2426%" height="15" fill="rgb(223,209,38)" fg:x="25447" fg:w="111"/><text x="55.8646%" y="175.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (111 samples, 0.24%)</title><rect x="55.6146%" y="149" width="0.2426%" height="15" fill="rgb(236,164,45)" fg:x="25447" fg:w="111"/><text x="55.8646%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_blend_pd (132 samples, 0.29%)</title><rect x="58.8032%" y="165" width="0.2885%" height="15" fill="rgb(231,15,5)" fg:x="26906" fg:w="132"/><text x="59.0532%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_broadcast_sd (56 samples, 0.12%)</title><rect x="59.0917%" y="165" width="0.1224%" height="15" fill="rgb(252,35,15)" fg:x="27038" fg:w="56"/><text x="59.3417%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_set1_pd (56 samples, 0.12%)</title><rect x="59.0917%" y="149" width="0.1224%" height="15" fill="rgb(248,181,18)" fg:x="27038" fg:w="56"/><text x="59.3417%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_setr_pd (56 samples, 0.12%)</title><rect x="59.0917%" y="133" width="0.1224%" height="15" fill="rgb(233,39,42)" fg:x="27038" fg:w="56"/><text x="59.3417%" y="143.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_pd (117 samples, 0.26%)</title><rect x="59.2141%" y="165" width="0.2557%" height="15" fill="rgb(238,110,33)" fg:x="27094" fg:w="117"/><text x="59.4641%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_loadu_pd (54 samples, 0.12%)</title><rect x="59.4698%" y="165" width="0.1180%" height="15" fill="rgb(233,195,10)" fg:x="27211" fg:w="54"/><text x="59.7198%" y="175.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (54 samples, 0.12%)</title><rect x="59.4698%" y="149" width="0.1180%" height="15" fill="rgb(254,105,3)" fg:x="27211" fg:w="54"/><text x="59.7198%" y="159.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_pd (113 samples, 0.25%)</title><rect x="59.5878%" y="165" width="0.2470%" height="15" fill="rgb(221,225,9)" fg:x="27265" fg:w="113"/><text x="59.8378%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_shuffle_pd (16 samples, 0.03%)</title><rect x="59.8348%" y="165" width="0.0350%" height="15" fill="rgb(224,227,45)" fg:x="27378" fg:w="16"/><text x="60.0848%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_storeu_pd (79 samples, 0.17%)</title><rect x="59.8697%" y="165" width="0.1727%" height="15" fill="rgb(229,198,43)" fg:x="27394" fg:w="79"/><text x="60.1197%" y="175.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (79 samples, 0.17%)</title><rect x="60.0424%" y="165" width="0.1727%" height="15" fill="rgb(206,209,35)" fg:x="27473" fg:w="79"/><text x="60.2924%" y="175.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (79 samples, 0.17%)</title><rect x="60.0424%" y="149" width="0.1727%" height="15" fill="rgb(245,195,53)" fg:x="27473" fg:w="79"/><text x="60.2924%" y="159.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (73 samples, 0.16%)</title><rect x="60.0555%" y="133" width="0.1595%" height="15" fill="rgb(240,92,26)" fg:x="27479" fg:w="73"/><text x="60.3055%" y="143.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::offset (39 samples, 0.09%)</title><rect x="60.2151%" y="165" width="0.0852%" height="15" fill="rgb(207,40,23)" fg:x="27552" fg:w="39"/><text x="60.4651%" y="175.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (2,238 samples, 4.89%)</title><rect x="55.8572%" y="197" width="4.8912%" height="15" fill="rgb(223,111,35)" fg:x="25558" fg:w="2238"/><text x="56.1072%" y="207.50">neural..</text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_x86_avx (1,058 samples, 2.31%)</title><rect x="58.4361%" y="181" width="2.3123%" height="15" fill="rgb(229,147,28)" fg:x="26738" fg:w="1058"/><text x="58.6861%" y="191.50">n..</text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$3::multiply_add (205 samples, 0.45%)</title><rect x="60.3003%" y="165" width="0.4480%" height="15" fill="rgb(211,29,28)" fg:x="27591" fg:w="205"/><text x="60.5503%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_pd (205 samples, 0.45%)</title><rect x="60.3003%" y="149" width="0.4480%" height="15" fill="rgb(228,72,33)" fg:x="27591" fg:w="205"/><text x="60.5503%" y="159.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (8,782 samples, 19.19%)</title><rect x="41.5596%" y="245" width="19.1931%" height="15" fill="rgb(205,214,31)" fg:x="19016" fg:w="8782"/><text x="41.8096%" y="255.50">neural_network.exe`matrixmulti..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::masked_kernel&lt;f64,matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;(unsigned long long, double, double*, double*, double, double*, long long, long long, unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (4,122 samples, 9.01%)</title><rect x="51.7440%" y="229" width="9.0087%" height="15" fill="rgb(224,111,15)" fg:x="23676" fg:w="4122"/><text x="51.9940%" y="239.50">neural_networ..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::c_to_masked_ab_beta_c(double, double*, long long, long long, unsigned long long, unsigned long long, ref$&lt;slice2$ (3,681 samples, 8.04%)</title><rect x="52.7078%" y="213" width="8.0448%" height="15" fill="rgb(253,21,26)" fg:x="24117" fg:w="3681"/><text x="52.9578%" y="223.50">neural_netw..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (9,493 samples, 20.75%)</title><rect x="40.1390%" y="261" width="20.7470%" height="15" fill="rgb(245,139,43)" fg:x="18366" fg:w="9493"/><text x="40.3890%" y="271.50">neural_network.exe`matrixmultiply..</text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_const$ (61 samples, 0.13%)</title><rect x="60.7527%" y="245" width="0.1333%" height="15" fill="rgb(252,170,7)" fg:x="27798" fg:w="61"/><text x="61.0027%" y="255.50"></text></g><g><title>neural_network.exe`matrixmultiply::ptr::impl$6::offset(matrixmultiply::ptr::Ptr&lt;ptr_const$ (61 samples, 0.13%)</title><rect x="60.7527%" y="229" width="0.1333%" height="15" fill="rgb(231,118,14)" fg:x="27798" fg:w="61"/><text x="61.0027%" y="239.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::offset (61 samples, 0.13%)</title><rect x="60.7527%" y="213" width="0.1333%" height="15" fill="rgb(238,83,0)" fg:x="27798" fg:w="61"/><text x="61.0027%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (9,712 samples, 21.23%)</title><rect x="40.0472%" y="309" width="21.2256%" height="15" fill="rgb(221,39,39)" fg:x="18324" fg:w="9712"/><text x="40.2972%" y="319.50">neural_network.exe`matrixmultiply..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (9,693 samples, 21.18%)</title><rect x="40.0887%" y="293" width="21.1841%" height="15" fill="rgb(222,119,46)" fg:x="18343" fg:w="9693"/><text x="40.3387%" y="303.50">neural_network.exe`matrixmultiply..</text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f64&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (9,693 samples, 21.18%)</title><rect x="40.0887%" y="277" width="21.1841%" height="15" fill="rgb(222,165,49)" fg:x="18343" fg:w="9693"/><text x="40.3387%" y="287.50">neural_network.exe`matrixmultiply..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (177 samples, 0.39%)</title><rect x="60.8860%" y="261" width="0.3868%" height="15" fill="rgb(219,113,52)" fg:x="27859" fg:w="177"/><text x="61.1360%" y="271.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (15 samples, 0.03%)</title><rect x="61.2728%" y="309" width="0.0328%" height="15" fill="rgb(214,7,15)" fg:x="28036" fg:w="15"/><text x="61.5228%" y="319.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; (10,076 samples, 22.02%)</title><rect x="39.2867%" y="325" width="22.0212%" height="15" fill="rgb(235,32,4)" fg:x="17976" fg:w="10076"/><text x="39.5367%" y="335.50">neural_network.exe`matrixmultiply::..</text></g><g><title>ntdll.dll`RtlGetCurrentServiceSessionId (9 samples, 0.02%)</title><rect x="61.4411%" y="293" width="0.0197%" height="15" fill="rgb(238,90,54)" fg:x="28113" fg:w="9"/><text x="61.6911%" y="303.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (10,581 samples, 23.12%)</title><rect x="38.3403%" y="389" width="23.1248%" height="15" fill="rgb(213,208,19)" fg:x="17543" fg:w="10581"/><text x="38.5903%" y="399.50">neural_network.exe`core::ptr::drop_in..</text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (10,581 samples, 23.12%)</title><rect x="38.3403%" y="373" width="23.1248%" height="15" fill="rgb(233,156,4)" fg:x="17543" fg:w="10581"/><text x="38.5903%" y="383.50">neural_network.exe`core::ptr::drop_in..</text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (10,581 samples, 23.12%)</title><rect x="38.3403%" y="357" width="23.1248%" height="15" fill="rgb(207,194,5)" fg:x="17543" fg:w="10581"/><text x="38.5903%" y="367.50">neural_network.exe`ndarray::data_repr..</text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (10,513 samples, 22.98%)</title><rect x="38.4889%" y="341" width="22.9762%" height="15" fill="rgb(206,111,30)" fg:x="17611" fg:w="10513"/><text x="38.7389%" y="351.50">neural_network.exe`ndarray::linalg::..</text></g><g><title>ntdll.dll`RtlFreeHeap (65 samples, 0.14%)</title><rect x="61.3231%" y="325" width="0.1421%" height="15" fill="rgb(243,70,54)" fg:x="28059" fg:w="65"/><text x="61.5731%" y="335.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (54 samples, 0.12%)</title><rect x="61.3471%" y="309" width="0.1180%" height="15" fill="rgb(242,28,8)" fg:x="28070" fg:w="54"/><text x="61.5971%" y="319.50"></text></g><g><title>vcruntime140.dll`memset() (73 samples, 0.16%)</title><rect x="61.5154%" y="309" width="0.1595%" height="15" fill="rgb(219,106,18)" fg:x="28147" fg:w="73"/><text x="61.7654%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (2,054 samples, 4.49%)</title><rect x="61.4673%" y="341" width="4.4890%" height="15" fill="rgb(244,222,10)" fg:x="28125" fg:w="2054"/><text x="61.7173%" y="351.50">neura..</text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (2,054 samples, 4.49%)</title><rect x="61.4673%" y="325" width="4.4890%" height="15" fill="rgb(236,179,52)" fg:x="28125" fg:w="2054"/><text x="61.7173%" y="335.50">neura..</text></g><g><title>vcruntime140.dll`memset_repstos() (1,959 samples, 4.28%)</title><rect x="61.6750%" y="309" width="4.2814%" height="15" fill="rgb(213,23,39)" fg:x="28220" fg:w="1959"/><text x="61.9250%" y="319.50">vcrun..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::fill (2,058 samples, 4.50%)</title><rect x="61.4652%" y="389" width="4.4978%" height="15" fill="rgb(238,48,10)" fg:x="28124" fg:w="2058"/><text x="61.7152%" y="399.50">neura..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace(ndarray::impl_methods::impl$0::fill::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (2,058 samples, 4.50%)</title><rect x="61.4652%" y="373" width="4.4978%" height="15" fill="rgb(251,196,23)" fg:x="28124" fg:w="2058"/><text x="61.7152%" y="383.50">neura..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (2,057 samples, 4.50%)</title><rect x="61.4673%" y="357" width="4.4956%" height="15" fill="rgb(250,152,24)" fg:x="28125" fg:w="2057"/><text x="61.7173%" y="367.50">neura..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="65.9892%" y="357" width="0.0131%" height="15" fill="rgb(209,150,17)" fg:x="30194" fg:w="6"/><text x="66.2392%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_by_rows(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="65.9892%" y="341" width="0.0131%" height="15" fill="rgb(234,202,34)" fg:x="30194" fg:w="6"/><text x="66.2392%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each(ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;, ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="65.9892%" y="325" width="0.0131%" height="15" fill="rgb(253,148,53)" fg:x="30194" fg:w="6"/><text x="66.2392%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="65.9892%" y="309" width="0.0131%" height="15" fill="rgb(218,129,16)" fg:x="30194" fg:w="6"/><text x="66.2392%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core_strided(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="65.9892%" y="293" width="0.0131%" height="15" fill="rgb(216,85,19)" fg:x="30194" fg:w="6"/><text x="66.2392%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::for_each_core_strided_c(tuple$&lt;&gt;, ndarray::zip::impl$26::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt;,ndarray::iterators::lanes::LanesMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::iterators::lanes::Lanes&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;,ndarray::impl_methods::impl$0::zip_mut_with_by_rows::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="65.9892%" y="277" width="0.0131%" height="15" fill="rgb(235,228,7)" fg:x="30194" fg:w="6"/><text x="66.2392%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f64&gt;,core::slice::iter::Iter (13 samples, 0.03%)</title><rect x="66.0023%" y="341" width="0.0284%" height="15" fill="rgb(245,175,0)" fg:x="30200" fg:w="13"/><text x="66.2523%" y="351.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$5::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f64&gt;,core::slice::iter::Iter (13 samples, 0.03%)</title><rect x="66.0023%" y="325" width="0.0284%" height="15" fill="rgb(208,168,36)" fg:x="30200" fg:w="13"/><text x="66.2523%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$17::mul(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (37 samples, 0.08%)</title><rect x="65.9804%" y="373" width="0.0809%" height="15" fill="rgb(246,171,24)" fg:x="30190" fg:w="37"/><text x="66.2304%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (27 samples, 0.06%)</title><rect x="66.0023%" y="357" width="0.0590%" height="15" fill="rgb(215,142,24)" fg:x="30200" fg:w="27"/><text x="66.2523%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::clone_iopf::closure$0(ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (6 samples, 0.01%)</title><rect x="66.0482%" y="341" width="0.0131%" height="15" fill="rgb(250,187,7)" fg:x="30221" fg:w="6"/><text x="66.2982%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$16::mul&lt;f64,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (81 samples, 0.18%)</title><rect x="65.9673%" y="389" width="0.1770%" height="15" fill="rgb(228,66,33)" fg:x="30184" fg:w="81"/><text x="66.2173%" y="399.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (37 samples, 0.08%)</title><rect x="66.0635%" y="373" width="0.0809%" height="15" fill="rgb(234,215,21)" fg:x="30228" fg:w="37"/><text x="66.3135%" y="383.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (34 samples, 0.07%)</title><rect x="66.0700%" y="357" width="0.0743%" height="15" fill="rgb(222,191,20)" fg:x="30231" fg:w="34"/><text x="66.3200%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::iterators::impl$13::next(ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (524 samples, 1.15%)</title><rect x="66.8808%" y="341" width="1.1452%" height="15" fill="rgb(245,79,54)" fg:x="30602" fg:w="524"/><text x="67.1308%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter (518 samples, 1.13%)</title><rect x="66.8940%" y="325" width="1.1321%" height="15" fill="rgb(240,10,37)" fg:x="30608" fg:w="518"/><text x="67.1440%" y="335.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;f64&gt;::post_inc_start (364 samples, 0.80%)</title><rect x="67.2305%" y="309" width="0.7955%" height="15" fill="rgb(214,192,32)" fg:x="30762" fg:w="364"/><text x="67.4805%" y="319.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f64&gt;::add(core::ptr::non_null::NonNull (223 samples, 0.49%)</title><rect x="67.5387%" y="293" width="0.4874%" height="15" fill="rgb(209,36,54)" fg:x="30903" fg:w="223"/><text x="67.7887%" y="303.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (223 samples, 0.49%)</title><rect x="67.5387%" y="277" width="0.4874%" height="15" fill="rgb(220,10,11)" fg:x="30903" fg:w="223"/><text x="67.7887%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (1,086 samples, 2.37%)</title><rect x="66.8437%" y="373" width="2.3735%" height="15" fill="rgb(221,106,17)" fg:x="30585" fg:w="1086"/><text x="67.0937%" y="383.50">ne..</text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$3::next(core::iter::adapters::zip::Zip&lt;ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::iterators::Iter&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (1,086 samples, 2.37%)</title><rect x="66.8437%" y="357" width="2.3735%" height="15" fill="rgb(251,142,44)" fg:x="30585" fg:w="1086"/><text x="67.0937%" y="367.50">ne..</text></g><g><title>neural_network.exe`ndarray::iterators::impl$18::next(ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$ (545 samples, 1.19%)</title><rect x="68.0261%" y="341" width="1.1911%" height="15" fill="rgb(238,13,15)" fg:x="31126" fg:w="545"/><text x="68.2761%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::next(core::slice::iter::IterMut (305 samples, 0.67%)</title><rect x="68.5506%" y="325" width="0.6666%" height="15" fill="rgb(208,107,27)" fg:x="31366" fg:w="305"/><text x="68.8006%" y="335.50"></text></g><g><title>neural_network.exe`core::slice::iter::IterMut&lt;f64&gt;::post_inc_start (183 samples, 0.40%)</title><rect x="68.8172%" y="309" width="0.3999%" height="15" fill="rgb(205,136,37)" fg:x="31488" fg:w="183"/><text x="69.0672%" y="319.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f64&gt;::add(core::ptr::non_null::NonNull (154 samples, 0.34%)</title><rect x="68.8806%" y="293" width="0.3366%" height="15" fill="rgb(250,205,27)" fg:x="31517" fg:w="154"/><text x="69.1306%" y="303.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (154 samples, 0.34%)</title><rect x="68.8806%" y="277" width="0.3366%" height="15" fill="rgb(210,80,43)" fg:x="31517" fg:w="154"/><text x="69.1306%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::zip(ndarray::iterators::IterMut&lt;f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (15 samples, 0.03%)</title><rect x="69.2172%" y="373" width="0.0328%" height="15" fill="rgb(247,160,36)" fg:x="31671" fg:w="15"/><text x="69.4672%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::arraytraits::impl$9::into_iter(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (15 samples, 0.03%)</title><rect x="69.2172%" y="357" width="0.0328%" height="15" fill="rgb(234,13,49)" fg:x="31671" fg:w="15"/><text x="69.4672%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::iter (15 samples, 0.03%)</title><rect x="69.2172%" y="341" width="0.0328%" height="15" fill="rgb(234,122,0)" fg:x="31671" fg:w="15"/><text x="69.4672%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view (13 samples, 0.03%)</title><rect x="69.2215%" y="325" width="0.0284%" height="15" fill="rgb(207,146,38)" fg:x="31673" fg:w="13"/><text x="69.4715%" y="335.50"></text></g><g><title>kernel32.dll`HeapFreeStub (7 samples, 0.02%)</title><rect x="69.2915%" y="341" width="0.0153%" height="15" fill="rgb(207,177,25)" fg:x="31705" fg:w="7"/><text x="69.5415%" y="351.50"></text></g><g><title>ntdll.dll`RtlAllocateHeap (23 samples, 0.05%)</title><rect x="69.3221%" y="229" width="0.0503%" height="15" fill="rgb(211,178,42)" fg:x="31719" fg:w="23"/><text x="69.5721%" y="239.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (8 samples, 0.02%)</title><rect x="69.5843%" y="197" width="0.0175%" height="15" fill="rgb(230,69,54)" fg:x="31839" fg:w="8"/><text x="69.8343%" y="207.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (168 samples, 0.37%)</title><rect x="69.3068%" y="341" width="0.3672%" height="15" fill="rgb(214,135,41)" fg:x="31712" fg:w="168"/><text x="69.5568%" y="351.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (168 samples, 0.37%)</title><rect x="69.3068%" y="325" width="0.3672%" height="15" fill="rgb(237,67,25)" fg:x="31712" fg:w="168"/><text x="69.5568%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (168 samples, 0.37%)</title><rect x="69.3068%" y="309" width="0.3672%" height="15" fill="rgb(222,189,50)" fg:x="31712" fg:w="168"/><text x="69.5568%" y="319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (168 samples, 0.37%)</title><rect x="69.3068%" y="293" width="0.3672%" height="15" fill="rgb(245,148,34)" fg:x="31712" fg:w="168"/><text x="69.5568%" y="303.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate (167 samples, 0.36%)</title><rect x="69.3089%" y="277" width="0.3650%" height="15" fill="rgb(222,29,6)" fg:x="31713" fg:w="167"/><text x="69.5589%" y="287.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (167 samples, 0.36%)</title><rect x="69.3089%" y="261" width="0.3650%" height="15" fill="rgb(221,189,43)" fg:x="31713" fg:w="167"/><text x="69.5589%" y="271.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc (167 samples, 0.36%)</title><rect x="69.3089%" y="245" width="0.3650%" height="15" fill="rgb(207,36,27)" fg:x="31713" fg:w="167"/><text x="69.5589%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (138 samples, 0.30%)</title><rect x="69.3723%" y="229" width="0.3016%" height="15" fill="rgb(217,90,24)" fg:x="31742" fg:w="138"/><text x="69.6223%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (125 samples, 0.27%)</title><rect x="69.4007%" y="213" width="0.2732%" height="15" fill="rgb(224,66,35)" fg:x="31755" fg:w="125"/><text x="69.6507%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (33 samples, 0.07%)</title><rect x="69.6018%" y="197" width="0.0721%" height="15" fill="rgb(221,13,50)" fg:x="31847" fg:w="33"/><text x="69.8518%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::dgemm (7 samples, 0.02%)</title><rect x="69.6739%" y="341" width="0.0153%" height="15" fill="rgb(236,68,49)" fg:x="31880" fg:w="7"/><text x="69.9239%" y="351.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(matrixmultiply::aligned_alloc::Alloc (5 samples, 0.01%)</title><rect x="69.7023%" y="325" width="0.0109%" height="15" fill="rgb(229,146,28)" fg:x="31893" fg:w="5"/><text x="69.9523%" y="335.50"></text></g><g><title>neural_network.exe`matrixmultiply::aligned_alloc::impl$1::drop(matrixmultiply::aligned_alloc::Alloc (5 samples, 0.01%)</title><rect x="69.7023%" y="309" width="0.0109%" height="15" fill="rgb(225,31,38)" fg:x="31893" fg:w="5"/><text x="69.9523%" y="319.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (5 samples, 0.01%)</title><rect x="69.7023%" y="293" width="0.0109%" height="15" fill="rgb(250,208,3)" fg:x="31893" fg:w="5"/><text x="69.9523%" y="303.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::impl$2::pack_nr(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (7 samples, 0.02%)</title><rect x="69.7133%" y="325" width="0.0153%" height="15" fill="rgb(246,54,23)" fg:x="31898" fg:w="7"/><text x="69.9633%" y="335.50"></text></g><g><title>ntdll.dll`RtlTryEnterCriticalSection (11 samples, 0.02%)</title><rect x="70.0302%" y="213" width="0.0240%" height="15" fill="rgb(243,76,11)" fg:x="32043" fg:w="11"/><text x="70.2802%" y="223.50"></text></g><g><title>ntdll.dll`RtlpFindEntry (16 samples, 0.03%)</title><rect x="70.0542%" y="213" width="0.0350%" height="15" fill="rgb(245,21,50)" fg:x="32054" fg:w="16"/><text x="70.3042%" y="223.50"></text></g><g><title>ntdll.dll`RtlpHeapFindListLookupEntry (11 samples, 0.02%)</title><rect x="70.0651%" y="197" width="0.0240%" height="15" fill="rgb(228,9,43)" fg:x="32059" fg:w="11"/><text x="70.3151%" y="207.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeap (127 samples, 0.28%)</title><rect x="69.8204%" y="229" width="0.2776%" height="15" fill="rgb(208,100,47)" fg:x="31947" fg:w="127"/><text x="70.0704%" y="239.50"></text></g><g><title>neural_network.exe`matrixmultiply::aligned_alloc::Alloc&lt;f64&gt;::new (212 samples, 0.46%)</title><rect x="69.7307%" y="309" width="0.4633%" height="15" fill="rgb(232,26,8)" fg:x="31906" fg:w="212"/><text x="69.9807%" y="319.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (212 samples, 0.46%)</title><rect x="69.7307%" y="293" width="0.4633%" height="15" fill="rgb(216,166,38)" fg:x="31906" fg:w="212"/><text x="69.9807%" y="303.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::impl$0::alloc (211 samples, 0.46%)</title><rect x="69.7329%" y="277" width="0.4611%" height="15" fill="rgb(251,202,51)" fg:x="31907" fg:w="211"/><text x="69.9829%" y="287.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::allocate (211 samples, 0.46%)</title><rect x="69.7329%" y="261" width="0.4611%" height="15" fill="rgb(254,216,34)" fg:x="31907" fg:w="211"/><text x="69.9829%" y="271.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (205 samples, 0.45%)</title><rect x="69.7460%" y="245" width="0.4480%" height="15" fill="rgb(251,32,27)" fg:x="31913" fg:w="205"/><text x="69.9960%" y="255.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (44 samples, 0.10%)</title><rect x="70.0979%" y="229" width="0.0962%" height="15" fill="rgb(208,127,28)" fg:x="32074" fg:w="44"/><text x="70.3479%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (8 samples, 0.02%)</title><rect x="70.1766%" y="213" width="0.0175%" height="15" fill="rgb(224,137,22)" fg:x="32110" fg:w="8"/><text x="70.4266%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::make_packing_buffer (214 samples, 0.47%)</title><rect x="69.7286%" y="325" width="0.4677%" height="15" fill="rgb(254,70,32)" fg:x="31905" fg:w="214"/><text x="69.9786%" y="335.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="70.7951%" y="293" width="0.0153%" height="15" fill="rgb(229,75,37)" fg:x="32393" fg:w="7"/><text x="71.0451%" y="303.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U4,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (318 samples, 0.69%)</title><rect x="70.1963%" y="325" width="0.6950%" height="15" fill="rgb(252,64,23)" fg:x="32119" fg:w="318"/><text x="70.4463%" y="335.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (315 samples, 0.69%)</title><rect x="70.2028%" y="309" width="0.6884%" height="15" fill="rgb(232,162,48)" fg:x="32122" fg:w="315"/><text x="70.4528%" y="319.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (37 samples, 0.08%)</title><rect x="70.8104%" y="293" width="0.0809%" height="15" fill="rgb(246,160,12)" fg:x="32400" fg:w="37"/><text x="71.0604%" y="303.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (37 samples, 0.08%)</title><rect x="70.8104%" y="277" width="0.0809%" height="15" fill="rgb(247,166,0)" fg:x="32400" fg:w="37"/><text x="71.0604%" y="287.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$37::forward_unchecked (16 samples, 0.03%)</title><rect x="70.8563%" y="261" width="0.0350%" height="15" fill="rgb(249,219,21)" fg:x="32421" fg:w="16"/><text x="71.1063%" y="271.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (16 samples, 0.03%)</title><rect x="70.8563%" y="245" width="0.0350%" height="15" fill="rgb(205,209,3)" fg:x="32421" fg:w="16"/><text x="71.1063%" y="255.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed(unsigned long long, unsigned long long, unsigned long long, double, matrixmultiply::ptr::Ptr&lt;ptr_const$&lt;f64&gt; &gt;, matrixmultiply::ptr::Ptr&lt;ptr_const$&lt;f64&gt; &gt;, double, matrixmultiply::ptr::Ptr&lt;ptr_mut$&lt;f64&gt; &gt;, long long, long long, tuple$ (10 samples, 0.02%)</title><rect x="70.8978%" y="293" width="0.0219%" height="15" fill="rgb(243,44,1)" fg:x="32440" fg:w="10"/><text x="71.1478%" y="303.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_const$ (5 samples, 0.01%)</title><rect x="70.9197%" y="293" width="0.0109%" height="15" fill="rgb(206,159,16)" fg:x="32450" fg:w="5"/><text x="71.1697%" y="303.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (4,513 samples, 9.86%)</title><rect x="71.9031%" y="245" width="9.8632%" height="15" fill="rgb(244,77,30)" fg:x="32900" fg:w="4513"/><text x="72.1531%" y="255.50">neural_network..</text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (352 samples, 0.77%)</title><rect x="81.9237%" y="213" width="0.7693%" height="15" fill="rgb(218,69,12)" fg:x="37485" fg:w="352"/><text x="82.1737%" y="223.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (431 samples, 0.94%)</title><rect x="81.7663%" y="245" width="0.9420%" height="15" fill="rgb(212,87,7)" fg:x="37413" fg:w="431"/><text x="82.0163%" y="255.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (431 samples, 0.94%)</title><rect x="81.7663%" y="229" width="0.9420%" height="15" fill="rgb(245,114,25)" fg:x="37413" fg:w="431"/><text x="82.0163%" y="239.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$37::forward_unchecked (7 samples, 0.02%)</title><rect x="82.6930%" y="213" width="0.0153%" height="15" fill="rgb(210,61,42)" fg:x="37837" fg:w="7"/><text x="82.9430%" y="223.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (7 samples, 0.02%)</title><rect x="82.6930%" y="197" width="0.0153%" height="15" fill="rgb(211,52,33)" fg:x="37837" fg:w="7"/><text x="82.9430%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (5,409 samples, 11.82%)</title><rect x="70.9524%" y="277" width="11.8214%" height="15" fill="rgb(234,58,33)" fg:x="32465" fg:w="5409"/><text x="71.2024%" y="287.50">neural_network.exe..</text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (5,399 samples, 11.80%)</title><rect x="70.9743%" y="261" width="11.7995%" height="15" fill="rgb(220,115,36)" fg:x="32475" fg:w="5399"/><text x="71.2243%" y="271.50">neural_network.ex..</text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset (30 samples, 0.07%)</title><rect x="82.7083%" y="245" width="0.0656%" height="15" fill="rgb(243,153,54)" fg:x="37844" fg:w="30"/><text x="82.9583%" y="255.50"></text></g><g><title>neural_network.exe`rawpointer::impl$0::offset (28 samples, 0.06%)</title><rect x="82.7126%" y="229" width="0.0612%" height="15" fill="rgb(251,47,18)" fg:x="37846" fg:w="28"/><text x="82.9626%" y="239.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::offset (28 samples, 0.06%)</title><rect x="82.7126%" y="213" width="0.0612%" height="15" fill="rgb(242,102,42)" fg:x="37846" fg:w="28"/><text x="82.9626%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (5,440 samples, 11.89%)</title><rect x="70.8912%" y="309" width="11.8892%" height="15" fill="rgb(234,31,38)" fg:x="32437" fg:w="5440"/><text x="71.1412%" y="319.50">neural_network.exe..</text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (5,422 samples, 11.85%)</title><rect x="70.9306%" y="293" width="11.8498%" height="15" fill="rgb(221,117,51)" fg:x="32455" fg:w="5422"/><text x="71.1806%" y="303.50">neural_network.exe..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$0(matrixmultiply::gemm::gemm_packed::closure_env$0 (76 samples, 0.17%)</title><rect x="82.8132%" y="277" width="0.1661%" height="15" fill="rgb(212,20,18)" fg:x="37892" fg:w="76"/><text x="83.0632%" y="287.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::with(matrixmultiply::gemm::gemm_packed::closure$0::closure_env$0 (76 samples, 0.17%)</title><rect x="82.8132%" y="261" width="0.1661%" height="15" fill="rgb(245,133,36)" fg:x="37892" fg:w="76"/><text x="83.0632%" y="271.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::try_with(matrixmultiply::gemm::gemm_packed::closure$0::closure_env$0 (76 samples, 0.17%)</title><rect x="82.8132%" y="245" width="0.1661%" height="15" fill="rgb(212,6,19)" fg:x="37892" fg:w="76"/><text x="83.0632%" y="255.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::MASK_BUF::__getit(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;core::cell::UnsafeCell (76 samples, 0.17%)</title><rect x="82.8132%" y="229" width="0.1661%" height="15" fill="rgb(218,1,36)" fg:x="37892" fg:w="76"/><text x="83.0632%" y="239.50"></text></g><g><title>neural_network.exe`std::sys::common::thread_local::fast_local::Key&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::get (76 samples, 0.17%)</title><rect x="82.8132%" y="213" width="0.1661%" height="15" fill="rgb(246,84,54)" fg:x="37892" fg:w="76"/><text x="83.0632%" y="223.50"></text></g><g><title>neural_network.exe`std::sys::common::thread_local::lazy::LazyKeyInner&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt;::get (49 samples, 0.11%)</title><rect x="82.8722%" y="197" width="0.1071%" height="15" fill="rgb(242,110,6)" fg:x="37919" fg:w="49"/><text x="83.1222%" y="207.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;core::cell::UnsafeCell&lt;matrixmultiply::gemm::MaskBuffer&gt; &gt; &gt;::as_ref (49 samples, 0.11%)</title><rect x="82.8722%" y="181" width="0.1071%" height="15" fill="rgb(214,47,5)" fg:x="37919" fg:w="49"/><text x="83.1222%" y="191.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::impl$2::kernel (9 samples, 0.02%)</title><rect x="83.0995%" y="229" width="0.0197%" height="15" fill="rgb(218,159,25)" fg:x="38023" fg:w="9"/><text x="83.3495%" y="239.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (10 samples, 0.02%)</title><rect x="83.1869%" y="181" width="0.0219%" height="15" fill="rgb(215,211,28)" fg:x="38063" fg:w="10"/><text x="83.4369%" y="191.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (27 samples, 0.06%)</title><rect x="83.1869%" y="213" width="0.0590%" height="15" fill="rgb(238,59,32)" fg:x="38063" fg:w="27"/><text x="83.4369%" y="223.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (27 samples, 0.06%)</title><rect x="83.1869%" y="197" width="0.0590%" height="15" fill="rgb(226,82,3)" fg:x="38063" fg:w="27"/><text x="83.4369%" y="207.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$37::forward_unchecked (17 samples, 0.04%)</title><rect x="83.2088%" y="181" width="0.0372%" height="15" fill="rgb(240,164,32)" fg:x="38073" fg:w="17"/><text x="83.4588%" y="191.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (17 samples, 0.04%)</title><rect x="83.2088%" y="165" width="0.0372%" height="15" fill="rgb(232,46,7)" fg:x="38073" fg:w="17"/><text x="83.4588%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_blend_pd (11 samples, 0.02%)</title><rect x="83.4011%" y="181" width="0.0240%" height="15" fill="rgb(229,129,53)" fg:x="38161" fg:w="11"/><text x="83.6511%" y="191.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_pd (704 samples, 1.54%)</title><rect x="83.4317%" y="181" width="1.5386%" height="15" fill="rgb(234,188,29)" fg:x="38175" fg:w="704"/><text x="83.6817%" y="191.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_loadu_pd (10 samples, 0.02%)</title><rect x="84.9703%" y="181" width="0.0219%" height="15" fill="rgb(246,141,4)" fg:x="38879" fg:w="10"/><text x="85.2203%" y="191.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="84.9703%" y="165" width="0.0219%" height="15" fill="rgb(229,23,39)" fg:x="38879" fg:w="10"/><text x="85.2203%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_pd (306 samples, 0.67%)</title><rect x="84.9921%" y="181" width="0.6688%" height="15" fill="rgb(206,12,3)" fg:x="38889" fg:w="306"/><text x="85.2421%" y="191.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_shuffle_pd (150 samples, 0.33%)</title><rect x="85.6609%" y="181" width="0.3278%" height="15" fill="rgb(252,226,20)" fg:x="39195" fg:w="150"/><text x="85.9109%" y="191.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_storeu_pd (9 samples, 0.02%)</title><rect x="85.9887%" y="181" width="0.0197%" height="15" fill="rgb(216,123,35)" fg:x="39345" fg:w="9"/><text x="86.2387%" y="191.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (59 samples, 0.13%)</title><rect x="86.0084%" y="181" width="0.1289%" height="15" fill="rgb(212,68,40)" fg:x="39354" fg:w="59"/><text x="86.2584%" y="191.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (59 samples, 0.13%)</title><rect x="86.0084%" y="165" width="0.1289%" height="15" fill="rgb(254,125,32)" fg:x="39354" fg:w="59"/><text x="86.2584%" y="175.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (40 samples, 0.09%)</title><rect x="86.0499%" y="149" width="0.0874%" height="15" fill="rgb(253,97,22)" fg:x="39373" fg:w="40"/><text x="86.2999%" y="159.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (2,872 samples, 6.28%)</title><rect x="83.2459%" y="213" width="6.2768%" height="15" fill="rgb(241,101,14)" fg:x="38090" fg:w="2872"/><text x="83.4959%" y="223.50">neural_n..</text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_x86_avx (2,814 samples, 6.15%)</title><rect x="83.3727%" y="197" width="6.1500%" height="15" fill="rgb(238,103,29)" fg:x="38148" fg:w="2814"/><text x="83.6227%" y="207.50">neural_n..</text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$3::multiply_add (1,548 samples, 3.38%)</title><rect x="86.1395%" y="181" width="3.3832%" height="15" fill="rgb(233,195,47)" fg:x="39414" fg:w="1548"/><text x="86.3895%" y="191.50">neu..</text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_pd (1,548 samples, 3.38%)</title><rect x="86.1395%" y="165" width="3.3832%" height="15" fill="rgb(246,218,30)" fg:x="39414" fg:w="1548"/><text x="86.3895%" y="175.50">neu..</text></g><g><title>neural_network.exe`matrixmultiply::kernel::impl$1::add_assign (17 samples, 0.04%)</title><rect x="89.5227%" y="213" width="0.0372%" height="15" fill="rgb(219,145,47)" fg:x="40962" fg:w="17"/><text x="89.7727%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (3,024 samples, 6.61%)</title><rect x="82.9793%" y="277" width="6.6090%" height="15" fill="rgb(243,12,26)" fg:x="37968" fg:w="3024"/><text x="83.2293%" y="287.50">neural_ne..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (3,002 samples, 6.56%)</title><rect x="83.0274%" y="261" width="6.5609%" height="15" fill="rgb(214,87,16)" fg:x="37990" fg:w="3002"/><text x="83.2774%" y="271.50">neural_ne..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::masked_kernel&lt;f64,matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;(unsigned long long, double, double*, double*, double, double*, long long, long long, unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (2,992 samples, 6.54%)</title><rect x="83.0492%" y="245" width="6.5390%" height="15" fill="rgb(208,99,42)" fg:x="38000" fg:w="2992"/><text x="83.2992%" y="255.50">neural_ne..</text></g><g><title>neural_network.exe`matrixmultiply::gemm::c_to_masked_ab_beta_c(double, double*, long long, long long, unsigned long long, unsigned long long, ref$&lt;slice2$ (2,960 samples, 6.47%)</title><rect x="83.1192%" y="229" width="6.4691%" height="15" fill="rgb(253,99,2)" fg:x="38032" fg:w="2960"/><text x="83.3692%" y="239.50">neural_n..</text></g><g><title>neural_network.exe`matrixmultiply::kernel::impl$1::mul_assign (13 samples, 0.03%)</title><rect x="89.5598%" y="213" width="0.0284%" height="15" fill="rgb(220,168,23)" fg:x="40979" fg:w="13"/><text x="89.8098%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (8,569 samples, 18.73%)</title><rect x="70.8912%" y="325" width="18.7276%" height="15" fill="rgb(242,38,24)" fg:x="32437" fg:w="8569"/><text x="71.1412%" y="335.50">neural_network.exe`matrixmult..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (3,129 samples, 6.84%)</title><rect x="82.7804%" y="309" width="6.8384%" height="15" fill="rgb(225,182,9)" fg:x="37877" fg:w="3129"/><text x="83.0304%" y="319.50">neural_ne..</text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f64&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (3,128 samples, 6.84%)</title><rect x="82.7826%" y="293" width="6.8363%" height="15" fill="rgb(243,178,37)" fg:x="37878" fg:w="3128"/><text x="83.0326%" y="303.50">neural_ne..</text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (14 samples, 0.03%)</title><rect x="89.5883%" y="277" width="0.0306%" height="15" fill="rgb(232,139,19)" fg:x="40992" fg:w="14"/><text x="89.8383%" y="287.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; (9,128 samples, 19.95%)</title><rect x="69.6892%" y="341" width="19.9493%" height="15" fill="rgb(225,201,24)" fg:x="31887" fg:w="9128"/><text x="69.9392%" y="351.50">neural_network.exe`matrixmultip..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view (7 samples, 0.02%)</title><rect x="89.6494%" y="341" width="0.0153%" height="15" fill="rgb(221,47,46)" fg:x="41020" fg:w="7"/><text x="89.8994%" y="351.50"></text></g><g><title>ntdll.dll`RtlTryEnterCriticalSection (7 samples, 0.02%)</title><rect x="89.8636%" y="293" width="0.0153%" height="15" fill="rgb(249,23,13)" fg:x="41118" fg:w="7"/><text x="90.1136%" y="303.50"></text></g><g><title>ntdll.dll`RtlpFindEntry (28 samples, 0.06%)</title><rect x="89.9161%" y="261" width="0.0612%" height="15" fill="rgb(219,9,5)" fg:x="41142" fg:w="28"/><text x="90.1661%" y="271.50"></text></g><g><title>ntdll.dll`RtlpHeapFindListLookupEntry (26 samples, 0.06%)</title><rect x="89.9204%" y="245" width="0.0568%" height="15" fill="rgb(254,171,16)" fg:x="41144" fg:w="26"/><text x="90.1704%" y="255.50"></text></g><g><title>ntdll.dll`RtlpDeCommitFreeBlock (50 samples, 0.11%)</title><rect x="89.8789%" y="293" width="0.1093%" height="15" fill="rgb(230,171,20)" fg:x="41125" fg:w="50"/><text x="90.1289%" y="303.50"></text></g><g><title>ntdll.dll`RtlpInsertFreeBlock (46 samples, 0.10%)</title><rect x="89.8877%" y="277" width="0.1005%" height="15" fill="rgb(210,71,41)" fg:x="41129" fg:w="46"/><text x="90.1377%" y="287.50"></text></g><g><title>ntdll.dll`RtlpHeapAddListEntry (5 samples, 0.01%)</title><rect x="89.9773%" y="261" width="0.0109%" height="15" fill="rgb(206,173,20)" fg:x="41170" fg:w="5"/><text x="90.2273%" y="271.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (110 samples, 0.24%)</title><rect x="89.7565%" y="309" width="0.2404%" height="15" fill="rgb(233,88,34)" fg:x="41069" fg:w="110"/><text x="90.0065%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::dot(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (9,494 samples, 20.75%)</title><rect x="69.2565%" y="373" width="20.7492%" height="15" fill="rgb(223,209,46)" fg:x="31689" fg:w="9494"/><text x="69.5065%" y="383.50">neural_network.exe`ndarray::Array..</text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (9,492 samples, 20.74%)</title><rect x="69.2609%" y="357" width="20.7448%" height="15" fill="rgb(250,43,18)" fg:x="31691" fg:w="9492"/><text x="69.5109%" y="367.50">neural_network.exe`ndarray::linal..</text></g><g><title>ntdll.dll`RtlFreeHeap (155 samples, 0.34%)</title><rect x="89.6669%" y="341" width="0.3388%" height="15" fill="rgb(208,13,10)" fg:x="41028" fg:w="155"/><text x="89.9169%" y="351.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (140 samples, 0.31%)</title><rect x="89.6997%" y="325" width="0.3060%" height="15" fill="rgb(212,200,36)" fg:x="41043" fg:w="140"/><text x="89.9497%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::iter_mut (8 samples, 0.02%)</title><rect x="90.0057%" y="373" width="0.0175%" height="15" fill="rgb(225,90,30)" fg:x="41183" fg:w="8"/><text x="90.2557%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view_mut (5 samples, 0.01%)</title><rect x="90.0122%" y="357" width="0.0109%" height="15" fill="rgb(236,182,39)" fg:x="41186" fg:w="5"/><text x="90.2622%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::ndim (7 samples, 0.02%)</title><rect x="90.0341%" y="357" width="0.0153%" height="15" fill="rgb(212,144,35)" fg:x="41196" fg:w="7"/><text x="90.2841%" y="367.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (7 samples, 0.02%)</title><rect x="90.0341%" y="341" width="0.0153%" height="15" fill="rgb(228,63,44)" fg:x="41196" fg:w="7"/><text x="90.2841%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (7 samples, 0.02%)</title><rect x="90.0341%" y="325" width="0.0153%" height="15" fill="rgb(228,109,6)" fg:x="41196" fg:w="7"/><text x="90.2841%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$5::add&lt;f64,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (41 samples, 0.09%)</title><rect x="90.0232%" y="373" width="0.0896%" height="15" fill="rgb(238,117,24)" fg:x="41191" fg:w="41"/><text x="90.2732%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (28 samples, 0.06%)</title><rect x="90.0516%" y="357" width="0.0612%" height="15" fill="rgb(242,26,26)" fg:x="41204" fg:w="28"/><text x="90.3016%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::clone_iopf::closure$0(ndarray::impl_ops::arithmetic_ops::clone_iopf::closure_env$0&lt;f64,f64,f64 (*) (5 samples, 0.01%)</title><rect x="90.1018%" y="341" width="0.0109%" height="15" fill="rgb(221,92,48)" fg:x="41227" fg:w="5"/><text x="90.3518%" y="351.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (10 samples, 0.02%)</title><rect x="90.2701%" y="197" width="0.0219%" height="15" fill="rgb(209,209,32)" fg:x="41304" fg:w="10"/><text x="90.5201%" y="207.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (78 samples, 0.17%)</title><rect x="90.1324%" y="293" width="0.1705%" height="15" fill="rgb(221,70,22)" fg:x="41241" fg:w="78"/><text x="90.3824%" y="303.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (78 samples, 0.17%)</title><rect x="90.1324%" y="277" width="0.1705%" height="15" fill="rgb(248,145,5)" fg:x="41241" fg:w="78"/><text x="90.3824%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (78 samples, 0.17%)</title><rect x="90.1324%" y="261" width="0.1705%" height="15" fill="rgb(226,116,26)" fg:x="41241" fg:w="78"/><text x="90.3824%" y="271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (78 samples, 0.17%)</title><rect x="90.1324%" y="245" width="0.1705%" height="15" fill="rgb(244,5,17)" fg:x="41241" fg:w="78"/><text x="90.3824%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (69 samples, 0.15%)</title><rect x="90.1521%" y="229" width="0.1508%" height="15" fill="rgb(252,159,33)" fg:x="41250" fg:w="69"/><text x="90.4021%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (54 samples, 0.12%)</title><rect x="90.1849%" y="213" width="0.1180%" height="15" fill="rgb(206,71,0)" fg:x="41265" fg:w="54"/><text x="90.4349%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (5 samples, 0.01%)</title><rect x="90.2920%" y="197" width="0.0109%" height="15" fill="rgb(233,118,54)" fg:x="41314" fg:w="5"/><text x="90.5420%" y="207.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(ref$&lt;f64&gt;)&gt;(double (*) (90 samples, 0.20%)</title><rect x="90.1150%" y="341" width="0.1967%" height="15" fill="rgb(234,83,48)" fg:x="41233" fg:w="90"/><text x="90.3650%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, double (*) (83 samples, 0.18%)</title><rect x="90.1303%" y="325" width="0.1814%" height="15" fill="rgb(228,3,54)" fg:x="41240" fg:w="83"/><text x="90.3803%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, double (*) (82 samples, 0.18%)</title><rect x="90.1324%" y="309" width="0.1792%" height="15" fill="rgb(226,155,13)" fg:x="41241" fg:w="82"/><text x="90.3824%" y="319.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (6 samples, 0.01%)</title><rect x="90.4231%" y="197" width="0.0131%" height="15" fill="rgb(241,28,37)" fg:x="41374" fg:w="6"/><text x="90.6731%" y="207.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (52 samples, 0.11%)</title><rect x="90.3335%" y="293" width="0.1136%" height="15" fill="rgb(233,93,10)" fg:x="41333" fg:w="52"/><text x="90.5835%" y="303.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (52 samples, 0.11%)</title><rect x="90.3335%" y="277" width="0.1136%" height="15" fill="rgb(225,113,19)" fg:x="41333" fg:w="52"/><text x="90.5835%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (52 samples, 0.11%)</title><rect x="90.3335%" y="261" width="0.1136%" height="15" fill="rgb(241,2,18)" fg:x="41333" fg:w="52"/><text x="90.5835%" y="271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (52 samples, 0.11%)</title><rect x="90.3335%" y="245" width="0.1136%" height="15" fill="rgb(228,207,21)" fg:x="41333" fg:w="52"/><text x="90.5835%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (43 samples, 0.09%)</title><rect x="90.3532%" y="229" width="0.0940%" height="15" fill="rgb(213,211,35)" fg:x="41342" fg:w="43"/><text x="90.6032%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (35 samples, 0.08%)</title><rect x="90.3707%" y="213" width="0.0765%" height="15" fill="rgb(209,83,10)" fg:x="41350" fg:w="35"/><text x="90.6207%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (5 samples, 0.01%)</title><rect x="90.4362%" y="197" width="0.0109%" height="15" fill="rgb(209,164,1)" fg:x="41380" fg:w="5"/><text x="90.6862%" y="207.50"></text></g><g><title>neural_network.exe`core::ptr::write (5 samples, 0.01%)</title><rect x="90.4515%" y="261" width="0.0109%" height="15" fill="rgb(213,184,43)" fg:x="41387" fg:w="5"/><text x="90.7015%" y="271.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$1::neg(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (324 samples, 0.71%)</title><rect x="90.1150%" y="357" width="0.7081%" height="15" fill="rgb(231,61,34)" fg:x="41233" fg:w="324"/><text x="90.3650%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(f64)&gt; &gt;(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (234 samples, 0.51%)</title><rect x="90.3117%" y="341" width="0.5114%" height="15" fill="rgb(235,75,3)" fg:x="41323" fg:w="234"/><text x="90.5617%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (224 samples, 0.49%)</title><rect x="90.3335%" y="325" width="0.4896%" height="15" fill="rgb(220,106,47)" fg:x="41333" fg:w="224"/><text x="90.5835%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (224 samples, 0.49%)</title><rect x="90.3335%" y="309" width="0.4896%" height="15" fill="rgb(210,196,33)" fg:x="41333" fg:w="224"/><text x="90.5835%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (172 samples, 0.38%)</title><rect x="90.4472%" y="293" width="0.3759%" height="15" fill="rgb(229,154,42)" fg:x="41385" fg:w="172"/><text x="90.6972%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped::closure$0(ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(f64)&gt;,f64&gt;*, tuple$ (170 samples, 0.37%)</title><rect x="90.4515%" y="277" width="0.3715%" height="15" fill="rgb(228,114,26)" fg:x="41387" fg:w="170"/><text x="90.7015%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::mapv::closure$0(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (165 samples, 0.36%)</title><rect x="90.4625%" y="261" width="0.3606%" height="15" fill="rgb(208,144,1)" fg:x="41392" fg:w="165"/><text x="90.7125%" y="271.50"></text></g><g><title>neural_network.exe`core::ops::function::FnMut::call_mut(double (**) (165 samples, 0.36%)</title><rect x="90.4625%" y="245" width="0.3606%" height="15" fill="rgb(239,112,37)" fg:x="41392" fg:w="165"/><text x="90.7125%" y="255.50"></text></g><g><title>neural_network.exe`std::f64::impl$0::exp (165 samples, 0.36%)</title><rect x="90.4625%" y="229" width="0.3606%" height="15" fill="rgb(210,96,50)" fg:x="41392" fg:w="165"/><text x="90.7125%" y="239.50"></text></g><g><title>ucrtbase.dll`exp (155 samples, 0.34%)</title><rect x="90.4843%" y="213" width="0.3388%" height="15" fill="rgb(222,178,2)" fg:x="41402" fg:w="155"/><text x="90.7343%" y="223.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;f64&gt;, ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (16 samples, 0.03%)</title><rect x="90.8362%" y="325" width="0.0350%" height="15" fill="rgb(226,74,18)" fg:x="41563" fg:w="16"/><text x="91.0862%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$326::div::closure$0(ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (13 samples, 0.03%)</title><rect x="90.8427%" y="309" width="0.0284%" height="15" fill="rgb(225,67,54)" fg:x="41566" fg:w="13"/><text x="91.0927%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (21 samples, 0.05%)</title><rect x="90.8318%" y="341" width="0.0459%" height="15" fill="rgb(251,92,32)" fg:x="41561" fg:w="21"/><text x="91.0818%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;f64&gt;, ndarray::impl_ops::arithmetic_ops::impl$8::add::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (8 samples, 0.02%)</title><rect x="90.8843%" y="309" width="0.0175%" height="15" fill="rgb(228,149,22)" fg:x="41585" fg:w="8"/><text x="91.1343%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$8::add::closure$0(ndarray::impl_ops::arithmetic_ops::impl$8::add::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="90.8886%" y="293" width="0.0131%" height="15" fill="rgb(243,54,13)" fg:x="41587" fg:w="6"/><text x="91.1386%" y="303.50"></text></g><g><title>neural_network.exe`neural_network::sigmoid(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (366 samples, 0.80%)</title><rect x="90.1128%" y="373" width="0.7999%" height="15" fill="rgb(243,180,28)" fg:x="41232" fg:w="366"/><text x="90.3628%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$326::div(double, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (41 samples, 0.09%)</title><rect x="90.8231%" y="357" width="0.0896%" height="15" fill="rgb(208,167,24)" fg:x="41557" fg:w="41"/><text x="91.0731%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$8::add&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64&gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (16 samples, 0.03%)</title><rect x="90.8777%" y="341" width="0.0350%" height="15" fill="rgb(245,73,45)" fg:x="41582" fg:w="16"/><text x="91.1277%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace(ndarray::impl_ops::arithmetic_ops::impl$8::add::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (13 samples, 0.03%)</title><rect x="90.8843%" y="325" width="0.0284%" height="15" fill="rgb(237,203,48)" fg:x="41585" fg:w="13"/><text x="91.1343%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (5 samples, 0.01%)</title><rect x="90.9017%" y="309" width="0.0109%" height="15" fill="rgb(211,197,16)" fg:x="41593" fg:w="5"/><text x="91.1517%" y="319.50"></text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::feed_forward(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (11,447 samples, 25.02%)</title><rect x="66.1443%" y="389" width="25.0175%" height="15" fill="rgb(243,99,51)" fg:x="30265" fg:w="11447"/><text x="66.3943%" y="399.50">neural_network.exe`neural_network::Mnist..</text></g><g><title>ntdll.dll`RtlFreeHeap (112 samples, 0.24%)</title><rect x="90.9170%" y="373" width="0.2448%" height="15" fill="rgb(215,123,29)" fg:x="41600" fg:w="112"/><text x="91.1670%" y="383.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (101 samples, 0.22%)</title><rect x="90.9411%" y="357" width="0.2207%" height="15" fill="rgb(239,186,37)" fg:x="41611" fg:w="101"/><text x="91.1911%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (5 samples, 0.01%)</title><rect x="91.1924%" y="325" width="0.0109%" height="15" fill="rgb(252,136,39)" fg:x="41726" fg:w="5"/><text x="91.4424%" y="335.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (6 samples, 0.01%)</title><rect x="91.2864%" y="213" width="0.0131%" height="15" fill="rgb(223,213,32)" fg:x="41769" fg:w="6"/><text x="91.5364%" y="223.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (46 samples, 0.10%)</title><rect x="91.2033%" y="309" width="0.1005%" height="15" fill="rgb(233,115,5)" fg:x="41731" fg:w="46"/><text x="91.4533%" y="319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (46 samples, 0.10%)</title><rect x="91.2033%" y="293" width="0.1005%" height="15" fill="rgb(207,226,44)" fg:x="41731" fg:w="46"/><text x="91.4533%" y="303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (46 samples, 0.10%)</title><rect x="91.2033%" y="277" width="0.1005%" height="15" fill="rgb(208,126,0)" fg:x="41731" fg:w="46"/><text x="91.4533%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (46 samples, 0.10%)</title><rect x="91.2033%" y="261" width="0.1005%" height="15" fill="rgb(244,66,21)" fg:x="41731" fg:w="46"/><text x="91.4533%" y="271.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (40 samples, 0.09%)</title><rect x="91.2165%" y="245" width="0.0874%" height="15" fill="rgb(222,97,12)" fg:x="41737" fg:w="40"/><text x="91.4665%" y="255.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (33 samples, 0.07%)</title><rect x="91.2318%" y="229" width="0.0721%" height="15" fill="rgb(219,213,19)" fg:x="41744" fg:w="33"/><text x="91.4818%" y="239.50"></text></g><g><title>neural_network.exe`core::ptr::write (5 samples, 0.01%)</title><rect x="91.3104%" y="277" width="0.0109%" height="15" fill="rgb(252,169,30)" fg:x="41780" fg:w="5"/><text x="91.5604%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,neural_network::sigmoid_prime::closure_env$0&gt; &gt;(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (73 samples, 0.16%)</title><rect x="91.1749%" y="357" width="0.1595%" height="15" fill="rgb(206,32,51)" fg:x="41718" fg:w="73"/><text x="91.4249%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (65 samples, 0.14%)</title><rect x="91.1924%" y="341" width="0.1421%" height="15" fill="rgb(250,172,42)" fg:x="41726" fg:w="65"/><text x="91.4424%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (60 samples, 0.13%)</title><rect x="91.2033%" y="325" width="0.1311%" height="15" fill="rgb(209,34,43)" fg:x="41731" fg:w="60"/><text x="91.4533%" y="335.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (14 samples, 0.03%)</title><rect x="91.3039%" y="309" width="0.0306%" height="15" fill="rgb(223,11,35)" fg:x="41777" fg:w="14"/><text x="91.5539%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped::closure$0(ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,neural_network::sigmoid_prime::closure_env$0&gt;,f64&gt;*, tuple$ (11 samples, 0.02%)</title><rect x="91.3104%" y="293" width="0.0240%" height="15" fill="rgb(251,219,26)" fg:x="41780" fg:w="11"/><text x="91.5604%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::mapv::closure$0(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="91.3214%" y="277" width="0.0131%" height="15" fill="rgb(231,119,3)" fg:x="41785" fg:w="6"/><text x="91.5714%" y="287.50"></text></g><g><title>neural_network.exe`neural_network::sigmoid_prime::closure$0 (6 samples, 0.01%)</title><rect x="91.3214%" y="261" width="0.0131%" height="15" fill="rgb(216,97,11)" fg:x="41785" fg:w="6"/><text x="91.5714%" y="271.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::mapv (104 samples, 0.23%)</title><rect x="91.1706%" y="373" width="0.2273%" height="15" fill="rgb(223,59,9)" fg:x="41716" fg:w="104"/><text x="91.4206%" y="383.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (28 samples, 0.06%)</title><rect x="91.3367%" y="357" width="0.0612%" height="15" fill="rgb(233,93,31)" fg:x="41792" fg:w="28"/><text x="91.5867%" y="367.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (25 samples, 0.05%)</title><rect x="91.3432%" y="341" width="0.0546%" height="15" fill="rgb(239,81,33)" fg:x="41795" fg:w="25"/><text x="91.5932%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order (6 samples, 0.01%)</title><rect x="91.4153%" y="325" width="0.0131%" height="15" fill="rgb(213,120,34)" fg:x="41828" fg:w="6"/><text x="91.6653%" y="335.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (47 samples, 0.10%)</title><rect x="91.4350%" y="293" width="0.1027%" height="15" fill="rgb(243,49,53)" fg:x="41837" fg:w="47"/><text x="91.6850%" y="303.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (47 samples, 0.10%)</title><rect x="91.4350%" y="277" width="0.1027%" height="15" fill="rgb(247,216,33)" fg:x="41837" fg:w="47"/><text x="91.6850%" y="287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (47 samples, 0.10%)</title><rect x="91.4350%" y="261" width="0.1027%" height="15" fill="rgb(226,26,14)" fg:x="41837" fg:w="47"/><text x="91.6850%" y="271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (47 samples, 0.10%)</title><rect x="91.4350%" y="245" width="0.1027%" height="15" fill="rgb(215,49,53)" fg:x="41837" fg:w="47"/><text x="91.6850%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (40 samples, 0.09%)</title><rect x="91.4503%" y="229" width="0.0874%" height="15" fill="rgb(245,162,40)" fg:x="41844" fg:w="40"/><text x="91.7003%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (29 samples, 0.06%)</title><rect x="91.4743%" y="213" width="0.0634%" height="15" fill="rgb(229,68,17)" fg:x="41855" fg:w="29"/><text x="91.7243%" y="223.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(ref$&lt;f64&gt;)&gt;(double (*) (65 samples, 0.14%)</title><rect x="91.4066%" y="341" width="0.1421%" height="15" fill="rgb(213,182,10)" fg:x="41824" fg:w="65"/><text x="91.6566%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, double (*) (55 samples, 0.12%)</title><rect x="91.4284%" y="325" width="0.1202%" height="15" fill="rgb(245,125,30)" fg:x="41834" fg:w="55"/><text x="91.6784%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, double (*) (52 samples, 0.11%)</title><rect x="91.4350%" y="309" width="0.1136%" height="15" fill="rgb(232,202,2)" fg:x="41837" fg:w="52"/><text x="91.6850%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,f64 (*)(ref$ (5 samples, 0.01%)</title><rect x="91.5377%" y="293" width="0.0109%" height="15" fill="rgb(237,140,51)" fg:x="41884" fg:w="5"/><text x="91.7877%" y="303.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;usize&gt; &gt;*, ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="91.5661%" y="325" width="0.0306%" height="15" fill="rgb(236,157,25)" fg:x="41897" fg:w="14"/><text x="91.8161%" y="335.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="91.5661%" y="309" width="0.0306%" height="15" fill="rgb(219,209,0)" fg:x="41897" fg:w="14"/><text x="91.8161%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="91.5661%" y="293" width="0.0306%" height="15" fill="rgb(240,116,54)" fg:x="41897" fg:w="14"/><text x="91.8161%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::into_dimensionality(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="91.5967%" y="325" width="0.0131%" height="15" fill="rgb(216,10,36)" fg:x="41911" fg:w="6"/><text x="91.8467%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (5 samples, 0.01%)</title><rect x="91.6098%" y="325" width="0.0109%" height="15" fill="rgb(222,72,44)" fg:x="41917" fg:w="5"/><text x="91.8598%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_collect(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (5 samples, 0.01%)</title><rect x="91.6208%" y="325" width="0.0109%" height="15" fill="rgb(232,159,9)" fg:x="41922" fg:w="5"/><text x="91.8708%" y="335.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (5 samples, 0.01%)</title><rect x="91.7038%" y="165" width="0.0109%" height="15" fill="rgb(210,39,32)" fg:x="41960" fg:w="5"/><text x="91.9538%" y="175.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f64&gt;,alloc::alloc::Global&gt;::with_capacity (36 samples, 0.08%)</title><rect x="91.6448%" y="261" width="0.0787%" height="15" fill="rgb(216,194,45)" fg:x="41933" fg:w="36"/><text x="91.8948%" y="271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f64&gt;,alloc::alloc::Global&gt;::with_capacity_in (36 samples, 0.08%)</title><rect x="91.6448%" y="245" width="0.0787%" height="15" fill="rgb(218,18,35)" fg:x="41933" fg:w="36"/><text x="91.8948%" y="255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f64&gt;,alloc::alloc::Global&gt;::with_capacity_in (36 samples, 0.08%)</title><rect x="91.6448%" y="229" width="0.0787%" height="15" fill="rgb(207,83,51)" fg:x="41933" fg:w="36"/><text x="91.8948%" y="239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f64&gt;,alloc::alloc::Global&gt;::allocate_in (36 samples, 0.08%)</title><rect x="91.6448%" y="213" width="0.0787%" height="15" fill="rgb(225,63,43)" fg:x="41933" fg:w="36"/><text x="91.8948%" y="223.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (32 samples, 0.07%)</title><rect x="91.6536%" y="197" width="0.0699%" height="15" fill="rgb(207,57,36)" fg:x="41937" fg:w="32"/><text x="91.9036%" y="207.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (28 samples, 0.06%)</title><rect x="91.6623%" y="181" width="0.0612%" height="15" fill="rgb(216,99,33)" fg:x="41941" fg:w="28"/><text x="91.9123%" y="191.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;core::mem::maybe_uninit::MaybeUninit&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::raw_view_mut_unchecked (45 samples, 0.10%)</title><rect x="91.6361%" y="293" width="0.0983%" height="15" fill="rgb(225,42,16)" fg:x="41929" fg:w="45"/><text x="91.8861%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::uninit&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,f64,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$ (44 samples, 0.10%)</title><rect x="91.6383%" y="277" width="0.0962%" height="15" fill="rgb(220,201,45)" fg:x="41930" fg:w="44"/><text x="91.8883%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::collect_with_partial&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*)(f64,f64)&gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (79 samples, 0.17%)</title><rect x="91.7344%" y="293" width="0.1727%" height="15" fill="rgb(225,33,4)" fg:x="41974" fg:w="79"/><text x="91.9844%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (77 samples, 0.17%)</title><rect x="91.7388%" y="277" width="0.1683%" height="15" fill="rgb(224,33,50)" fg:x="41976" fg:w="77"/><text x="91.9888%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each_core(tuple$&lt;&gt;, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (77 samples, 0.17%)</title><rect x="91.7388%" y="261" width="0.1683%" height="15" fill="rgb(246,198,51)" fg:x="41976" fg:w="77"/><text x="91.9888%" y="271.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each_core_contiguous(tuple$&lt;&gt;, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (77 samples, 0.17%)</title><rect x="91.7388%" y="245" width="0.1683%" height="15" fill="rgb(205,22,4)" fg:x="41976" fg:w="77"/><text x="91.9888%" y="255.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::inner(tuple$&lt;&gt;, tuple$&lt;ptr_mut$&lt;f64&gt;,ptr_mut$&lt;f64&gt;,ptr_mut$&lt;f64&gt; &gt;, tuple$&lt;isize,isize,isize&gt;, unsigned long long, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (77 samples, 0.17%)</title><rect x="91.7388%" y="229" width="0.1683%" height="15" fill="rgb(206,3,8)" fg:x="41976" fg:w="77"/><text x="91.9888%" y="239.50"></text></g><g><title>neural_network.exe`ndarray::zip::impl$29::for_each::closure$0(ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*)(f64,f64)&gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;f64&gt;,ref$&lt;f64&gt;,ptr_mut$ (74 samples, 0.16%)</title><rect x="91.7453%" y="213" width="0.1617%" height="15" fill="rgb(251,23,15)" fg:x="41979" fg:w="74"/><text x="91.9953%" y="223.50"></text></g><g><title>neural_network.exe`ndarray::zip::impl$42::collect_with_partial::closure$0(ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f64,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (71 samples, 0.16%)</title><rect x="91.7519%" y="197" width="0.1552%" height="15" fill="rgb(252,88,28)" fg:x="41982" fg:w="71"/><text x="92.0019%" y="207.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::clone_opf::closure$0(ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (70 samples, 0.15%)</title><rect x="91.7541%" y="181" width="0.1530%" height="15" fill="rgb(212,127,14)" fg:x="41983" fg:w="70"/><text x="92.0041%" y="191.50"></text></g><g><title>neural_network.exe`core::ops::function::Fn::call(double (**) (70 samples, 0.15%)</title><rect x="91.7541%" y="165" width="0.1530%" height="15" fill="rgb(247,145,37)" fg:x="41983" fg:w="70"/><text x="92.0041%" y="175.50"></text></g><g><title>neural_network.exe`core::ops::arith::impl$69::sub (70 samples, 0.15%)</title><rect x="91.7541%" y="149" width="0.1530%" height="15" fill="rgb(209,117,53)" fg:x="41983" fg:w="70"/><text x="92.0041%" y="159.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$13::sub&lt;f64,f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (173 samples, 0.38%)</title><rect x="91.5486%" y="341" width="0.3781%" height="15" fill="rgb(212,90,42)" fg:x="41889" fg:w="173"/><text x="91.7986%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_collect_owned&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,f64,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*)(f64,f64)&gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (135 samples, 0.30%)</title><rect x="91.6317%" y="325" width="0.2950%" height="15" fill="rgb(218,164,37)" fg:x="41927" fg:w="135"/><text x="91.8817%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::build_uninit(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::zip::impl$26::map_collect_owned::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,f64,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*) (133 samples, 0.29%)</title><rect x="91.6361%" y="309" width="0.2907%" height="15" fill="rgb(246,65,34)" fg:x="41929" fg:w="133"/><text x="91.8861%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::zip::impl$26::map_collect_owned::closure$0(ndarray::zip::impl$26::map_collect_owned::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt;,f64,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f64,f64,f64,f64 (*)(f64,f64)&gt; &gt;, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;core::mem::maybe_uninit::MaybeUninit&lt;f64&gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (9 samples, 0.02%)</title><rect x="91.9071%" y="293" width="0.0197%" height="15" fill="rgb(231,100,33)" fg:x="42053" fg:w="9"/><text x="92.1571%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::and&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (8 samples, 0.02%)</title><rect x="91.9093%" y="277" width="0.0175%" height="15" fill="rgb(228,126,14)" fg:x="42054" fg:w="8"/><text x="92.1593%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::build_and(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (8 samples, 0.02%)</title><rect x="91.9093%" y="261" width="0.0175%" height="15" fill="rgb(215,173,21)" fg:x="42054" fg:w="8"/><text x="92.1593%" y="271.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;f64&gt;, ndarray::impl_ops::arithmetic_ops::impl$8::add::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (9 samples, 0.02%)</title><rect x="91.9267%" y="309" width="0.0197%" height="15" fill="rgb(210,6,40)" fg:x="42062" fg:w="9"/><text x="92.1767%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$8::add::closure$0(ndarray::impl_ops::arithmetic_ops::impl$8::add::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (6 samples, 0.01%)</title><rect x="91.9333%" y="293" width="0.0131%" height="15" fill="rgb(212,48,18)" fg:x="42065" fg:w="6"/><text x="92.1833%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (5 samples, 0.01%)</title><rect x="91.9661%" y="229" width="0.0109%" height="15" fill="rgb(230,214,11)" fg:x="42080" fg:w="5"/><text x="92.2161%" y="239.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (11 samples, 0.02%)</title><rect x="92.0426%" y="117" width="0.0240%" height="15" fill="rgb(254,105,39)" fg:x="42115" fg:w="11"/><text x="92.2926%" y="127.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (47 samples, 0.10%)</title><rect x="91.9770%" y="213" width="0.1027%" height="15" fill="rgb(245,158,5)" fg:x="42085" fg:w="47"/><text x="92.2270%" y="223.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (47 samples, 0.10%)</title><rect x="91.9770%" y="197" width="0.1027%" height="15" fill="rgb(249,208,11)" fg:x="42085" fg:w="47"/><text x="92.2270%" y="207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (47 samples, 0.10%)</title><rect x="91.9770%" y="181" width="0.1027%" height="15" fill="rgb(210,39,28)" fg:x="42085" fg:w="47"/><text x="92.2270%" y="191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (47 samples, 0.10%)</title><rect x="91.9770%" y="165" width="0.1027%" height="15" fill="rgb(211,56,53)" fg:x="42085" fg:w="47"/><text x="92.2270%" y="175.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (40 samples, 0.09%)</title><rect x="91.9923%" y="149" width="0.0874%" height="15" fill="rgb(226,201,30)" fg:x="42092" fg:w="40"/><text x="92.2423%" y="159.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (37 samples, 0.08%)</title><rect x="91.9989%" y="133" width="0.0809%" height="15" fill="rgb(239,101,34)" fg:x="42095" fg:w="37"/><text x="92.2489%" y="143.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (6 samples, 0.01%)</title><rect x="92.0666%" y="117" width="0.0131%" height="15" fill="rgb(226,209,5)" fg:x="42126" fg:w="6"/><text x="92.3166%" y="127.50"></text></g><g><title>neural_network.exe`core::ptr::write (11 samples, 0.02%)</title><rect x="92.0819%" y="181" width="0.0240%" height="15" fill="rgb(250,105,47)" fg:x="42133" fg:w="11"/><text x="92.3319%" y="191.50"></text></g><g><title>neural_network.exe`exp (8 samples, 0.02%)</title><rect x="92.1169%" y="133" width="0.0175%" height="15" fill="rgb(230,72,3)" fg:x="42149" fg:w="8"/><text x="92.3669%" y="143.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(f64)&gt; &gt;(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (233 samples, 0.51%)</title><rect x="91.9508%" y="261" width="0.5092%" height="15" fill="rgb(232,218,39)" fg:x="42073" fg:w="233"/><text x="92.2008%" y="271.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_trusted_iter_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (226 samples, 0.49%)</title><rect x="91.9661%" y="245" width="0.4939%" height="15" fill="rgb(248,166,6)" fg:x="42080" fg:w="226"/><text x="92.2161%" y="255.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped(core::slice::iter::Iter&lt;f64&gt;, ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (221 samples, 0.48%)</title><rect x="91.9770%" y="229" width="0.4830%" height="15" fill="rgb(247,89,20)" fg:x="42085" fg:w="221"/><text x="92.2270%" y="239.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;f64&gt;, tuple$&lt;&gt;, ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (174 samples, 0.38%)</title><rect x="92.0797%" y="213" width="0.3803%" height="15" fill="rgb(248,130,54)" fg:x="42132" fg:w="174"/><text x="92.3297%" y="223.50"></text></g><g><title>neural_network.exe`ndarray::iterators::to_vec_mapped::closure$0(ndarray::iterators::to_vec_mapped::closure_env$0&lt;core::slice::iter::Iter&lt;f64&gt;,ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*)(f64)&gt;,f64&gt;*, tuple$ (173 samples, 0.38%)</title><rect x="92.0819%" y="197" width="0.3781%" height="15" fill="rgb(234,196,4)" fg:x="42133" fg:w="173"/><text x="92.3319%" y="207.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::mapv::closure$0(ndarray::impl_methods::impl$0::mapv::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f64,f64 (*) (162 samples, 0.35%)</title><rect x="92.1060%" y="181" width="0.3541%" height="15" fill="rgb(250,143,31)" fg:x="42144" fg:w="162"/><text x="92.3560%" y="191.50"></text></g><g><title>neural_network.exe`core::ops::function::FnMut::call_mut(double (**) (162 samples, 0.35%)</title><rect x="92.1060%" y="165" width="0.3541%" height="15" fill="rgb(211,110,34)" fg:x="42144" fg:w="162"/><text x="92.3560%" y="175.50"></text></g><g><title>neural_network.exe`std::f64::impl$0::exp (162 samples, 0.35%)</title><rect x="92.1060%" y="149" width="0.3541%" height="15" fill="rgb(215,124,48)" fg:x="42144" fg:w="162"/><text x="92.3560%" y="159.50"></text></g><g><title>ucrtbase.dll`exp (149 samples, 0.33%)</title><rect x="92.1344%" y="133" width="0.3256%" height="15" fill="rgb(216,46,13)" fg:x="42157" fg:w="149"/><text x="92.3844%" y="143.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (238 samples, 0.52%)</title><rect x="91.9464%" y="293" width="0.5202%" height="15" fill="rgb(205,184,25)" fg:x="42071" fg:w="238"/><text x="92.1964%" y="303.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (238 samples, 0.52%)</title><rect x="91.9464%" y="277" width="0.5202%" height="15" fill="rgb(228,1,10)" fg:x="42071" fg:w="238"/><text x="92.1964%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$8::add(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (249 samples, 0.54%)</title><rect x="91.9267%" y="341" width="0.5442%" height="15" fill="rgb(213,116,27)" fg:x="42062" fg:w="249"/><text x="92.1767%" y="351.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace(ndarray::impl_ops::arithmetic_ops::impl$8::add::closure_env$0&lt;f64,ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (249 samples, 0.54%)</title><rect x="91.9267%" y="325" width="0.5442%" height="15" fill="rgb(241,95,50)" fg:x="42062" fg:w="249"/><text x="92.1767%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (240 samples, 0.52%)</title><rect x="91.9464%" y="309" width="0.5245%" height="15" fill="rgb(238,48,32)" fg:x="42071" fg:w="240"/><text x="92.1964%" y="319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (23 samples, 0.05%)</title><rect x="92.4862%" y="325" width="0.0503%" height="15" fill="rgb(235,113,49)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="335.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (23 samples, 0.05%)</title><rect x="92.4862%" y="309" width="0.0503%" height="15" fill="rgb(205,127,43)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (23 samples, 0.05%)</title><rect x="92.4862%" y="293" width="0.0503%" height="15" fill="rgb(250,162,2)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (23 samples, 0.05%)</title><rect x="92.4862%" y="277" width="0.0503%" height="15" fill="rgb(220,13,41)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="287.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate (23 samples, 0.05%)</title><rect x="92.4862%" y="261" width="0.0503%" height="15" fill="rgb(249,221,25)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="271.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (23 samples, 0.05%)</title><rect x="92.4862%" y="245" width="0.0503%" height="15" fill="rgb(215,208,19)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="255.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc (23 samples, 0.05%)</title><rect x="92.4862%" y="229" width="0.0503%" height="15" fill="rgb(236,175,2)" fg:x="42318" fg:w="23"/><text x="92.7362%" y="239.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (20 samples, 0.04%)</title><rect x="92.4928%" y="213" width="0.0437%" height="15" fill="rgb(241,52,2)" fg:x="42321" fg:w="20"/><text x="92.7428%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (14 samples, 0.03%)</title><rect x="92.5059%" y="197" width="0.0306%" height="15" fill="rgb(248,140,14)" fg:x="42327" fg:w="14"/><text x="92.7559%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::aligned_alloc::Alloc&lt;f64&gt;::new (57 samples, 0.12%)</title><rect x="92.5518%" y="293" width="0.1246%" height="15" fill="rgb(253,22,42)" fg:x="42348" fg:w="57"/><text x="92.8018%" y="303.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (56 samples, 0.12%)</title><rect x="92.5540%" y="277" width="0.1224%" height="15" fill="rgb(234,61,47)" fg:x="42349" fg:w="56"/><text x="92.8040%" y="287.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::impl$0::alloc (56 samples, 0.12%)</title><rect x="92.5540%" y="261" width="0.1224%" height="15" fill="rgb(208,226,15)" fg:x="42349" fg:w="56"/><text x="92.8040%" y="271.50"></text></g><g><title>neural_network.exe`std::sys::windows::alloc::allocate (56 samples, 0.12%)</title><rect x="92.5540%" y="245" width="0.1224%" height="15" fill="rgb(217,221,4)" fg:x="42349" fg:w="56"/><text x="92.8040%" y="255.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (53 samples, 0.12%)</title><rect x="92.5605%" y="229" width="0.1158%" height="15" fill="rgb(212,174,34)" fg:x="42352" fg:w="53"/><text x="92.8105%" y="239.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (39 samples, 0.09%)</title><rect x="92.5911%" y="213" width="0.0852%" height="15" fill="rgb(253,83,4)" fg:x="42366" fg:w="39"/><text x="92.8411%" y="223.50"></text></g><g><title>ntdll.dll`RtlpLfhFindClearBitAndSet (9 samples, 0.02%)</title><rect x="92.6567%" y="197" width="0.0197%" height="15" fill="rgb(250,195,49)" fg:x="42396" fg:w="9"/><text x="92.9067%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::make_packing_buffer (61 samples, 0.13%)</title><rect x="92.5518%" y="309" width="0.1333%" height="15" fill="rgb(241,192,25)" fg:x="42348" fg:w="61"/><text x="92.8018%" y="319.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U4,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (6 samples, 0.01%)</title><rect x="92.6851%" y="309" width="0.0131%" height="15" fill="rgb(208,124,10)" fg:x="42409" fg:w="6"/><text x="92.9351%" y="319.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (58 samples, 0.13%)</title><rect x="92.7201%" y="229" width="0.1268%" height="15" fill="rgb(222,33,0)" fg:x="42425" fg:w="58"/><text x="92.9701%" y="239.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (77 samples, 0.17%)</title><rect x="92.6982%" y="293" width="0.1683%" height="15" fill="rgb(234,209,28)" fg:x="42415" fg:w="77"/><text x="92.9482%" y="303.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (74 samples, 0.16%)</title><rect x="92.7048%" y="277" width="0.1617%" height="15" fill="rgb(224,11,23)" fg:x="42418" fg:w="74"/><text x="92.9548%" y="287.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f64&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (74 samples, 0.16%)</title><rect x="92.7048%" y="261" width="0.1617%" height="15" fill="rgb(232,99,1)" fg:x="42418" fg:w="74"/><text x="92.9548%" y="271.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (72 samples, 0.16%)</title><rect x="92.7092%" y="245" width="0.1574%" height="15" fill="rgb(237,95,45)" fg:x="42420" fg:w="72"/><text x="92.9592%" y="255.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (9 samples, 0.02%)</title><rect x="92.8468%" y="229" width="0.0197%" height="15" fill="rgb(208,109,11)" fg:x="42483" fg:w="9"/><text x="93.0968%" y="239.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (9 samples, 0.02%)</title><rect x="92.8468%" y="213" width="0.0197%" height="15" fill="rgb(216,190,48)" fg:x="42483" fg:w="9"/><text x="93.0968%" y="223.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_pd (10 samples, 0.02%)</title><rect x="92.9714%" y="165" width="0.0219%" height="15" fill="rgb(251,171,36)" fg:x="42540" fg:w="10"/><text x="93.2214%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_pd (5 samples, 0.01%)</title><rect x="92.9955%" y="165" width="0.0109%" height="15" fill="rgb(230,62,22)" fg:x="42551" fg:w="5"/><text x="93.2455%" y="175.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (78 samples, 0.17%)</title><rect x="92.8862%" y="245" width="0.1705%" height="15" fill="rgb(225,114,35)" fg:x="42501" fg:w="78"/><text x="93.1362%" y="255.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::masked_kernel&lt;f64,matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;(unsigned long long, double, double*, double*, double, double*, long long, long long, unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (77 samples, 0.17%)</title><rect x="92.8884%" y="229" width="0.1683%" height="15" fill="rgb(215,118,42)" fg:x="42502" fg:w="77"/><text x="93.1384%" y="239.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::c_to_masked_ab_beta_c(double, double*, long long, long long, unsigned long long, unsigned long long, ref$&lt;slice2$ (71 samples, 0.16%)</title><rect x="92.9015%" y="213" width="0.1552%" height="15" fill="rgb(243,119,21)" fg:x="42508" fg:w="71"/><text x="93.1515%" y="223.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_target_fma (64 samples, 0.14%)</title><rect x="92.9168%" y="197" width="0.1399%" height="15" fill="rgb(252,177,53)" fg:x="42515" fg:w="64"/><text x="93.1668%" y="207.50"></text></g><g><title>neural_network.exe`matrixmultiply::dgemm_kernel::kernel_x86_avx (47 samples, 0.10%)</title><rect x="92.9539%" y="181" width="0.1027%" height="15" fill="rgb(237,209,29)" fg:x="42532" fg:w="47"/><text x="93.2039%" y="191.50"></text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$3::multiply_add (18 samples, 0.04%)</title><rect x="93.0173%" y="165" width="0.0393%" height="15" fill="rgb(212,65,23)" fg:x="42561" fg:w="18"/><text x="93.2673%" y="175.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_pd (18 samples, 0.04%)</title><rect x="93.0173%" y="149" width="0.0393%" height="15" fill="rgb(230,222,46)" fg:x="42561" fg:w="18"/><text x="93.2673%" y="159.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (81 samples, 0.18%)</title><rect x="92.8818%" y="261" width="0.1770%" height="15" fill="rgb(215,135,32)" fg:x="42499" fg:w="81"/><text x="93.1318%" y="271.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; (239 samples, 0.52%)</title><rect x="92.5387%" y="325" width="0.5223%" height="15" fill="rgb(246,101,22)" fg:x="42342" fg:w="239"/><text x="92.7887%" y="335.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (166 samples, 0.36%)</title><rect x="92.6982%" y="309" width="0.3628%" height="15" fill="rgb(206,107,13)" fg:x="42415" fg:w="166"/><text x="92.9482%" y="319.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (89 samples, 0.19%)</title><rect x="92.8665%" y="293" width="0.1945%" height="15" fill="rgb(250,100,44)" fg:x="42492" fg:w="89"/><text x="93.1165%" y="303.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f64&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::dgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (89 samples, 0.19%)</title><rect x="92.8665%" y="277" width="0.1945%" height="15" fill="rgb(231,147,38)" fg:x="42492" fg:w="89"/><text x="93.1165%" y="287.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$1::neg(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (788 samples, 1.72%)</title><rect x="91.4000%" y="357" width="1.7222%" height="15" fill="rgb(229,8,40)" fg:x="41821" fg:w="788"/><text x="91.6500%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f64,ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f64&gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f64&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (298 samples, 0.65%)</title><rect x="92.4709%" y="341" width="0.6513%" height="15" fill="rgb(221,135,30)" fg:x="42311" fg:w="298"/><text x="92.7209%" y="351.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (25 samples, 0.05%)</title><rect x="93.0676%" y="325" width="0.0546%" height="15" fill="rgb(249,193,18)" fg:x="42584" fg:w="25"/><text x="93.3176%" y="335.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (23 samples, 0.05%)</title><rect x="93.0719%" y="309" width="0.0503%" height="15" fill="rgb(209,133,39)" fg:x="42586" fg:w="23"/><text x="93.3219%" y="319.50"></text></g><g><title>neural_network.exe`neural_network::sigmoid_prime(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (916 samples, 2.00%)</title><rect x="91.1618%" y="389" width="2.0019%" height="15" fill="rgb(232,100,14)" fg:x="41712" fg:w="916"/><text x="91.4118%" y="399.50">n..</text></g><g><title>neural_network.exe`neural_network::sigmoid(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (808 samples, 1.77%)</title><rect x="91.3978%" y="373" width="1.7659%" height="15" fill="rgb(224,185,1)" fg:x="41820" fg:w="808"/><text x="91.6478%" y="383.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$326::div(double, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (19 samples, 0.04%)</title><rect x="93.1222%" y="357" width="0.0415%" height="15" fill="rgb(223,139,8)" fg:x="42609" fg:w="19"/><text x="93.3722%" y="367.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_inplace(ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (19 samples, 0.04%)</title><rect x="93.1222%" y="341" width="0.0415%" height="15" fill="rgb(232,213,38)" fg:x="42609" fg:w="19"/><text x="93.3722%" y="351.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$189::for_each(core::slice::iter::IterMut&lt;f64&gt;, ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (19 samples, 0.04%)</title><rect x="93.1222%" y="325" width="0.0415%" height="15" fill="rgb(207,94,22)" fg:x="42609" fg:w="19"/><text x="93.3722%" y="335.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$326::div::closure$0(ndarray::impl_ops::arithmetic_ops::impl$326::div::closure_env$0&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$ (17 samples, 0.04%)</title><rect x="93.1266%" y="309" width="0.0372%" height="15" fill="rgb(219,183,54)" fg:x="42611" fg:w="17"/><text x="93.3766%" y="319.50"></text></g><g><title>ntdll.dll`RtlTryEnterCriticalSection (13 samples, 0.03%)</title><rect x="93.3976%" y="341" width="0.0284%" height="15" fill="rgb(216,185,54)" fg:x="42735" fg:w="13"/><text x="93.6476%" y="351.50"></text></g><g><title>ntdll.dll`RtlpFindEntry (8 samples, 0.02%)</title><rect x="93.4850%" y="309" width="0.0175%" height="15" fill="rgb(254,217,39)" fg:x="42775" fg:w="8"/><text x="93.7350%" y="319.50"></text></g><g><title>ntdll.dll`RtlpHeapFindListLookupEntry (6 samples, 0.01%)</title><rect x="93.4894%" y="293" width="0.0131%" height="15" fill="rgb(240,178,23)" fg:x="42777" fg:w="6"/><text x="93.7394%" y="303.50"></text></g><g><title>ntdll.dll`RtlpDeCommitFreeBlock (42 samples, 0.09%)</title><rect x="93.4260%" y="341" width="0.0918%" height="15" fill="rgb(218,11,47)" fg:x="42748" fg:w="42"/><text x="93.6760%" y="351.50"></text></g><g><title>ntdll.dll`RtlpInsertFreeBlock (33 samples, 0.07%)</title><rect x="93.4457%" y="325" width="0.0721%" height="15" fill="rgb(218,51,51)" fg:x="42757" fg:w="33"/><text x="93.6957%" y="335.50"></text></g><g><title>ntdll.dll`RtlpHeapAddListEntry (7 samples, 0.02%)</title><rect x="93.5025%" y="309" width="0.0153%" height="15" fill="rgb(238,126,27)" fg:x="42783" fg:w="7"/><text x="93.7525%" y="319.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (87 samples, 0.19%)</title><rect x="93.3408%" y="357" width="0.1901%" height="15" fill="rgb(249,202,22)" fg:x="42709" fg:w="87"/><text x="93.5908%" y="367.50"></text></g><g><title>ntdll.dll`RtlpHeapRemoveListEntry (5 samples, 0.01%)</title><rect x="93.5200%" y="341" width="0.0109%" height="15" fill="rgb(254,195,49)" fg:x="42791" fg:w="5"/><text x="93.7700%" y="351.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (168 samples, 0.37%)</title><rect x="93.1681%" y="389" width="0.3672%" height="15" fill="rgb(208,123,14)" fg:x="42630" fg:w="168"/><text x="93.4181%" y="399.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (162 samples, 0.35%)</title><rect x="93.1812%" y="373" width="0.3541%" height="15" fill="rgb(224,200,8)" fg:x="42636" fg:w="162"/><text x="93.4312%" y="383.50"></text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::train_batch(ref$&lt;slice2$ (38,358 samples, 83.83%)</title><rect x="9.8064%" y="421" width="83.8316%" height="15" fill="rgb(217,61,36)" fg:x="4487" fg:w="38358"/><text x="10.0564%" y="431.50">neural_network.exe`neural_network::MnistNetworkTrainer::train_batch(ref$&lt;slice2$</text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::back_propagate (25,314 samples, 55.32%)</title><rect x="38.3141%" y="405" width="55.3239%" height="15" fill="rgb(206,35,45)" fg:x="17531" fg:w="25314"/><text x="38.5641%" y="415.50">neural_network.exe`neural_network::MnistNetworkTrainer::back_propagate</text></g><g><title>vcruntime140.dll`memset() (47 samples, 0.10%)</title><rect x="93.5353%" y="389" width="0.1027%" height="15" fill="rgb(217,65,33)" fg:x="42798" fg:w="47"/><text x="93.7853%" y="399.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$ (18 samples, 0.04%)</title><rect x="93.6402%" y="405" width="0.0393%" height="15" fill="rgb(222,158,48)" fg:x="42846" fg:w="18"/><text x="93.8902%" y="415.50"></text></g><g><title>neural_network.exe`core::ptr::swap (17 samples, 0.04%)</title><rect x="93.6424%" y="389" width="0.0372%" height="15" fill="rgb(254,2,54)" fg:x="42847" fg:w="17"/><text x="93.8924%" y="399.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (16 samples, 0.03%)</title><rect x="93.6445%" y="373" width="0.0350%" height="15" fill="rgb(250,143,38)" fg:x="42848" fg:w="16"/><text x="93.8945%" y="383.50"></text></g><g><title>vcruntime140.dll`memcpy() (16 samples, 0.03%)</title><rect x="93.6445%" y="357" width="0.0350%" height="15" fill="rgb(248,25,0)" fg:x="42848" fg:w="16"/><text x="93.8945%" y="367.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;neural_network::mnist::MnistImage,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$ (22 samples, 0.05%)</title><rect x="93.6380%" y="421" width="0.0481%" height="15" fill="rgb(206,152,27)" fg:x="42845" fg:w="22"/><text x="93.8880%" y="431.50"></text></g><g><title>neural_network.exe`neural_network::MnistNetworkTrainer::train(alloc::vec::Vec&lt;neural_network::mnist::MnistImage,alloc::alloc::Global&gt;*, alloc::vec::Vec (42,193 samples, 92.21%)</title><rect x="1.4752%" y="437" width="92.2130%" height="15" fill="rgb(240,77,30)" fg:x="675" fg:w="42193"/><text x="1.7252%" y="447.50">neural_network.exe`neural_network::MnistNetworkTrainer::train(alloc::vec::Vec&lt;neural_network::mnist::MnistImage,alloc::alloc::Global&gt;*, alloc::vec::Vec</text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;neural_network::mnist::MnistImage,alloc::alloc::Global&gt;::push (11 samples, 0.02%)</title><rect x="93.6970%" y="421" width="0.0240%" height="15" fill="rgb(231,5,3)" fg:x="42872" fg:w="11"/><text x="93.9470%" y="431.50"></text></g><g><title>vcruntime140.dll`memcpy() (11 samples, 0.02%)</title><rect x="93.6970%" y="405" width="0.0240%" height="15" fill="rgb(207,226,32)" fg:x="42872" fg:w="11"/><text x="93.9470%" y="415.50"></text></g><g><title>ntdll.dll`RtlpCreateUCREntry (19 samples, 0.04%)</title><rect x="93.8259%" y="165" width="0.0415%" height="15" fill="rgb(222,207,47)" fg:x="42931" fg:w="19"/><text x="94.0759%" y="175.50"></text></g><g><title>ntdll.dll`RtlpFindAndCommitPages (26 samples, 0.06%)</title><rect x="93.8259%" y="181" width="0.0568%" height="15" fill="rgb(229,115,45)" fg:x="42931" fg:w="26"/><text x="94.0759%" y="191.50"></text></g><g><title>ntdll.dll`ZwAllocateVirtualMemory (5 samples, 0.01%)</title><rect x="93.8718%" y="165" width="0.0109%" height="15" fill="rgb(224,191,6)" fg:x="42952" fg:w="5"/><text x="94.1218%" y="175.50"></text></g><g><title>ntdll.dll`RtlpExtendHeap (28 samples, 0.06%)</title><rect x="93.8259%" y="197" width="0.0612%" height="15" fill="rgb(230,227,24)" fg:x="42931" fg:w="28"/><text x="94.0759%" y="207.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (44 samples, 0.10%)</title><rect x="93.7932%" y="229" width="0.0962%" height="15" fill="rgb(228,80,19)" fg:x="42916" fg:w="44"/><text x="94.0432%" y="239.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeap (43 samples, 0.09%)</title><rect x="93.7953%" y="213" width="0.0940%" height="15" fill="rgb(247,229,0)" fg:x="42917" fg:w="43"/><text x="94.0453%" y="223.50"></text></g><g><title>ntdll.dll`RtlpAllocateUserBlock (52 samples, 0.11%)</title><rect x="93.7844%" y="261" width="0.1136%" height="15" fill="rgb(237,194,15)" fg:x="42912" fg:w="52"/><text x="94.0344%" y="271.50"></text></g><g><title>ntdll.dll`RtlpAllocateUserBlockFromHeap (51 samples, 0.11%)</title><rect x="93.7866%" y="245" width="0.1115%" height="15" fill="rgb(219,203,20)" fg:x="42913" fg:w="51"/><text x="94.0366%" y="255.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity (614 samples, 1.34%)</title><rect x="93.7210%" y="357" width="1.3419%" height="15" fill="rgb(234,128,8)" fg:x="42883" fg:w="614"/><text x="93.9710%" y="367.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (614 samples, 1.34%)</title><rect x="93.7210%" y="341" width="1.3419%" height="15" fill="rgb(248,202,8)" fg:x="42883" fg:w="614"/><text x="93.9710%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_in (614 samples, 1.34%)</title><rect x="93.7210%" y="325" width="1.3419%" height="15" fill="rgb(206,104,37)" fg:x="42883" fg:w="614"/><text x="93.9710%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (614 samples, 1.34%)</title><rect x="93.7210%" y="309" width="1.3419%" height="15" fill="rgb(223,8,27)" fg:x="42883" fg:w="614"/><text x="93.9710%" y="319.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (613 samples, 1.34%)</title><rect x="93.7232%" y="293" width="1.3397%" height="15" fill="rgb(216,217,28)" fg:x="42884" fg:w="613"/><text x="93.9732%" y="303.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (610 samples, 1.33%)</title><rect x="93.7298%" y="277" width="1.3332%" height="15" fill="rgb(249,199,1)" fg:x="42887" fg:w="610"/><text x="93.9798%" y="287.50"></text></g><g><title>ntdll.dll`RtlpSubSegmentInitialize (527 samples, 1.15%)</title><rect x="93.9112%" y="261" width="1.1518%" height="15" fill="rgb(240,85,17)" fg:x="42970" fg:w="527"/><text x="94.1612%" y="271.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (37 samples, 0.08%)</title><rect x="94.9821%" y="245" width="0.0809%" height="15" fill="rgb(206,108,45)" fg:x="43460" fg:w="37"/><text x="95.2321%" y="255.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::for_each::call::closure$0(core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt; &gt; &gt;*, tuple$ (361 samples, 0.79%)</title><rect x="95.0935%" y="261" width="0.7890%" height="15" fill="rgb(245,210,41)" fg:x="43511" fg:w="361"/><text x="95.3435%" y="271.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$19::extend_trusted::closure$0(alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (361 samples, 0.79%)</title><rect x="95.0935%" y="245" width="0.7890%" height="15" fill="rgb(206,13,37)" fg:x="43511" fg:w="361"/><text x="95.3435%" y="255.50"></text></g><g><title>neural_network.exe`core::ptr::write (361 samples, 0.79%)</title><rect x="95.0935%" y="229" width="0.7890%" height="15" fill="rgb(250,61,18)" fg:x="43511" fg:w="361"/><text x="95.3435%" y="239.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::collect(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,101 samples, 2.41%)</title><rect x="93.7210%" y="421" width="2.4062%" height="15" fill="rgb(235,172,48)" fg:x="42883" fg:w="1101"/><text x="93.9710%" y="431.50">ne..</text></g><g><title>neural_network.exe`alloc::vec::impl$14::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,101 samples, 2.41%)</title><rect x="93.7210%" y="405" width="2.4062%" height="15" fill="rgb(249,201,17)" fg:x="42883" fg:w="1101"/><text x="93.9710%" y="415.50">ne..</text></g><g><title>neural_network.exe`alloc::vec::spec_from_iter::impl$0::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,101 samples, 2.41%)</title><rect x="93.7210%" y="389" width="2.4062%" height="15" fill="rgb(219,208,6)" fg:x="42883" fg:w="1101"/><text x="93.9710%" y="399.50">ne..</text></g><g><title>neural_network.exe`alloc::vec::spec_from_iter_nested::impl$1::from_iter(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,101 samples, 2.41%)</title><rect x="93.7210%" y="373" width="2.4062%" height="15" fill="rgb(248,31,23)" fg:x="42883" fg:w="1101"/><text x="93.9710%" y="383.50">ne..</text></g><g><title>neural_network.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;*, core::iter::adapters::map::Map&lt;core::slice::iter::Iter (487 samples, 1.06%)</title><rect x="95.0629%" y="357" width="1.0643%" height="15" fill="rgb(245,15,42)" fg:x="43497" fg:w="487"/><text x="95.3129%" y="367.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f64,alloc::alloc::Global&gt;::extend_trusted(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (487 samples, 1.06%)</title><rect x="95.0629%" y="341" width="1.0643%" height="15" fill="rgb(222,217,39)" fg:x="43497" fg:w="487"/><text x="95.3129%" y="351.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt;, alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (487 samples, 1.06%)</title><rect x="95.0629%" y="325" width="1.0643%" height="15" fill="rgb(210,219,27)" fg:x="43497" fg:w="487"/><text x="95.3129%" y="335.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (487 samples, 1.06%)</title><rect x="95.0629%" y="309" width="1.0643%" height="15" fill="rgb(252,166,36)" fg:x="43497" fg:w="487"/><text x="95.3129%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::fold(core::slice::iter::Iter&lt;u8&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u8&gt;,f64,tuple$&lt;&gt;,neural_network::mnist::load_mnist_file::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (487 samples, 1.06%)</title><rect x="95.0629%" y="293" width="1.0643%" height="15" fill="rgb(245,132,34)" fg:x="43497" fg:w="487"/><text x="95.3129%" y="303.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;u8&gt;,f64,tuple$&lt;&gt;,neural_network::mnist::load_mnist_file::closure_env$0,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;f64,alloc::alloc::Global,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,neural_network::mnist::load_mnist_file::closure_env$0&gt; &gt; &gt; &gt;*, tuple$ (473 samples, 1.03%)</title><rect x="95.0935%" y="277" width="1.0337%" height="15" fill="rgb(236,54,3)" fg:x="43511" fg:w="473"/><text x="95.3435%" y="287.50"></text></g><g><title>neural_network.exe`neural_network::mnist::load_mnist_file::closure$0 (112 samples, 0.24%)</title><rect x="95.8825%" y="261" width="0.2448%" height="15" fill="rgb(241,173,43)" fg:x="43872" fg:w="112"/><text x="96.1325%" y="271.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (5 samples, 0.01%)</title><rect x="96.1360%" y="197" width="0.0109%" height="15" fill="rgb(215,190,9)" fg:x="43988" fg:w="5"/><text x="96.3860%" y="207.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (5 samples, 0.01%)</title><rect x="96.1360%" y="181" width="0.0109%" height="15" fill="rgb(242,101,16)" fg:x="43988" fg:w="5"/><text x="96.3860%" y="191.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (5 samples, 0.01%)</title><rect x="96.1360%" y="165" width="0.0109%" height="15" fill="rgb(223,190,21)" fg:x="43988" fg:w="5"/><text x="96.3860%" y="175.50"></text></g><g><title>ntdll.dll`RtlpSecMemFreeVirtualMemory (5 samples, 0.01%)</title><rect x="96.1360%" y="149" width="0.0109%" height="15" fill="rgb(215,228,25)" fg:x="43988" fg:w="5"/><text x="96.3860%" y="159.50"></text></g><g><title>ntdll.dll`NtFreeVirtualMemory (5 samples, 0.01%)</title><rect x="96.1360%" y="133" width="0.0109%" height="15" fill="rgb(225,36,22)" fg:x="43988" fg:w="5"/><text x="96.3860%" y="143.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::spare_capacity_mut (115 samples, 0.25%)</title><rect x="96.1360%" y="357" width="0.2513%" height="15" fill="rgb(251,106,46)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::capacity (115 samples, 0.25%)</title><rect x="96.1360%" y="341" width="0.2513%" height="15" fill="rgb(208,90,1)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (115 samples, 0.25%)</title><rect x="96.1360%" y="325" width="0.2513%" height="15" fill="rgb(243,10,4)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (115 samples, 0.25%)</title><rect x="96.1360%" y="309" width="0.2513%" height="15" fill="rgb(212,137,27)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="319.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (115 samples, 0.25%)</title><rect x="96.1360%" y="293" width="0.2513%" height="15" fill="rgb(231,220,49)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (115 samples, 0.25%)</title><rect x="96.1360%" y="277" width="0.2513%" height="15" fill="rgb(237,96,20)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="287.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (115 samples, 0.25%)</title><rect x="96.1360%" y="261" width="0.2513%" height="15" fill="rgb(239,229,30)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="271.50"></text></g><g><title>ntdll.dll`RtlReAllocateHeap (115 samples, 0.25%)</title><rect x="96.1360%" y="245" width="0.2513%" height="15" fill="rgb(219,65,33)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="255.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeapInternal (115 samples, 0.25%)</title><rect x="96.1360%" y="229" width="0.2513%" height="15" fill="rgb(243,134,7)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="239.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeap (115 samples, 0.25%)</title><rect x="96.1360%" y="213" width="0.2513%" height="15" fill="rgb(216,177,54)" fg:x="43988" fg:w="115"/><text x="96.3860%" y="223.50"></text></g><g><title>ntdll.dll`memcpy (109 samples, 0.24%)</title><rect x="96.1491%" y="197" width="0.2382%" height="15" fill="rgb(211,160,20)" fg:x="43994" fg:w="109"/><text x="96.3991%" y="207.50"></text></g><g><title>neural_network.exe`crc32fast::specialized::pclmulqdq::get(ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="96.3895%" y="245" width="0.0109%" height="15" fill="rgb(239,85,39)" fg:x="44104" fg:w="5"/><text x="96.6395%" y="255.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.01%)</title><rect x="96.3895%" y="229" width="0.0109%" height="15" fill="rgb(232,125,22)" fg:x="44104" fg:w="5"/><text x="96.6395%" y="239.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="96.3895%" y="213" width="0.0109%" height="15" fill="rgb(244,57,34)" fg:x="44104" fg:w="5"/><text x="96.6395%" y="223.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (14 samples, 0.03%)</title><rect x="96.4005%" y="229" width="0.0306%" height="15" fill="rgb(214,203,32)" fg:x="44109" fg:w="14"/><text x="96.6505%" y="239.50"></text></g><g><title>neural_network.exe`crc32fast::Hasher::update(ref$&lt;slice2$ (29 samples, 0.06%)</title><rect x="96.3874%" y="293" width="0.0634%" height="15" fill="rgb(207,58,43)" fg:x="44103" fg:w="29"/><text x="96.6374%" y="303.50"></text></g><g><title>neural_network.exe`crc32fast::specialized::pclmulqdq::State::update(ref$&lt;slice2$ (29 samples, 0.06%)</title><rect x="96.3874%" y="277" width="0.0634%" height="15" fill="rgb(215,193,15)" fg:x="44103" fg:w="29"/><text x="96.6374%" y="287.50"></text></g><g><title>neural_network.exe`crc32fast::specialized::pclmulqdq::calculate(unsigned int, ref$&lt;slice2$ (29 samples, 0.06%)</title><rect x="96.3874%" y="261" width="0.0634%" height="15" fill="rgb(232,15,44)" fg:x="44103" fg:w="29"/><text x="96.6374%" y="271.50"></text></g><g><title>neural_network.exe`crc32fast::specialized::pclmulqdq::reduce128 (23 samples, 0.05%)</title><rect x="96.4005%" y="245" width="0.0503%" height="15" fill="rgb(212,3,48)" fg:x="44109" fg:w="23"/><text x="96.6505%" y="255.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::sse2::_mm_xor_si128 (9 samples, 0.02%)</title><rect x="96.4311%" y="229" width="0.0197%" height="15" fill="rgb(218,128,7)" fg:x="44123" fg:w="9"/><text x="96.6811%" y="239.50"></text></g><g><title>neural_network.exe`flate2::bufreader::impl$4::fill_buf(flate2::bufreader::BufReader&lt;ref$ (22 samples, 0.05%)</title><rect x="96.4507%" y="229" width="0.0481%" height="15" fill="rgb(226,216,39)" fg:x="44132" fg:w="22"/><text x="96.7007%" y="239.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (22 samples, 0.05%)</title><rect x="96.4507%" y="213" width="0.0481%" height="15" fill="rgb(243,47,51)" fg:x="44132" fg:w="22"/><text x="96.7007%" y="223.50"></text></g><g><title>neural_network.exe`std::fs::impl$8::read (22 samples, 0.05%)</title><rect x="96.4507%" y="197" width="0.0481%" height="15" fill="rgb(241,183,40)" fg:x="44132" fg:w="22"/><text x="96.7007%" y="207.50"></text></g><g><title>neural_network.exe`std::sys::windows::handle::Handle::read (22 samples, 0.05%)</title><rect x="96.4507%" y="181" width="0.0481%" height="15" fill="rgb(231,217,32)" fg:x="44132" fg:w="22"/><text x="96.7007%" y="191.50"></text></g><g><title>neural_network.exe`std::sys::windows::handle::Handle::synchronous_read (22 samples, 0.05%)</title><rect x="96.4507%" y="165" width="0.0481%" height="15" fill="rgb(229,61,38)" fg:x="44132" fg:w="22"/><text x="96.7007%" y="175.50"></text></g><g><title>ntdll.dll`ZwReadFile (22 samples, 0.05%)</title><rect x="96.4507%" y="149" width="0.0481%" height="15" fill="rgb(225,210,5)" fg:x="44132" fg:w="22"/><text x="96.7007%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decompress::closure$9 (6 samples, 0.01%)</title><rect x="96.5775%" y="149" width="0.0131%" height="15" fill="rgb(231,79,45)" fg:x="44190" fg:w="6"/><text x="96.8275%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decode_huffman_code(miniz_oxide::inflate::core::DecompressorOxide*, miniz_oxide::inflate::core::LocalVars*, unsigned long long, unsigned int, core::slice::iter::Iter (32 samples, 0.07%)</title><rect x="96.5272%" y="165" width="0.0699%" height="15" fill="rgb(224,100,7)" fg:x="44167" fg:w="32"/><text x="96.7772%" y="175.50"></text></g><g><title>neural_network.exe`core::iter::traits::exact_size::impl$0::len(core::slice::iter::Iter (7 samples, 0.02%)</title><rect x="97.4277%" y="149" width="0.0153%" height="15" fill="rgb(241,198,18)" fg:x="44579" fg:w="7"/><text x="97.6777%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::HuffmanTable::fast_lookup (136 samples, 0.30%)</title><rect x="97.5413%" y="133" width="0.2972%" height="15" fill="rgb(252,97,53)" fg:x="44631" fg:w="136"/><text x="97.7913%" y="143.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::HuffmanTable::lookup (182 samples, 0.40%)</title><rect x="97.4473%" y="149" width="0.3978%" height="15" fill="rgb(220,88,7)" fg:x="44588" fg:w="182"/><text x="97.6973%" y="159.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::split_at_mut(ref_mut$&lt;slice2$ (17 samples, 0.04%)</title><rect x="98.0615%" y="133" width="0.0372%" height="15" fill="rgb(213,176,14)" fg:x="44869" fg:w="17"/><text x="98.3115%" y="143.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (17 samples, 0.04%)</title><rect x="98.1030%" y="117" width="0.0372%" height="15" fill="rgb(246,73,7)" fg:x="44888" fg:w="17"/><text x="98.3530%" y="127.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$4::get_unchecked(core::ops::range::Range&lt;usize&gt;, ptr_const$&lt;slice2$ (16 samples, 0.03%)</title><rect x="98.1052%" y="101" width="0.0350%" height="15" fill="rgb(245,64,36)" fg:x="44889" fg:w="16"/><text x="98.3552%" y="111.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (16 samples, 0.03%)</title><rect x="98.1052%" y="85" width="0.0350%" height="15" fill="rgb(245,80,10)" fg:x="44889" fg:w="16"/><text x="98.3552%" y="95.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::apply_match(ref_mut$&lt;slice2$ (139 samples, 0.30%)</title><rect x="97.8451%" y="149" width="0.3038%" height="15" fill="rgb(232,107,50)" fg:x="44770" fg:w="139"/><text x="98.0951%" y="159.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::RangeTo (21 samples, 0.05%)</title><rect x="98.1030%" y="133" width="0.0459%" height="15" fill="rgb(253,3,0)" fg:x="44888" fg:w="21"/><text x="98.3530%" y="143.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$5::index(core::ops::range::RangeTo&lt;usize&gt;, ref$&lt;slice2$ (7 samples, 0.02%)</title><rect x="98.2144%" y="101" width="0.0153%" height="15" fill="rgb(212,99,53)" fg:x="44939" fg:w="7"/><text x="98.4644%" y="111.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (7 samples, 0.02%)</title><rect x="98.2144%" y="85" width="0.0153%" height="15" fill="rgb(249,111,54)" fg:x="44939" fg:w="7"/><text x="98.4644%" y="95.50"></text></g><g><title>neural_network.exe`core::convert::impl$1::as_ref(core::slice::iter::Iter (15 samples, 0.03%)</title><rect x="98.2123%" y="117" width="0.0328%" height="15" fill="rgb(249,55,30)" fg:x="44938" fg:w="15"/><text x="98.4623%" y="127.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$7::as_ref(core::slice::iter::Iter (7 samples, 0.02%)</title><rect x="98.2297%" y="101" width="0.0153%" height="15" fill="rgb(237,47,42)" fg:x="44946" fg:w="7"/><text x="98.4797%" y="111.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;u8&gt;::as_slice (7 samples, 0.02%)</title><rect x="98.2297%" y="85" width="0.0153%" height="15" fill="rgb(211,20,18)" fg:x="44946" fg:w="7"/><text x="98.4797%" y="95.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;u8&gt;::make_slice (7 samples, 0.02%)</title><rect x="98.2297%" y="69" width="0.0153%" height="15" fill="rgb(231,203,46)" fg:x="44946" fg:w="7"/><text x="98.4797%" y="79.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::sub_ptr (7 samples, 0.02%)</title><rect x="98.2297%" y="53" width="0.0153%" height="15" fill="rgb(237,142,3)" fg:x="44946" fg:w="7"/><text x="98.4797%" y="63.50"></text></g><g><title>neural_network.exe`core::convert::impl$6::try_into(ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="98.2450%" y="117" width="0.0306%" height="15" fill="rgb(241,107,1)" fg:x="44953" fg:w="14"/><text x="98.4950%" y="127.50"></text></g><g><title>neural_network.exe`core::array::impl$7::try_from(ref$&lt;slice2$ (14 samples, 0.03%)</title><rect x="98.2450%" y="101" width="0.0306%" height="15" fill="rgb(229,83,13)" fg:x="44953" fg:w="14"/><text x="98.4950%" y="111.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;ref$&lt;array$&lt;u8,4&gt; &gt;,core::array::TryFromSliceError&gt; &gt;::map(enum2$&lt;core::result::Result&lt;ref$&lt;array$&lt;u8,4&gt; &gt;,core::array::TryFromSliceError&gt; &gt;, core::array::impl$7::try_from::closure_env$0 (14 samples, 0.03%)</title><rect x="98.2450%" y="85" width="0.0306%" height="15" fill="rgb(241,91,40)" fg:x="44953" fg:w="14"/><text x="98.4950%" y="95.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::fill_bit_buffer(miniz_oxide::inflate::core::LocalVars*, core::slice::iter::Iter (69 samples, 0.15%)</title><rect x="98.1489%" y="149" width="0.1508%" height="15" fill="rgb(225,3,45)" fg:x="44909" fg:w="69"/><text x="98.3989%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::read_u32_le(core::slice::iter::Iter (40 samples, 0.09%)</title><rect x="98.2123%" y="133" width="0.0874%" height="15" fill="rgb(244,223,14)" fg:x="44938" fg:w="40"/><text x="98.4623%" y="143.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$181::nth(core::slice::iter::Iter (11 samples, 0.02%)</title><rect x="98.2756%" y="117" width="0.0240%" height="15" fill="rgb(224,124,37)" fg:x="44967" fg:w="11"/><text x="98.5256%" y="127.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;u8&gt;::post_inc_start (11 samples, 0.02%)</title><rect x="98.2756%" y="101" width="0.0240%" height="15" fill="rgb(251,171,30)" fg:x="44967" fg:w="11"/><text x="98.5256%" y="111.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;u8&gt;::add(core::ptr::non_null::NonNull (11 samples, 0.02%)</title><rect x="98.2756%" y="85" width="0.0240%" height="15" fill="rgb(236,46,54)" fg:x="44967" fg:w="11"/><text x="98.5256%" y="95.50"></text></g><g><title>neural_network.exe`core::ptr::const_ptr::impl$0::add (11 samples, 0.02%)</title><rect x="98.2756%" y="69" width="0.0240%" height="15" fill="rgb(245,213,5)" fg:x="44967" fg:w="11"/><text x="98.5256%" y="79.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::transfer(ref_mut$&lt;slice2$ (128 samples, 0.28%)</title><rect x="98.2997%" y="149" width="0.2797%" height="15" fill="rgb(230,144,27)" fg:x="44978" fg:w="128"/><text x="98.5497%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (47 samples, 0.10%)</title><rect x="98.5794%" y="149" width="0.1027%" height="15" fill="rgb(220,86,6)" fg:x="45106" fg:w="47"/><text x="98.8294%" y="159.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decompress_fast(miniz_oxide::inflate::core::DecompressorOxide*, core::slice::iter::Iter (1,087 samples, 2.38%)</title><rect x="96.5972%" y="165" width="2.3756%" height="15" fill="rgb(240,20,13)" fg:x="44199" fg:w="1087"/><text x="96.8472%" y="175.50">ne..</text></g><g><title>vcruntime140.dll`memcpy() (133 samples, 0.29%)</title><rect x="98.6821%" y="149" width="0.2907%" height="15" fill="rgb(217,89,34)" fg:x="45153" fg:w="133"/><text x="98.9321%" y="159.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$3::next(core::ops::range::Range (9 samples, 0.02%)</title><rect x="99.1302%" y="149" width="0.0197%" height="15" fill="rgb(229,13,5)" fg:x="45358" fg:w="9"/><text x="99.3802%" y="159.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$2::spec_next(core::ops::range::Range (9 samples, 0.02%)</title><rect x="99.1302%" y="133" width="0.0197%" height="15" fill="rgb(244,67,35)" fg:x="45358" fg:w="9"/><text x="99.3802%" y="143.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$54::lt (7 samples, 0.02%)</title><rect x="99.1345%" y="117" width="0.0153%" height="15" fill="rgb(221,40,2)" fg:x="45360" fg:w="7"/><text x="99.3845%" y="127.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::init_tree (83 samples, 0.18%)</title><rect x="98.9750%" y="165" width="0.1814%" height="15" fill="rgb(237,157,21)" fg:x="45287" fg:w="83"/><text x="99.2250%" y="175.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::read_bits(miniz_oxide::inflate::core::LocalVars*, unsigned int, core::slice::iter::Iter (10 samples, 0.02%)</title><rect x="99.1564%" y="165" width="0.0219%" height="15" fill="rgb(222,94,11)" fg:x="45370" fg:w="10"/><text x="99.4064%" y="175.50"></text></g><g><title>neural_network.exe`miniz_oxide::inflate::core::decompress(miniz_oxide::inflate::core::DecompressorOxide*, ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (1,233 samples, 2.69%)</title><rect x="96.5010%" y="181" width="2.6947%" height="15" fill="rgb(249,113,6)" fg:x="44155" fg:w="1233"/><text x="96.7510%" y="191.50">ne..</text></g><g><title>vcruntime140.dll`memcpy() (6 samples, 0.01%)</title><rect x="99.1826%" y="165" width="0.0131%" height="15" fill="rgb(238,137,36)" fg:x="45382" fg:w="6"/><text x="99.4326%" y="175.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (1,303 samples, 2.85%)</title><rect x="96.3874%" y="325" width="2.8477%" height="15" fill="rgb(210,102,26)" fg:x="44103" fg:w="1303"/><text x="96.6374%" y="335.50">ne..</text></g><g><title>neural_network.exe`flate2::gz::bufread::impl$6::read&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;(flate2::gz::bufread::GzDecoder&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;*, ref_mut$&lt;slice2$ (1,303 samples, 2.85%)</title><rect x="96.3874%" y="309" width="2.8477%" height="15" fill="rgb(218,30,30)" fg:x="44103" fg:w="1303"/><text x="96.6374%" y="319.50">ne..</text></g><g><title>neural_network.exe`flate2::crc::impl$4::read(flate2::crc::CrcReader&lt;flate2::deflate::bufread::DeflateDecoder&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt; &gt;*, ref_mut$&lt;slice2$ (1,274 samples, 2.78%)</title><rect x="96.4507%" y="293" width="2.7843%" height="15" fill="rgb(214,67,26)" fg:x="44132" fg:w="1274"/><text x="96.7007%" y="303.50">ne..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (1,274 samples, 2.78%)</title><rect x="96.4507%" y="277" width="2.7843%" height="15" fill="rgb(251,9,53)" fg:x="44132" fg:w="1274"/><text x="96.7007%" y="287.50">ne..</text></g><g><title>neural_network.exe`flate2::deflate::bufread::impl$6::read&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;(flate2::deflate::bufread::DeflateDecoder&lt;flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt; &gt;*, ref_mut$&lt;slice2$ (1,274 samples, 2.78%)</title><rect x="96.4507%" y="261" width="2.7843%" height="15" fill="rgb(228,204,25)" fg:x="44132" fg:w="1274"/><text x="96.7007%" y="271.50">ne..</text></g><g><title>neural_network.exe`flate2::zio::read(flate2::bufreader::BufReader&lt;ref$&lt;std::fs::File&gt; &gt;*, flate2::mem::Decompress*, ref_mut$&lt;slice2$ (1,274 samples, 2.78%)</title><rect x="96.4507%" y="245" width="2.7843%" height="15" fill="rgb(207,153,8)" fg:x="44132" fg:w="1274"/><text x="96.7007%" y="255.50">ne..</text></g><g><title>neural_network.exe`flate2::ffi::rust::impl$2::decompress(flate2::ffi::rust::Inflate*, ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (1,252 samples, 2.74%)</title><rect x="96.4988%" y="229" width="2.7363%" height="15" fill="rgb(242,9,16)" fg:x="44154" fg:w="1252"/><text x="96.7488%" y="239.50">ne..</text></g><g><title>neural_network.exe`miniz_oxide::inflate::stream::inflate(miniz_oxide::inflate::stream::InflateState*, ref$&lt;slice2$&lt;u8&gt; &gt;, ref_mut$&lt;slice2$ (1,252 samples, 2.74%)</title><rect x="96.4988%" y="213" width="2.7363%" height="15" fill="rgb(217,211,10)" fg:x="44154" fg:w="1252"/><text x="96.7488%" y="223.50">ne..</text></g><g><title>neural_network.exe`miniz_oxide::inflate::stream::inflate_loop(miniz_oxide::inflate::stream::InflateState*, ref$&lt;slice2$&lt;u8&gt; &gt;*, ref_mut$&lt;slice2$ (1,251 samples, 2.73%)</title><rect x="96.5010%" y="197" width="2.7341%" height="15" fill="rgb(219,228,52)" fg:x="44155" fg:w="1251"/><text x="96.7510%" y="207.50">ne..</text></g><g><title>neural_network.exe`miniz_oxide::inflate::stream::push_dict_out(miniz_oxide::inflate::stream::InflateState*, ref_mut$&lt;slice2$ (18 samples, 0.04%)</title><rect x="99.1957%" y="181" width="0.0393%" height="15" fill="rgb(231,92,29)" fg:x="45388" fg:w="18"/><text x="99.4457%" y="191.50"></text></g><g><title>vcruntime140.dll`memcpy_repmovs() (18 samples, 0.04%)</title><rect x="99.1957%" y="165" width="0.0393%" height="15" fill="rgb(232,8,23)" fg:x="45388" fg:w="18"/><text x="99.4457%" y="175.50"></text></g><g><title>neural_network.exe`std::io::Read::read_to_end(flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt;*, alloc::vec::Vec (1,523 samples, 3.33%)</title><rect x="96.1360%" y="389" width="3.3285%" height="15" fill="rgb(216,211,34)" fg:x="43988" fg:w="1523"/><text x="96.3860%" y="399.50">neu..</text></g><g><title>neural_network.exe`std::io::default_read_to_end&lt;flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt; &gt;(flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option (1,523 samples, 3.33%)</title><rect x="96.1360%" y="373" width="3.3285%" height="15" fill="rgb(236,151,0)" fg:x="43988" fg:w="1523"/><text x="96.3860%" y="383.50">neu..</text></g><g><title>neural_network.exe`std::io::Read::read_buf(flate2::gz::read::GzDecoder&lt;ref$ (1,408 samples, 3.08%)</title><rect x="96.3874%" y="357" width="3.0772%" height="15" fill="rgb(209,168,3)" fg:x="44103" fg:w="1408"/><text x="96.6374%" y="367.50">neu..</text></g><g><title>neural_network.exe`std::io::default_read_buf(std::io::Read::read_buf::closure_env$0&lt;flate2::gz::read::GzDecoder&lt;ref$ (1,408 samples, 3.08%)</title><rect x="96.3874%" y="341" width="3.0772%" height="15" fill="rgb(208,129,28)" fg:x="44103" fg:w="1408"/><text x="96.6374%" y="351.50">neu..</text></g><g><title>neural_network.exe`std::io::Read::read_buf::closure$0(std::io::Read::read_buf::closure_env$0&lt;flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt; &gt;, ref_mut$&lt;slice2$ (105 samples, 0.23%)</title><rect x="99.2351%" y="325" width="0.2295%" height="15" fill="rgb(229,78,22)" fg:x="45406" fg:w="105"/><text x="99.4851%" y="335.50"></text></g><g><title>neural_network.exe`flate2::gz::read::impl$6::read(flate2::gz::read::GzDecoder&lt;ref$&lt;std::fs::File&gt; &gt;*, ref_mut$&lt;slice2$ (105 samples, 0.23%)</title><rect x="99.2351%" y="309" width="0.2295%" height="15" fill="rgb(228,187,13)" fg:x="45406" fg:w="105"/><text x="99.4851%" y="319.50"></text></g><g><title>vcruntime140.dll`memset_repstos() (105 samples, 0.23%)</title><rect x="99.2351%" y="293" width="0.2295%" height="15" fill="rgb(240,119,24)" fg:x="45406" fg:w="105"/><text x="99.4851%" y="303.50"></text></g><g><title>ntdll.dll`RtlFreeHeap (6 samples, 0.01%)</title><rect x="99.4646%" y="197" width="0.0131%" height="15" fill="rgb(209,194,42)" fg:x="45511" fg:w="6"/><text x="99.7146%" y="207.50"></text></g><g><title>ntdll.dll`RtlpFreeHeapInternal (6 samples, 0.01%)</title><rect x="99.4646%" y="181" width="0.0131%" height="15" fill="rgb(247,200,46)" fg:x="45511" fg:w="6"/><text x="99.7146%" y="191.50"></text></g><g><title>ntdll.dll`RtlpFreeHeap (6 samples, 0.01%)</title><rect x="99.4646%" y="165" width="0.0131%" height="15" fill="rgb(218,76,16)" fg:x="45511" fg:w="6"/><text x="99.7146%" y="175.50"></text></g><g><title>ntdll.dll`RtlpSecMemFreeVirtualMemory (6 samples, 0.01%)</title><rect x="99.4646%" y="149" width="0.0131%" height="15" fill="rgb(225,21,48)" fg:x="45511" fg:w="6"/><text x="99.7146%" y="159.50"></text></g><g><title>ntdll.dll`NtFreeVirtualMemory (6 samples, 0.01%)</title><rect x="99.4646%" y="133" width="0.0131%" height="15" fill="rgb(239,223,50)" fg:x="45511" fg:w="6"/><text x="99.7146%" y="143.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::reserve (100 samples, 0.22%)</title><rect x="99.4646%" y="357" width="0.2186%" height="15" fill="rgb(244,45,21)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::reserve (100 samples, 0.22%)</title><rect x="99.4646%" y="341" width="0.2186%" height="15" fill="rgb(232,33,43)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (100 samples, 0.22%)</title><rect x="99.4646%" y="325" width="0.2186%" height="15" fill="rgb(209,8,3)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (100 samples, 0.22%)</title><rect x="99.4646%" y="309" width="0.2186%" height="15" fill="rgb(214,25,53)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="319.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (100 samples, 0.22%)</title><rect x="99.4646%" y="293" width="0.2186%" height="15" fill="rgb(254,186,54)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (100 samples, 0.22%)</title><rect x="99.4646%" y="277" width="0.2186%" height="15" fill="rgb(208,174,49)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="287.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (100 samples, 0.22%)</title><rect x="99.4646%" y="261" width="0.2186%" height="15" fill="rgb(233,191,51)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="271.50"></text></g><g><title>ntdll.dll`RtlReAllocateHeap (100 samples, 0.22%)</title><rect x="99.4646%" y="245" width="0.2186%" height="15" fill="rgb(222,134,10)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="255.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeapInternal (100 samples, 0.22%)</title><rect x="99.4646%" y="229" width="0.2186%" height="15" fill="rgb(230,226,20)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="239.50"></text></g><g><title>ntdll.dll`RtlpReAllocateHeap (100 samples, 0.22%)</title><rect x="99.4646%" y="213" width="0.2186%" height="15" fill="rgb(251,111,25)" fg:x="45511" fg:w="100"/><text x="99.7146%" y="223.50"></text></g><g><title>ntdll.dll`memcpy (94 samples, 0.21%)</title><rect x="99.4777%" y="197" width="0.2054%" height="15" fill="rgb(224,40,46)" fg:x="45517" fg:w="94"/><text x="99.7277%" y="207.50"></text></g><g><title>vcruntime140.dll`memcpy() (68 samples, 0.15%)</title><rect x="99.6831%" y="261" width="0.1486%" height="15" fill="rgb(236,108,47)" fg:x="45611" fg:w="68"/><text x="99.9331%" y="271.50"></text></g><g><title>neural_network.exe`std::io::Read::read_to_end(std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;*, alloc::vec::Vec (172 samples, 0.38%)</title><rect x="99.4646%" y="389" width="0.3759%" height="15" fill="rgb(234,93,0)" fg:x="45511" fg:w="172"/><text x="99.7146%" y="399.50"></text></g><g><title>neural_network.exe`std::io::default_read_to_end&lt;std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt; &gt;(std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option (172 samples, 0.38%)</title><rect x="99.4646%" y="373" width="0.3759%" height="15" fill="rgb(224,213,32)" fg:x="45511" fg:w="172"/><text x="99.7146%" y="383.50"></text></g><g><title>neural_network.exe`std::io::cursor::impl$4::read_buf(std::io::cursor::Cursor&lt;ref$&lt;alloc::vec::Vec (72 samples, 0.16%)</title><rect x="99.6831%" y="357" width="0.1574%" height="15" fill="rgb(251,11,48)" fg:x="45611" fg:w="72"/><text x="99.9331%" y="367.50"></text></g><g><title>neural_network.exe`std::io::impls::impl$8::read_buf(ref$&lt;slice2$ (72 samples, 0.16%)</title><rect x="99.6831%" y="341" width="0.1574%" height="15" fill="rgb(236,173,5)" fg:x="45611" fg:w="72"/><text x="99.9331%" y="351.50"></text></g><g><title>neural_network.exe`std::io::readbuf::BorrowedCursor::append(ref$&lt;slice2$ (72 samples, 0.16%)</title><rect x="99.6831%" y="325" width="0.1574%" height="15" fill="rgb(230,95,12)" fg:x="45611" fg:w="72"/><text x="99.9331%" y="335.50"></text></g><g><title>neural_network.exe`core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;::write_slice(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;u8&gt; &gt; &gt;, ref$&lt;slice2$ (72 samples, 0.16%)</title><rect x="99.6831%" y="309" width="0.1574%" height="15" fill="rgb(232,209,1)" fg:x="45611" fg:w="72"/><text x="99.9331%" y="319.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;u8&gt; &gt; &gt;, ref$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit (72 samples, 0.16%)</title><rect x="99.6831%" y="293" width="0.1574%" height="15" fill="rgb(232,6,1)" fg:x="45611" fg:w="72"/><text x="99.9331%" y="303.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(core::mem::maybe_uninit::MaybeUninit&lt;u8&gt;*, core::mem::maybe_uninit::MaybeUninit (72 samples, 0.16%)</title><rect x="99.6831%" y="277" width="0.1574%" height="15" fill="rgb(210,224,50)" fg:x="45611" fg:w="72"/><text x="99.9331%" y="287.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (1,699 samples, 3.71%)</title><rect x="96.1295%" y="421" width="3.7132%" height="15" fill="rgb(228,127,35)" fg:x="43985" fg:w="1699"/><text x="96.3795%" y="431.50">neur..</text></g><g><title>neural_network.exe`neural_network::mnist::MnistData::new (1,699 samples, 3.71%)</title><rect x="96.1295%" y="405" width="3.7132%" height="15" fill="rgb(245,102,45)" fg:x="43985" fg:w="1699"/><text x="96.3795%" y="415.50">neur..</text></g><g><title>ntdll.dll`RtlpSubSegmentInitialize (17 samples, 0.04%)</title><rect x="99.9104%" y="293" width="0.0372%" height="15" fill="rgb(214,1,49)" fg:x="45715" fg:w="17"/><text x="100.1604%" y="303.50"></text></g><g><title>ntdll.dll`RtlpHeapGenerateRandomValue32 (6 samples, 0.01%)</title><rect x="99.9344%" y="277" width="0.0131%" height="15" fill="rgb(226,163,40)" fg:x="45726" fg:w="6"/><text x="100.1844%" y="287.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (47 samples, 0.10%)</title><rect x="99.8470%" y="389" width="0.1027%" height="15" fill="rgb(239,212,28)" fg:x="45686" fg:w="47"/><text x="100.0970%" y="399.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (47 samples, 0.10%)</title><rect x="99.8470%" y="373" width="0.1027%" height="15" fill="rgb(220,20,13)" fg:x="45686" fg:w="47"/><text x="100.0970%" y="383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::with_capacity_zeroed_in (47 samples, 0.10%)</title><rect x="99.8470%" y="357" width="0.1027%" height="15" fill="rgb(210,164,35)" fg:x="45686" fg:w="47"/><text x="100.0970%" y="367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::allocate_in (47 samples, 0.10%)</title><rect x="99.8470%" y="341" width="0.1027%" height="15" fill="rgb(248,109,41)" fg:x="45686" fg:w="47"/><text x="100.0970%" y="351.50"></text></g><g><title>ntdll.dll`RtlpAllocateHeapInternal (45 samples, 0.10%)</title><rect x="99.8514%" y="325" width="0.0983%" height="15" fill="rgb(238,23,50)" fg:x="45688" fg:w="45"/><text x="100.1014%" y="335.50"></text></g><g><title>ntdll.dll`RtlpLowFragHeapAllocFromContext (41 samples, 0.09%)</title><rect x="99.8601%" y="309" width="0.0896%" height="15" fill="rgb(211,48,49)" fg:x="45692" fg:w="41"/><text x="100.1101%" y="319.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zeros(tuple$ (50 samples, 0.11%)</title><rect x="99.8470%" y="421" width="0.1093%" height="15" fill="rgb(223,36,21)" fg:x="45686" fg:w="50"/><text x="100.0970%" y="431.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_elem(tuple$ (50 samples, 0.11%)</title><rect x="99.8470%" y="405" width="0.1093%" height="15" fill="rgb(207,123,46)" fg:x="45686" fg:w="50"/><text x="100.0970%" y="415.50"></text></g><g><title>neural_network.exe`main (45,501 samples, 99.44%)</title><rect x="0.5158%" y="597" width="99.4427%" height="15" fill="rgb(240,218,32)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="607.50">neural_network.exe`main</text></g><g><title>neural_network.exe`std::rt::lang_start_internal (45,501 samples, 99.44%)</title><rect x="0.5158%" y="581" width="99.4427%" height="15" fill="rgb(252,5,43)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="591.50">neural_network.exe`std::rt::lang_start_internal</text></g><g><title>neural_network.exe`std::panic::catch_unwind (45,501 samples, 99.44%)</title><rect x="0.5158%" y="565" width="99.4427%" height="15" fill="rgb(252,84,19)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="575.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`std::panicking::try (45,501 samples, 99.44%)</title><rect x="0.5158%" y="549" width="99.4427%" height="15" fill="rgb(243,152,39)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="559.50">neural_network.exe`std::panicking::try</text></g><g><title>neural_network.exe`std::panicking::try::do_call (45,501 samples, 99.44%)</title><rect x="0.5158%" y="533" width="99.4427%" height="15" fill="rgb(234,160,15)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="543.50">neural_network.exe`std::panicking::try::do_call</text></g><g><title>neural_network.exe`std::rt::lang_start_internal::closure$2 (45,501 samples, 99.44%)</title><rect x="0.5158%" y="517" width="99.4427%" height="15" fill="rgb(237,34,20)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="527.50">neural_network.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>neural_network.exe`std::panic::catch_unwind (45,501 samples, 99.44%)</title><rect x="0.5158%" y="501" width="99.4427%" height="15" fill="rgb(229,97,13)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="511.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (45,501 samples, 99.44%)</title><rect x="0.5158%" y="485" width="99.4427%" height="15" fill="rgb(234,71,50)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="495.50">neural_network.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>neural_network.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (45,501 samples, 99.44%)</title><rect x="0.5158%" y="469" width="99.4427%" height="15" fill="rgb(253,155,4)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="479.50">neural_network.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>neural_network.exe`neural_network::main (45,501 samples, 99.44%)</title><rect x="0.5158%" y="453" width="99.4427%" height="15" fill="rgb(222,185,37)" fg:x="236" fg:w="45501"/><text x="0.7658%" y="463.50">neural_network.exe`neural_network::main</text></g><g><title>neural_network.exe`neural_network::mnist::load_mnist_file(ref$&lt;str$&gt;, ref$ (2,869 samples, 6.27%)</title><rect x="93.6883%" y="437" width="6.2702%" height="15" fill="rgb(251,177,13)" fg:x="42868" fg:w="2869"/><text x="93.9383%" y="447.50">neural_n..</text></g><g><title>neural_network.exe`invoke_main() (45,502 samples, 99.44%)</title><rect x="0.5158%" y="613" width="99.4449%" height="15" fill="rgb(250,179,40)" fg:x="236" fg:w="45502"/><text x="0.7658%" y="623.50">neural_network.exe`invoke_main()</text></g><g><title>neural_network.exe`__scrt_common_main_seh() (45,507 samples, 99.46%)</title><rect x="0.5136%" y="629" width="99.4558%" height="15" fill="rgb(242,44,2)" fg:x="235" fg:w="45507"/><text x="0.7636%" y="639.50">neural_network.exe`__scrt_common_main_seh()</text></g><g><title>ntdll.dll`LdrpMapDllNtFileName (5 samples, 0.01%)</title><rect x="99.9716%" y="549" width="0.0109%" height="15" fill="rgb(216,177,13)" fg:x="45743" fg:w="5"/><text x="100.2216%" y="559.50"></text></g><g><title>ntdll.dll`LdrpMapDllSearchPath (8 samples, 0.02%)</title><rect x="99.9716%" y="565" width="0.0175%" height="15" fill="rgb(216,106,43)" fg:x="45743" fg:w="8"/><text x="100.2216%" y="575.50"></text></g><g><title>all (45,756 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(216,183,2)" fg:x="0" fg:w="45756"/><text x="0.2500%" y="687.50"></text></g><g><title>ntdll.dll`RtlUserThreadStart (45,522 samples, 99.49%)</title><rect x="0.5114%" y="661" width="99.4886%" height="15" fill="rgb(249,75,3)" fg:x="234" fg:w="45522"/><text x="0.7614%" y="671.50">ntdll.dll`RtlUserThreadStart</text></g><g><title>kernel32.dll`BaseThreadInitThunk (45,521 samples, 99.49%)</title><rect x="0.5136%" y="645" width="99.4864%" height="15" fill="rgb(219,67,39)" fg:x="235" fg:w="45521"/><text x="0.7636%" y="655.50">kernel32.dll`BaseThreadInitThunk</text></g><g><title>ntdll.dll`TppWorkerThread (14 samples, 0.03%)</title><rect x="99.9694%" y="629" width="0.0306%" height="15" fill="rgb(253,228,2)" fg:x="45742" fg:w="14"/><text x="100.2194%" y="639.50"></text></g><g><title>ntdll.dll`TppWorkpExecuteCallback (13 samples, 0.03%)</title><rect x="99.9716%" y="613" width="0.0284%" height="15" fill="rgb(235,138,27)" fg:x="45743" fg:w="13"/><text x="100.2216%" y="623.50"></text></g><g><title>ntdll.dll`LdrpWorkCallback (13 samples, 0.03%)</title><rect x="99.9716%" y="597" width="0.0284%" height="15" fill="rgb(236,97,51)" fg:x="45743" fg:w="13"/><text x="100.2216%" y="607.50"></text></g><g><title>ntdll.dll`LdrpProcessWork (13 samples, 0.03%)</title><rect x="99.9716%" y="581" width="0.0284%" height="15" fill="rgb(240,80,30)" fg:x="45743" fg:w="13"/><text x="100.2216%" y="591.50"></text></g><g><title>ntdll.dll`LdrpSnapModule (5 samples, 0.01%)</title><rect x="99.9891%" y="565" width="0.0109%" height="15" fill="rgb(230,178,19)" fg:x="45751" fg:w="5"/><text x="100.2391%" y="575.50"></text></g></svg></svg>